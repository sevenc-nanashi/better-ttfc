// ==UserScript==
// @name Better TTFC
// @description 東映特撮ファンクラブのPC版サイトをより便利にするためのユーザースクリプト。
// @version 0.1.0
// @homepage https://github.com/sevenc-nanashi/better-ttfc
// @author Nanashi. <https://sevenc7c.com>
// @match https://pc.tokusatsu-fc.jp/*
// @updateURL https://raw.githubusercontent.com/sevenc-nanashi/better-ttfc/built/index.user.js
// @downloadURL https://raw.githubusercontent.com/sevenc-nanashi/better-ttfc/built/index.user.js
// @sandbox MAIN_WORLD
// @run-at document-body
// ==/UserScript==

"use strict";(()=>{var ws=Object.defineProperty;var de=(e,r)=>{for(var n in r)ws(e,n,{get:r[n],enumerable:!0})};var T={log:e=>{},warn:e=>{},error:(e,r)=>{console.error(`[xhr-hook] ${e}`,r)}};function Xa(e){T=e}var Ar=new Map,Te=Symbol("xhrHookPatch"),Lr=class{abortController=new AbortController;method;url;headers;readyState;status;statusText;response;responseBufferInternal;responseBuffer;responseUrl},F=e=>{let r=e;return r[Te]||(r[Te]=new Lr),r[Te]};function zs(){let e=XMLHttpRequest;if(e[Te]){T.warn("XMLHttpRequest is already hooked, skipping.");return}T.log("Hooking XMLHttpRequest"),e[Te]=!0,$e(e.prototype,"readyState",(r,n)=>F(r).readyState??n()),$e(e.prototype,"status",(r,n)=>F(r).status??n()),$e(e.prototype,"statusText",(r,n)=>F(r).statusText??n()),$e(e.prototype,"response",(r,n)=>{let i=F(r).responseBuffer;if(!i)return n();try{switch(r.responseType){case"":case"text":return new TextDecoder().decode(i);case"arraybuffer":return i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength);case"blob":return new Blob([i]);case"document":{let t=new TextDecoder().decode(i);return new DOMParser().parseFromString(t,"application/xml")}case"json":{let t=new TextDecoder().decode(i);return JSON.parse(t)}default:return null}}catch{return null}}),$e(e.prototype,"responseURL",(r,n)=>F(r).responseUrl??n()),$e(e.prototype,"responseText",(r,n)=>F(r).responseBufferInternal?new TextDecoder().decode(F(r).responseBufferInternal):n()),De(e.prototype,"open",(r,n,...i)=>{let[t,o]=i;T.log(`XMLHttpRequest open called with method: ${t}, url: ${o}`);let a=F(r);return a.abortController.abort(),a.abortController=new AbortController,a.method=t,a.url=o.toString(),a.headers={},Reflect.apply(n,r,i)}),De(e.prototype,"setRequestHeader",(r,n,i,t)=>{let o=i,a=t,u=F(r);return u.headers[o]=a,Reflect.apply(n,r,[i,t])}),De(e.prototype,"send",(r,n,i)=>{let t=F(r),o=Is(t);for(let[a,u]of Ar){T.log(`Calling hook "${a}"`);let s=u(o);if(s){T.log(`Hook "${a}" is overriding the request.`),Ss(r,s);return}else T.log(`Hook "${a}" did not return a response.`)}return T.log("No hooks returned a response, proceeding with original send."),Reflect.apply(n,r,[i])}),De(e.prototype,"abort",(r,n)=>(F(r).abortController.abort(),Reflect.apply(n,r,[]))),De(e.prototype,"getAllResponseHeaders",(r,n)=>{let i=F(r);return i.response?[...i.response.headers.entries()].map(([t,o])=>`${t}: ${o}`).join(`\r
`):Reflect.apply(n,r,[])})}function $e(e,r,n){let i=Object.getOwnPropertyDescriptor(e,r);if(!i?.get)throw new Error(`Property "${String(r)}" does not have a getter.`);Object.defineProperty(e,r,{get(){let t=i.get;if(t)return n(this,t.bind(this));T.warn(`Property "${String(r)}" does not have a getter.`)}})}function De(e,r,n){let i=e[r];if(typeof i!="function")throw new Error(`Property "${String(r)}" is not a method.`);Object.defineProperty(e,r,{value:function(...t){return n(this,i,...t)}})}function Is(e,r){let n=new URL(e.url||"",location.origin),i=new Headers;for(let[t,o]of Object.entries(e.headers))i.append(t,o);return new Request(n.toString(),{method:e.method,headers:i,body:null})}async function Ss(e,r){let n=F(e);n.readyState=1,T.log(`Starting XMLHttpRequest with method: ${n.method}, url: ${n.url}`),e.dispatchEvent(new Event("readystatechange"));try{let i=await r(n.abortController.signal);n.readyState=2,T.log(`XMLHttpRequest received headers with status: ${i.status}`),n.status=i.status,n.statusText=i.statusText,e.dispatchEvent(new Event("loadstart"));let t=new Uint8Array(i.headers.get("Content-Length")?parseInt(js(i.headers.get("Content-Length")),10):1024*1024),o=0,a=i.body?.getReader();if(n.response=i,a)for(;;){let{done:u,value:s}=await a.read();if(u)break;if(s){if(o+s.length>t.length){let m=new Uint8Array((t.length+s.length)*2);m.set(t),n.responseBufferInternal=m}else n.responseBufferInternal=t;n.responseBufferInternal.set(s,o),o+=s.length,n.responseBuffer=n.responseBufferInternal.subarray(0,o),n.readyState=3,T.log(`XMLHttpRequest loading, received ${o} bytes`),e.dispatchEvent(new Event("readystatechange")),e.dispatchEvent(new ProgressEvent("progress",{loaded:o}))}}n.responseBufferInternal=n.responseBufferInternal?.subarray(0,o),n.readyState=4,n.responseUrl=i.url,T.log(`Hook request completed with status: ${i.status}`),e.dispatchEvent(new Event("load")),e.dispatchEvent(new Event("readystatechange")),e.dispatchEvent(new Event("loadend"))}catch(i){T.error("XMLHttpRequest failed to start:",i),n.readyState=4,e.dispatchEvent(new Event("error")),e.dispatchEvent(new Event("readystatechange"));return}}function qa(e,r,n={}){zs();let i={onExists:"ignore",...n};if(Ar.has(e)){if(i.onExists==="error")throw new Error(`Hook with name "${e}" already exists.`);if(i.onExists==="ignore"){T.log(`Hook with name "${e}" already exists, ignoring insert.`);return}else i.onExists==="replace"&&T.log(`Replacing existing hook "${e}"`)}else T.log(`Inserting hook "${e}"`);Ar.set(e,r)}function js(e,r){if(e==null)throw new Error("Value is null or undefined");return e}var A={silent:Number.NEGATIVE_INFINITY,fatal:0,error:0,warn:1,log:2,info:3,success:3,fail:3,ready:3,start:3,box:3,debug:4,trace:5,verbose:Number.POSITIVE_INFINITY},Vr={silent:{level:-1},fatal:{level:A.fatal},error:{level:A.error},warn:{level:A.warn},log:{level:A.log},info:{level:A.info},success:{level:A.success},fail:{level:A.fail},ready:{level:A.info},start:{level:A.info},box:{level:A.info},debug:{level:A.debug},trace:{level:A.trace},verbose:{level:A.verbose}};function Rr(e){if(e===null||typeof e!="object")return!1;let r=Object.getPrototypeOf(e);return r!==null&&r!==Object.prototype&&Object.getPrototypeOf(r)!==null||Symbol.iterator in e?!1:Symbol.toStringTag in e?Object.prototype.toString.call(e)==="[object Module]":!0}function Mr(e,r,n=".",i){if(!Rr(r))return Mr(e,{},n,i);let t=Object.assign({},r);for(let o in e){if(o==="__proto__"||o==="constructor")continue;let a=e[o];a!=null&&(i&&i(t,o,a,n)||(Array.isArray(a)&&Array.isArray(t[o])?t[o]=[...a,...t[o]]:Rr(a)&&Rr(t[o])?t[o]=Mr(a,t[o],(n?`${n}.`:"")+o.toString(),i):t[o]=a))}return t}function Os(e){return(...r)=>r.reduce((n,i)=>Mr(n,i,"",e),{})}var Ps=Os();function Us(e){return Object.prototype.toString.call(e)==="[object Object]"}function Ns(e){return!(!Us(e)||!e.message&&!e.args||e.stack)}var Cr=!1,Ha=[],D=class e{options;_lastLog;_mockFn;constructor(r={}){let n=r.types||Vr;this.options=Ps({...r,defaults:{...r.defaults},level:Fr(r.level,n),reporters:[...r.reporters||[]]},{types:Vr,throttle:1e3,throttleMin:5,formatOptions:{date:!0,colors:!1,compact:!0}});for(let i in n){let t={type:i,...this.options.defaults,...n[i]};this[i]=this._wrapLogFn(t),this[i].raw=this._wrapLogFn(t,!0)}this.options.mockFn&&this.mockTypes(),this._lastLog={}}get level(){return this.options.level}set level(r){this.options.level=Fr(r,this.options.types,this.options.level)}prompt(r,n){if(!this.options.prompt)throw new Error("prompt is not supported!");return this.options.prompt(r,n)}create(r){let n=new e({...this.options,...r});return this._mockFn&&n.mockTypes(this._mockFn),n}withDefaults(r){return this.create({...this.options,defaults:{...this.options.defaults,...r}})}withTag(r){return this.withDefaults({tag:this.options.defaults.tag?this.options.defaults.tag+":"+r:r})}addReporter(r){return this.options.reporters.push(r),this}removeReporter(r){if(r){let n=this.options.reporters.indexOf(r);if(n!==-1)return this.options.reporters.splice(n,1)}else this.options.reporters.splice(0);return this}setReporters(r){return this.options.reporters=Array.isArray(r)?r:[r],this}wrapAll(){this.wrapConsole(),this.wrapStd()}restoreAll(){this.restoreConsole(),this.restoreStd()}wrapConsole(){for(let r in this.options.types)console["__"+r]||(console["__"+r]=console[r]),console[r]=this[r].raw}restoreConsole(){for(let r in this.options.types)console["__"+r]&&(console[r]=console["__"+r],delete console["__"+r])}wrapStd(){this._wrapStream(this.options.stdout,"log"),this._wrapStream(this.options.stderr,"log")}_wrapStream(r,n){r&&(r.__write||(r.__write=r.write),r.write=i=>{this[n].raw(String(i).trim())})}restoreStd(){this._restoreStream(this.options.stdout),this._restoreStream(this.options.stderr)}_restoreStream(r){r&&r.__write&&(r.write=r.__write,delete r.__write)}pauseLogs(){Cr=!0}resumeLogs(){Cr=!1;let r=Ha.splice(0);for(let n of r)n[0]._logFn(n[1],n[2])}mockTypes(r){let n=r||this.options.mockFn;if(this._mockFn=n,typeof n=="function")for(let i in this.options.types)this[i]=n(i,this.options.types[i])||this[i],this[i].raw=this[i]}_wrapLogFn(r,n){return(...i)=>{if(Cr){Ha.push([this,r,i,n]);return}return this._logFn(r,i,n)}}_logFn(r,n,i){if((r.level||0)>this.level)return!1;let t={date:new Date,args:[],...r,level:Fr(r.level,this.options.types)};!i&&n.length===1&&Ns(n[0])?Object.assign(t,n[0]):t.args=[...n],t.message&&(t.args.unshift(t.message),delete t.message),t.additional&&(Array.isArray(t.additional)||(t.additional=t.additional.split(`
`)),t.args.push(`
`+t.additional.join(`
`)),delete t.additional),t.type=typeof t.type=="string"?t.type.toLowerCase():"log",t.tag=typeof t.tag=="string"?t.tag:"";let o=(u=!1)=>{let s=(this._lastLog.count||0)-this.options.throttleMin;if(this._lastLog.object&&s>0){let m=[...this._lastLog.object.args];s>1&&m.push(`(repeated ${s} times)`),this._log({...this._lastLog.object,args:m}),this._lastLog.count=1}u&&(this._lastLog.object=t,this._log(t))};clearTimeout(this._lastLog.timeout);let a=this._lastLog.time&&t.date?t.date.getTime()-this._lastLog.time.getTime():0;if(this._lastLog.time=t.date,a<this.options.throttle)try{let u=JSON.stringify([t.type,t.tag,t.args]),s=this._lastLog.serialized===u;if(this._lastLog.serialized=u,s&&(this._lastLog.count=(this._lastLog.count||0)+1,this._lastLog.count>this.options.throttleMin)){this._lastLog.timeout=setTimeout(o,this.options.throttle);return}}catch{}o(!0)}_log(r){for(let n of this.options.reporters)n.log(r,{options:this.options})}};function Fr(e,r={},n=3){return e===void 0?n:typeof e=="number"?e:r[e]&&r[e].level!==void 0?r[e].level:n}D.prototype.add=D.prototype.addReporter;D.prototype.remove=D.prototype.removeReporter;D.prototype.clear=D.prototype.removeReporter;D.prototype.withScope=D.prototype.withTag;D.prototype.mock=D.prototype.mockTypes;D.prototype.pause=D.prototype.pauseLogs;D.prototype.resume=D.prototype.resumeLogs;function Ya(e={}){return new D(e)}var Jr=class{options;defaultColor;levelColorMap;typeColorMap;constructor(r){this.options={...r},this.defaultColor="#7f8c8d",this.levelColorMap={0:"#c0392b",1:"#f39c12",3:"#00BCD4"},this.typeColorMap={success:"#2ecc71"}}_getLogFn(r){return r<1?console.__error||console.error:r===1?console.__warn||console.warn:console.__log||console.log}log(r){let n=this._getLogFn(r.level),i=r.type==="log"?"":r.type,t=r.tag||"",a=`
      background: ${this.typeColorMap[r.type]||this.levelColorMap[r.level]||this.defaultColor};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `,u=`%c${[t,i].filter(Boolean).join(":")}`;typeof r.args[0]=="string"?n(`${u}%c ${r.args[0]}`,a,"",...r.args.slice(1)):n(u,a,...r.args)}};function Zs(e={}){return Ya({reporters:e.reporters||[new Jr({})],prompt(n,i={}){return i.type==="confirm"?Promise.resolve(confirm(n)):Promise.resolve(prompt(n))},...e})}var Qa=Zs();var V=Qa.withTag("Better TTFC");function me(e,r){return new RegExp(`^${r.replaceAll(".","\\.").replaceAll("*",".*")}(?:\\?.*)?$`).test(e)}function Ds(e,r=document){return Array.from(r.querySelectorAll(e))}function eu(e,r=document){let n=Ds(e,r);if(n.length===0)throw new Error(`No elements found for selector: ${e}`);return n}function yt(e,r=document,n=1e4){let{promise:i,resolve:t,reject:o}=Promise.withResolvers(),a=Date.now();return setInterval(()=>{let u=xt(e,r);u&&t(u),Date.now()-a>n&&o(new Error(`Timeout waiting for element: ${e}`))},100),i}function xt(e,r=document){return r.querySelector(e)}function kt(e,r=document){let n=xt(e,r);if(!n)throw new Error(`No element found for selector: ${e}`);return n}function wt(e){let r=document.createElement("style");return r.textContent=e,document.head.appendChild(r),()=>{r.parentElement&&r.parentElement.removeChild(r)}}var X=class{constructor(r){this.log=r}teardowns=[];add(r){this.teardowns.push(r)}clear(){let r=this.log.withTag("TeardownManager");r.log(`Running ${this.teardowns.length} teardowns`);for(let n of this.teardowns)n();this.teardowns.length=0,r.log("All teardowns completed")}};var zt=V.withTag("all"),tu=new X(zt);function Ts(){let e=zt.withTag("setTitle"),r=kt("#diplay-head .h2").textContent;if(r){let n=`${r} | \u6771\u6620\u7279\u64AE\u30D5\u30A1\u30F3\u30AF\u30E9\u30D6`;document.title!==n&&(document.title=n,e.log("Set document title to:",n))}}async function ru(e){zt.log("Started"),zt.log("Page loaded, executing script...");let r=setInterval(()=>{Ts()},100);return tu.add(()=>{clearInterval(r)}),()=>tu.clear()}var G={};de(G,{$brand:()=>It,$input:()=>li,$output:()=>si,NEVER:()=>Br,TimePrecision:()=>pi,ZodAny:()=>Nc,ZodArray:()=>Ec,ZodBase64:()=>Pa,ZodBase64URL:()=>Ua,ZodBigInt:()=>bt,ZodBigIntFormat:()=>Da,ZodBoolean:()=>_t,ZodCIDRv4:()=>ja,ZodCIDRv6:()=>Oa,ZodCUID:()=>ya,ZodCUID2:()=>xa,ZodCatch:()=>ts,ZodCodec:()=>Ja,ZodCustom:()=>Dr,ZodCustomStringFormat:()=>ht,ZodDate:()=>Ur,ZodDefault:()=>Xc,ZodDiscriminatedUnion:()=>Ac,ZodE164:()=>Na,ZodEmail:()=>$a,ZodEmoji:()=>_a,ZodEnum:()=>gt,ZodError:()=>lm,ZodFile:()=>Wc,ZodFirstPartyTypeKind:()=>Ba,ZodFunction:()=>ls,ZodGUID:()=>Ir,ZodIPv4:()=>Ia,ZodIPv6:()=>Sa,ZodISODate:()=>xr,ZodISODateTime:()=>yr,ZodISODuration:()=>wr,ZodISOTime:()=>kr,ZodIntersection:()=>Lc,ZodIssueCode:()=>yp,ZodJWT:()=>Za,ZodKSUID:()=>za,ZodLazy:()=>us,ZodLiteral:()=>Bc,ZodMap:()=>Mc,ZodNaN:()=>ns,ZodNanoID:()=>ba,ZodNever:()=>Dc,ZodNonOptional:()=>Va,ZodNull:()=>Pc,ZodNullable:()=>Kc,ZodNumber:()=>$t,ZodNumberFormat:()=>Ze,ZodObject:()=>Zr,ZodOptional:()=>Fa,ZodPipe:()=>Ma,ZodPrefault:()=>Hc,ZodPromise:()=>ss,ZodReadonly:()=>os,ZodRealError:()=>C,ZodRecord:()=>La,ZodSet:()=>Jc,ZodString:()=>vt,ZodStringFormat:()=>O,ZodSuccess:()=>es,ZodSymbol:()=>jc,ZodTemplateLiteral:()=>as,ZodTransform:()=>Gc,ZodTuple:()=>Cc,ZodType:()=>k,ZodULID:()=>ka,ZodURL:()=>Pr,ZodUUID:()=>ne,ZodUndefined:()=>Oc,ZodUnion:()=>Ea,ZodUnknown:()=>Zc,ZodVoid:()=>Tc,ZodXID:()=>wa,_ZodString:()=>ha,_default:()=>qc,_function:()=>fp,any:()=>Km,array:()=>Nr,base64:()=>Um,base64url:()=>Nm,bigint:()=>Mm,boolean:()=>Sc,catch:()=>rs,check:()=>gp,cidrv4:()=>Om,cidrv6:()=>Pm,clone:()=>E,codec:()=>dp,coerce:()=>Wa,config:()=>N,core:()=>re,cuid:()=>xm,cuid2:()=>km,custom:()=>vp,date:()=>qm,decode:()=>ca,decodeAsync:()=>la,discriminatedUnion:()=>tp,e164:()=>Zm,email:()=>mm,emoji:()=>bm,encode:()=>ua,encodeAsync:()=>sa,endsWith:()=>ct,enum:()=>Ra,file:()=>up,flattenError:()=>Je,float32:()=>Rm,float64:()=>Cm,formatError:()=>Be,function:()=>fp,getErrorMap:()=>kp,globalRegistry:()=>H,gt:()=>ee,gte:()=>R,guid:()=>pm,hash:()=>Lm,hex:()=>Am,hostname:()=>Em,httpUrl:()=>_m,includes:()=>at,instanceof:()=>hp,int:()=>va,int32:()=>Fm,int64:()=>Jm,intersection:()=>Rc,ipv4:()=>Sm,ipv6:()=>jm,iso:()=>zr,json:()=>_p,jwt:()=>Dm,keyof:()=>Hm,ksuid:()=>Im,lazy:()=>cs,length:()=>Pe,literal:()=>ap,locales:()=>Qe,looseObject:()=>ep,lowercase:()=>ot,lt:()=>Q,lte:()=>W,map:()=>np,maxLength:()=>Oe,maxSize:()=>je,mime:()=>st,minLength:()=>le,minSize:()=>he,multipleOf:()=>ve,nan:()=>lp,nanoid:()=>ym,nativeEnum:()=>ip,negative:()=>Vi,never:()=>Ta,nonnegative:()=>Ji,nonoptional:()=>Qc,nonpositive:()=>Mi,normalize:()=>lt,null:()=>Uc,nullable:()=>jr,nullish:()=>cp,number:()=>Ic,object:()=>Ym,optional:()=>Sr,overwrite:()=>te,parse:()=>na,parseAsync:()=>oa,partialRecord:()=>rp,pipe:()=>Or,positive:()=>Fi,prefault:()=>Yc,preprocess:()=>bp,prettifyError:()=>rn,promise:()=>pp,property:()=>Bi,readonly:()=>is,record:()=>Vc,refine:()=>ds,regex:()=>nt,regexes:()=>B,registry:()=>er,safeDecode:()=>ma,safeDecodeAsync:()=>fa,safeEncode:()=>da,safeEncodeAsync:()=>pa,safeParse:()=>ia,safeParseAsync:()=>aa,set:()=>op,setErrorMap:()=>xp,size:()=>rt,startsWith:()=>ut,strictObject:()=>Qm,string:()=>ga,stringFormat:()=>Tm,stringbool:()=>$p,success:()=>sp,superRefine:()=>ms,symbol:()=>Wm,templateLiteral:()=>mp,toJSONSchema:()=>Yi,toLowerCase:()=>mt,toUpperCase:()=>pt,transform:()=>Ca,treeifyError:()=>tn,trim:()=>dt,tuple:()=>Fc,uint32:()=>Vm,uint64:()=>Bm,ulid:()=>wm,undefined:()=>Gm,union:()=>Aa,unknown:()=>Ne,uppercase:()=>it,url:()=>$m,util:()=>v,uuid:()=>fm,uuidv4:()=>gm,uuidv6:()=>vm,uuidv7:()=>hm,void:()=>Xm,xid:()=>zm});var re={};de(re,{$ZodAny:()=>No,$ZodArray:()=>Ao,$ZodAsyncError:()=>K,$ZodBase64:()=>xo,$ZodBase64URL:()=>ko,$ZodBigInt:()=>Kt,$ZodBigIntFormat:()=>jo,$ZodBoolean:()=>Xe,$ZodCIDRv4:()=>_o,$ZodCIDRv6:()=>bo,$ZodCUID:()=>uo,$ZodCUID2:()=>co,$ZodCatch:()=>ei,$ZodCheck:()=>U,$ZodCheckBigIntFormat:()=>An,$ZodCheckEndsWith:()=>Xn,$ZodCheckGreaterThan:()=>Ft,$ZodCheckIncludes:()=>Gn,$ZodCheckLengthEquals:()=>Mn,$ZodCheckLessThan:()=>Ct,$ZodCheckLowerCase:()=>Bn,$ZodCheckMaxLength:()=>Fn,$ZodCheckMaxSize:()=>Ln,$ZodCheckMimeType:()=>Hn,$ZodCheckMinLength:()=>Vn,$ZodCheckMinSize:()=>Rn,$ZodCheckMultipleOf:()=>Tn,$ZodCheckNumberFormat:()=>En,$ZodCheckOverwrite:()=>Yn,$ZodCheckProperty:()=>qn,$ZodCheckRegex:()=>Jn,$ZodCheckSizeEquals:()=>Cn,$ZodCheckStartsWith:()=>Kn,$ZodCheckStringFormat:()=>Ie,$ZodCheckUpperCase:()=>Wn,$ZodCodec:()=>qe,$ZodCustom:()=>ci,$ZodCustomStringFormat:()=>Io,$ZodDate:()=>Eo,$ZodDefault:()=>qo,$ZodDiscriminatedUnion:()=>Ro,$ZodE164:()=>wo,$ZodEmail:()=>no,$ZodEmoji:()=>io,$ZodEncodeError:()=>oe,$ZodEnum:()=>Jo,$ZodError:()=>Me,$ZodFile:()=>Wo,$ZodFunction:()=>ii,$ZodGUID:()=>to,$ZodIPv4:()=>ho,$ZodIPv6:()=>$o,$ZodISODate:()=>fo,$ZodISODateTime:()=>po,$ZodISODuration:()=>vo,$ZodISOTime:()=>go,$ZodIntersection:()=>Co,$ZodJWT:()=>zo,$ZodKSUID:()=>mo,$ZodLazy:()=>ui,$ZodLiteral:()=>Bo,$ZodMap:()=>Vo,$ZodNaN:()=>ti,$ZodNanoID:()=>ao,$ZodNever:()=>Do,$ZodNonOptional:()=>Yo,$ZodNull:()=>Uo,$ZodNullable:()=>Xo,$ZodNumber:()=>Gt,$ZodNumberFormat:()=>So,$ZodObject:()=>ju,$ZodObjectJIT:()=>Lo,$ZodOptional:()=>Ko,$ZodPipe:()=>ri,$ZodPrefault:()=>Ho,$ZodPromise:()=>ai,$ZodReadonly:()=>ni,$ZodRealError:()=>L,$ZodRecord:()=>Fo,$ZodRegistry:()=>Se,$ZodSet:()=>Mo,$ZodString:()=>ge,$ZodStringFormat:()=>j,$ZodSuccess:()=>Qo,$ZodSymbol:()=>Oo,$ZodTemplateLiteral:()=>oi,$ZodTransform:()=>Go,$ZodTuple:()=>qt,$ZodType:()=>x,$ZodULID:()=>so,$ZodURL:()=>oo,$ZodUUID:()=>ro,$ZodUndefined:()=>Po,$ZodUnion:()=>Xt,$ZodUnknown:()=>Zo,$ZodVoid:()=>To,$ZodXID:()=>lo,$brand:()=>It,$constructor:()=>c,$input:()=>li,$output:()=>si,Doc:()=>Ke,JSONSchema:()=>kc,JSONSchemaGenerator:()=>ft,NEVER:()=>Br,TimePrecision:()=>pi,_any:()=>Di,_array:()=>Wi,_base64:()=>hr,_base64url:()=>$r,_bigint:()=>Si,_boolean:()=>zi,_catch:()=>nm,_check:()=>xc,_cidrv4:()=>gr,_cidrv6:()=>vr,_coercedBigint:()=>ji,_coercedBoolean:()=>Ii,_coercedDate:()=>Ri,_coercedNumber:()=>_i,_coercedString:()=>mi,_cuid:()=>cr,_cuid2:()=>sr,_custom:()=>Ki,_date:()=>Li,_decode:()=>Nt,_decodeAsync:()=>Dt,_default:()=>em,_discriminatedUnion:()=>Vd,_e164:()=>_r,_email:()=>tr,_emoji:()=>ar,_encode:()=>Ut,_encodeAsync:()=>Zt,_endsWith:()=>ct,_enum:()=>Kd,_file:()=>Gi,_float32:()=>yi,_float64:()=>xi,_gt:()=>ee,_gte:()=>R,_guid:()=>et,_includes:()=>at,_int:()=>bi,_int32:()=>ki,_int64:()=>Oi,_intersection:()=>Md,_ipv4:()=>pr,_ipv6:()=>fr,_isoDate:()=>gi,_isoDateTime:()=>fi,_isoDuration:()=>hi,_isoTime:()=>vi,_jwt:()=>br,_ksuid:()=>mr,_lazy:()=>um,_length:()=>Pe,_literal:()=>qd,_lowercase:()=>ot,_lt:()=>Q,_lte:()=>W,_map:()=>Wd,_max:()=>W,_maxLength:()=>Oe,_maxSize:()=>je,_mime:()=>st,_min:()=>R,_minLength:()=>le,_minSize:()=>he,_multipleOf:()=>ve,_nan:()=>Ci,_nanoid:()=>ur,_nativeEnum:()=>Xd,_negative:()=>Vi,_never:()=>Ei,_nonnegative:()=>Ji,_nonoptional:()=>tm,_nonpositive:()=>Mi,_normalize:()=>lt,_null:()=>Zi,_nullable:()=>Qd,_number:()=>$i,_optional:()=>Yd,_overwrite:()=>te,_parse:()=>xe,_parseAsync:()=>ke,_pipe:()=>om,_positive:()=>Fi,_promise:()=>cm,_property:()=>Bi,_readonly:()=>im,_record:()=>Bd,_refine:()=>Xi,_regex:()=>nt,_safeDecode:()=>Et,_safeDecodeAsync:()=>Lt,_safeEncode:()=>Tt,_safeEncodeAsync:()=>At,_safeParse:()=>we,_safeParseAsync:()=>ze,_set:()=>Gd,_size:()=>rt,_startsWith:()=>ut,_string:()=>di,_stringFormat:()=>Ue,_stringbool:()=>Hi,_success:()=>rm,_superRefine:()=>qi,_symbol:()=>Ui,_templateLiteral:()=>am,_toLowerCase:()=>mt,_toUpperCase:()=>pt,_transform:()=>Hd,_trim:()=>dt,_tuple:()=>Jd,_uint32:()=>wi,_uint64:()=>Pi,_ulid:()=>lr,_undefined:()=>Ni,_union:()=>Fd,_unknown:()=>Ti,_uppercase:()=>it,_url:()=>tt,_uuid:()=>rr,_uuidv4:()=>nr,_uuidv6:()=>or,_uuidv7:()=>ir,_void:()=>Ai,_xid:()=>dr,clone:()=>E,config:()=>N,decode:()=>sl,decodeAsync:()=>dl,encode:()=>cl,encodeAsync:()=>ll,flattenError:()=>Je,formatError:()=>Be,globalConfig:()=>Ee,globalRegistry:()=>H,isValidBase64:()=>yo,isValidBase64URL:()=>wu,isValidJWT:()=>zu,locales:()=>Qe,parse:()=>Ot,parseAsync:()=>Pt,prettifyError:()=>rn,regexes:()=>B,registry:()=>er,safeDecode:()=>pl,safeDecodeAsync:()=>gl,safeEncode:()=>ml,safeEncodeAsync:()=>fl,safeParse:()=>nn,safeParseAsync:()=>on,toDotPath:()=>uu,toJSONSchema:()=>Yi,treeifyError:()=>tn,util:()=>v,version:()=>Qn});var Br=Object.freeze({status:"aborted"});function c(e,r,n){function i(u,s){var m;Object.defineProperty(u,"_zod",{value:u._zod??{},enumerable:!1}),(m=u._zod).traits??(m.traits=new Set),u._zod.traits.add(e),r(u,s);for(let p in a.prototype)p in u||Object.defineProperty(u,p,{value:a.prototype[p].bind(u)});u._zod.constr=a,u._zod.def=s}let t=n?.Parent??Object;class o extends t{}Object.defineProperty(o,"name",{value:e});function a(u){var s;let m=n?.Parent?new o:this;i(m,u),(s=m._zod).deferred??(s.deferred=[]);for(let p of m._zod.deferred)p();return m}return Object.defineProperty(a,"init",{value:i}),Object.defineProperty(a,Symbol.hasInstance,{value:u=>n?.Parent&&u instanceof n.Parent?!0:u?._zod?.traits?.has(e)}),Object.defineProperty(a,"name",{value:e}),a}var It=Symbol("zod_brand"),K=class extends Error{constructor(){super("Encountered Promise during synchronous parse. Use .parseAsync() instead.")}},oe=class extends Error{constructor(r){super(`Encountered unidirectional transform during encode: ${r}`),this.name="ZodEncodeError"}},Ee={};function N(e){return e&&Object.assign(Ee,e),Ee}var v={};de(v,{BIGINT_FORMAT_RANGES:()=>en,Class:()=>Gr,NUMBER_FORMAT_RANGES:()=>Qr,aborted:()=>se,allowsEval:()=>Xr,assert:()=>Cs,assertEqual:()=>Es,assertIs:()=>Ls,assertNever:()=>Rs,assertNotEqual:()=>As,assignProp:()=>ae,base64ToUint8Array:()=>ou,base64urlToUint8Array:()=>nl,cached:()=>be,captureStackTrace:()=>jt,cleanEnum:()=>rl,cleanRegex:()=>Re,clone:()=>E,cloneDef:()=>Vs,createTransparentProxy:()=>Ks,defineLazy:()=>w,esc:()=>St,escapeRegex:()=>q,extend:()=>Hs,finalizeIssue:()=>J,floatSafeRemainder:()=>Kr,getElementAtPath:()=>Ms,getEnumValues:()=>Le,getLengthableOrigin:()=>Ve,getParsedType:()=>Gs,getSizableOrigin:()=>Fe,hexToUint8Array:()=>il,isObject:()=>pe,isPlainObject:()=>ce,issue:()=>ye,joinValues:()=>l,jsonStringifyReplacer:()=>_e,merge:()=>Qs,mergeDefs:()=>ue,normalizeParams:()=>g,nullish:()=>ie,numKeys:()=>Ws,objectClone:()=>Fs,omit:()=>qs,optionalKeys:()=>Yr,partial:()=>el,pick:()=>Xs,prefixIssues:()=>M,primitiveTypes:()=>Hr,promiseAllObject:()=>Js,propertyKeyTypes:()=>Ce,randomString:()=>Bs,required:()=>tl,safeExtend:()=>Ys,shallowClone:()=>qr,stringifyPrimitive:()=>f,uint8ArrayToBase64:()=>iu,uint8ArrayToBase64url:()=>ol,uint8ArrayToHex:()=>al,unwrapMessage:()=>Ae});function Es(e){return e}function As(e){return e}function Ls(e){}function Rs(e){throw new Error}function Cs(e){}function Le(e){let r=Object.values(e).filter(i=>typeof i=="number");return Object.entries(e).filter(([i,t])=>r.indexOf(+i)===-1).map(([i,t])=>t)}function l(e,r="|"){return e.map(n=>f(n)).join(r)}function _e(e,r){return typeof r=="bigint"?r.toString():r}function be(e){return{get value(){{let n=e();return Object.defineProperty(this,"value",{value:n}),n}throw new Error("cached value already set")}}}function ie(e){return e==null}function Re(e){let r=e.startsWith("^")?1:0,n=e.endsWith("$")?e.length-1:e.length;return e.slice(r,n)}function Kr(e,r){let n=(e.toString().split(".")[1]||"").length,i=r.toString(),t=(i.split(".")[1]||"").length;if(t===0&&/\d?e-\d?/.test(i)){let s=i.match(/\d?e-(\d?)/);s?.[1]&&(t=Number.parseInt(s[1]))}let o=n>t?n:t,a=Number.parseInt(e.toFixed(o).replace(".","")),u=Number.parseInt(r.toFixed(o).replace(".",""));return a%u/10**o}var nu=Symbol("evaluating");function w(e,r,n){let i;Object.defineProperty(e,r,{get(){if(i!==nu)return i===void 0&&(i=nu,i=n()),i},set(t){Object.defineProperty(e,r,{value:t})},configurable:!0})}function Fs(e){return Object.create(Object.getPrototypeOf(e),Object.getOwnPropertyDescriptors(e))}function ae(e,r,n){Object.defineProperty(e,r,{value:n,writable:!0,enumerable:!0,configurable:!0})}function ue(...e){let r={};for(let n of e){let i=Object.getOwnPropertyDescriptors(n);Object.assign(r,i)}return Object.defineProperties({},r)}function Vs(e){return ue(e._zod.def)}function Ms(e,r){return r?r.reduce((n,i)=>n?.[i],e):e}function Js(e){let r=Object.keys(e),n=r.map(i=>e[i]);return Promise.all(n).then(i=>{let t={};for(let o=0;o<r.length;o++)t[r[o]]=i[o];return t})}function Bs(e=10){let r="abcdefghijklmnopqrstuvwxyz",n="";for(let i=0;i<e;i++)n+=r[Math.floor(Math.random()*r.length)];return n}function St(e){return JSON.stringify(e)}var jt="captureStackTrace"in Error?Error.captureStackTrace:(...e)=>{};function pe(e){return typeof e=="object"&&e!==null&&!Array.isArray(e)}var Xr=be(()=>{if(typeof navigator<"u"&&navigator?.userAgent?.includes("Cloudflare"))return!1;try{let e=Function;return new e(""),!0}catch{return!1}});function ce(e){if(pe(e)===!1)return!1;let r=e.constructor;if(r===void 0)return!0;let n=r.prototype;return!(pe(n)===!1||Object.prototype.hasOwnProperty.call(n,"isPrototypeOf")===!1)}function qr(e){return ce(e)?{...e}:Array.isArray(e)?[...e]:e}function Ws(e){let r=0;for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&r++;return r}var Gs=e=>{let r=typeof e;switch(r){case"undefined":return"undefined";case"string":return"string";case"number":return Number.isNaN(e)?"nan":"number";case"boolean":return"boolean";case"function":return"function";case"bigint":return"bigint";case"symbol":return"symbol";case"object":return Array.isArray(e)?"array":e===null?"null":e.then&&typeof e.then=="function"&&e.catch&&typeof e.catch=="function"?"promise":typeof Map<"u"&&e instanceof Map?"map":typeof Set<"u"&&e instanceof Set?"set":typeof Date<"u"&&e instanceof Date?"date":typeof File<"u"&&e instanceof File?"file":"object";default:throw new Error(`Unknown data type: ${r}`)}},Ce=new Set(["string","number","symbol"]),Hr=new Set(["string","number","bigint","boolean","symbol","undefined"]);function q(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function E(e,r,n){let i=new e._zod.constr(r??e._zod.def);return(!r||n?.parent)&&(i._zod.parent=e),i}function g(e){let r=e;if(!r)return{};if(typeof r=="string")return{error:()=>r};if(r?.message!==void 0){if(r?.error!==void 0)throw new Error("Cannot specify both `message` and `error` params");r.error=r.message}return delete r.message,typeof r.error=="string"?{...r,error:()=>r.error}:r}function Ks(e){let r;return new Proxy({},{get(n,i,t){return r??(r=e()),Reflect.get(r,i,t)},set(n,i,t,o){return r??(r=e()),Reflect.set(r,i,t,o)},has(n,i){return r??(r=e()),Reflect.has(r,i)},deleteProperty(n,i){return r??(r=e()),Reflect.deleteProperty(r,i)},ownKeys(n){return r??(r=e()),Reflect.ownKeys(r)},getOwnPropertyDescriptor(n,i){return r??(r=e()),Reflect.getOwnPropertyDescriptor(r,i)},defineProperty(n,i,t){return r??(r=e()),Reflect.defineProperty(r,i,t)}})}function f(e){return typeof e=="bigint"?e.toString()+"n":typeof e=="string"?`"${e}"`:`${e}`}function Yr(e){return Object.keys(e).filter(r=>e[r]._zod.optin==="optional"&&e[r]._zod.optout==="optional")}var Qr={safeint:[Number.MIN_SAFE_INTEGER,Number.MAX_SAFE_INTEGER],int32:[-2147483648,2147483647],uint32:[0,4294967295],float32:[-34028234663852886e22,34028234663852886e22],float64:[-Number.MAX_VALUE,Number.MAX_VALUE]},en={int64:[BigInt("-9223372036854775808"),BigInt("9223372036854775807")],uint64:[BigInt(0),BigInt("18446744073709551615")]};function Xs(e,r){let n=e._zod.def,i=ue(e._zod.def,{get shape(){let t={};for(let o in r){if(!(o in n.shape))throw new Error(`Unrecognized key: "${o}"`);r[o]&&(t[o]=n.shape[o])}return ae(this,"shape",t),t},checks:[]});return E(e,i)}function qs(e,r){let n=e._zod.def,i=ue(e._zod.def,{get shape(){let t={...e._zod.def.shape};for(let o in r){if(!(o in n.shape))throw new Error(`Unrecognized key: "${o}"`);r[o]&&delete t[o]}return ae(this,"shape",t),t},checks:[]});return E(e,i)}function Hs(e,r){if(!ce(r))throw new Error("Invalid input to extend: expected a plain object");let n=e._zod.def.checks;if(n&&n.length>0)throw new Error("Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.");let t=ue(e._zod.def,{get shape(){let o={...e._zod.def.shape,...r};return ae(this,"shape",o),o},checks:[]});return E(e,t)}function Ys(e,r){if(!ce(r))throw new Error("Invalid input to safeExtend: expected a plain object");let n={...e._zod.def,get shape(){let i={...e._zod.def.shape,...r};return ae(this,"shape",i),i},checks:e._zod.def.checks};return E(e,n)}function Qs(e,r){let n=ue(e._zod.def,{get shape(){let i={...e._zod.def.shape,...r._zod.def.shape};return ae(this,"shape",i),i},get catchall(){return r._zod.def.catchall},checks:[]});return E(e,n)}function el(e,r,n){let i=ue(r._zod.def,{get shape(){let t=r._zod.def.shape,o={...t};if(n)for(let a in n){if(!(a in t))throw new Error(`Unrecognized key: "${a}"`);n[a]&&(o[a]=e?new e({type:"optional",innerType:t[a]}):t[a])}else for(let a in t)o[a]=e?new e({type:"optional",innerType:t[a]}):t[a];return ae(this,"shape",o),o},checks:[]});return E(r,i)}function tl(e,r,n){let i=ue(r._zod.def,{get shape(){let t=r._zod.def.shape,o={...t};if(n)for(let a in n){if(!(a in o))throw new Error(`Unrecognized key: "${a}"`);n[a]&&(o[a]=new e({type:"nonoptional",innerType:t[a]}))}else for(let a in t)o[a]=new e({type:"nonoptional",innerType:t[a]});return ae(this,"shape",o),o},checks:[]});return E(r,i)}function se(e,r=0){if(e.aborted===!0)return!0;for(let n=r;n<e.issues.length;n++)if(e.issues[n]?.continue!==!0)return!0;return!1}function M(e,r){return r.map(n=>{var i;return(i=n).path??(i.path=[]),n.path.unshift(e),n})}function Ae(e){return typeof e=="string"?e:e?.message}function J(e,r,n){let i={...e,path:e.path??[]};if(!e.message){let t=Ae(e.inst?._zod.def?.error?.(e))??Ae(r?.error?.(e))??Ae(n.customError?.(e))??Ae(n.localeError?.(e))??"Invalid input";i.message=t}return delete i.inst,delete i.continue,r?.reportInput||delete i.input,i}function Fe(e){return e instanceof Set?"set":e instanceof Map?"map":e instanceof File?"file":"unknown"}function Ve(e){return Array.isArray(e)?"array":typeof e=="string"?"string":"unknown"}function ye(...e){let[r,n,i]=e;return typeof r=="string"?{message:r,code:"custom",input:n,inst:i}:{...r}}function rl(e){return Object.entries(e).filter(([r,n])=>Number.isNaN(Number.parseInt(r,10))).map(r=>r[1])}function ou(e){let r=atob(e),n=new Uint8Array(r.length);for(let i=0;i<r.length;i++)n[i]=r.charCodeAt(i);return n}function iu(e){let r="";for(let n=0;n<e.length;n++)r+=String.fromCharCode(e[n]);return btoa(r)}function nl(e){let r=e.replace(/-/g,"+").replace(/_/g,"/"),n="=".repeat((4-r.length%4)%4);return ou(r+n)}function ol(e){return iu(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function il(e){let r=e.replace(/^0x/,"");if(r.length%2!==0)throw new Error("Invalid hex string length");let n=new Uint8Array(r.length/2);for(let i=0;i<r.length;i+=2)n[i/2]=Number.parseInt(r.slice(i,i+2),16);return n}function al(e){return Array.from(e).map(r=>r.toString(16).padStart(2,"0")).join("")}var Gr=class{constructor(...r){}};var au=(e,r)=>{e.name="$ZodError",Object.defineProperty(e,"_zod",{value:e._zod,enumerable:!1}),Object.defineProperty(e,"issues",{value:r,enumerable:!1}),e.message=JSON.stringify(r,_e,2),Object.defineProperty(e,"toString",{value:()=>e.message,enumerable:!1})},Me=c("$ZodError",au),L=c("$ZodError",au,{Parent:Error});function Je(e,r=n=>n.message){let n={},i=[];for(let t of e.issues)t.path.length>0?(n[t.path[0]]=n[t.path[0]]||[],n[t.path[0]].push(r(t))):i.push(r(t));return{formErrors:i,fieldErrors:n}}function Be(e,r=n=>n.message){let n={_errors:[]},i=t=>{for(let o of t.issues)if(o.code==="invalid_union"&&o.errors.length)o.errors.map(a=>i({issues:a}));else if(o.code==="invalid_key")i({issues:o.issues});else if(o.code==="invalid_element")i({issues:o.issues});else if(o.path.length===0)n._errors.push(r(o));else{let a=n,u=0;for(;u<o.path.length;){let s=o.path[u];u===o.path.length-1?(a[s]=a[s]||{_errors:[]},a[s]._errors.push(r(o))):a[s]=a[s]||{_errors:[]},a=a[s],u++}}};return i(e),n}function tn(e,r=n=>n.message){let n={errors:[]},i=(t,o=[])=>{var a,u;for(let s of t.issues)if(s.code==="invalid_union"&&s.errors.length)s.errors.map(m=>i({issues:m},s.path));else if(s.code==="invalid_key")i({issues:s.issues},s.path);else if(s.code==="invalid_element")i({issues:s.issues},s.path);else{let m=[...o,...s.path];if(m.length===0){n.errors.push(r(s));continue}let p=n,h=0;for(;h<m.length;){let y=m[h],$=h===m.length-1;typeof y=="string"?(p.properties??(p.properties={}),(a=p.properties)[y]??(a[y]={errors:[]}),p=p.properties[y]):(p.items??(p.items=[]),(u=p.items)[y]??(u[y]={errors:[]}),p=p.items[y]),$&&p.errors.push(r(s)),h++}}};return i(e),n}function uu(e){let r=[],n=e.map(i=>typeof i=="object"?i.key:i);for(let i of n)typeof i=="number"?r.push(`[${i}]`):typeof i=="symbol"?r.push(`[${JSON.stringify(String(i))}]`):/[^\w$]/.test(i)?r.push(`[${JSON.stringify(i)}]`):(r.length&&r.push("."),r.push(i));return r.join("")}function rn(e){let r=[],n=[...e.issues].sort((i,t)=>(i.path??[]).length-(t.path??[]).length);for(let i of n)r.push(`\u2716 ${i.message}`),i.path?.length&&r.push(`  \u2192 at ${uu(i.path)}`);return r.join(`
`)}var xe=e=>(r,n,i,t)=>{let o=i?Object.assign(i,{async:!1}):{async:!1},a=r._zod.run({value:n,issues:[]},o);if(a instanceof Promise)throw new K;if(a.issues.length){let u=new(t?.Err??e)(a.issues.map(s=>J(s,o,N())));throw jt(u,t?.callee),u}return a.value},Ot=xe(L),ke=e=>async(r,n,i,t)=>{let o=i?Object.assign(i,{async:!0}):{async:!0},a=r._zod.run({value:n,issues:[]},o);if(a instanceof Promise&&(a=await a),a.issues.length){let u=new(t?.Err??e)(a.issues.map(s=>J(s,o,N())));throw jt(u,t?.callee),u}return a.value},Pt=ke(L),we=e=>(r,n,i)=>{let t=i?{...i,async:!1}:{async:!1},o=r._zod.run({value:n,issues:[]},t);if(o instanceof Promise)throw new K;return o.issues.length?{success:!1,error:new(e??Me)(o.issues.map(a=>J(a,t,N())))}:{success:!0,data:o.value}},nn=we(L),ze=e=>async(r,n,i)=>{let t=i?Object.assign(i,{async:!0}):{async:!0},o=r._zod.run({value:n,issues:[]},t);return o instanceof Promise&&(o=await o),o.issues.length?{success:!1,error:new e(o.issues.map(a=>J(a,t,N())))}:{success:!0,data:o.value}},on=ze(L),Ut=e=>(r,n,i)=>{let t=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return xe(e)(r,n,t)},cl=Ut(L),Nt=e=>(r,n,i)=>xe(e)(r,n,i),sl=Nt(L),Zt=e=>async(r,n,i)=>{let t=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return ke(e)(r,n,t)},ll=Zt(L),Dt=e=>async(r,n,i)=>ke(e)(r,n,i),dl=Dt(L),Tt=e=>(r,n,i)=>{let t=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return we(e)(r,n,t)},ml=Tt(L),Et=e=>(r,n,i)=>we(e)(r,n,i),pl=Et(L),At=e=>async(r,n,i)=>{let t=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return ze(e)(r,n,t)},fl=At(L),Lt=e=>async(r,n,i)=>ze(e)(r,n,i),gl=Lt(L);var B={};de(B,{base64:()=>bn,base64url:()=>Rt,bigint:()=>Sn,boolean:()=>Pn,browserEmail:()=>kl,cidrv4:()=>$n,cidrv6:()=>_n,cuid:()=>an,cuid2:()=>un,date:()=>kn,datetime:()=>zn,domain:()=>zl,duration:()=>mn,e164:()=>xn,email:()=>fn,emoji:()=>gn,extendedDuration:()=>vl,guid:()=>pn,hex:()=>Il,hostname:()=>yn,html5Email:()=>bl,idnEmail:()=>xl,integer:()=>jn,ipv4:()=>vn,ipv6:()=>hn,ksuid:()=>ln,lowercase:()=>Zn,md5_base64:()=>jl,md5_base64url:()=>Ol,md5_hex:()=>Sl,nanoid:()=>dn,null:()=>Un,number:()=>On,rfc5322Email:()=>yl,sha1_base64:()=>Ul,sha1_base64url:()=>Nl,sha1_hex:()=>Pl,sha256_base64:()=>Dl,sha256_base64url:()=>Tl,sha256_hex:()=>Zl,sha384_base64:()=>Al,sha384_base64url:()=>Ll,sha384_hex:()=>El,sha512_base64:()=>Cl,sha512_base64url:()=>Fl,sha512_hex:()=>Rl,string:()=>In,time:()=>wn,ulid:()=>cn,undefined:()=>Nn,unicodeEmail:()=>cu,uppercase:()=>Dn,uuid:()=>fe,uuid4:()=>hl,uuid6:()=>$l,uuid7:()=>_l,xid:()=>sn});var an=/^[cC][^\s-]{8,}$/,un=/^[0-9a-z]+$/,cn=/^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/,sn=/^[0-9a-vA-V]{20}$/,ln=/^[A-Za-z0-9]{27}$/,dn=/^[a-zA-Z0-9_-]{21}$/,mn=/^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/,vl=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,pn=/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/,fe=e=>e?new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${e}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`):/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/,hl=fe(4),$l=fe(6),_l=fe(7),fn=/^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/,bl=/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,yl=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,cu=/^[^\s@"]{1,64}@[^\s@]{1,255}$/u,xl=cu,kl=/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,wl="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";function gn(){return new RegExp(wl,"u")}var vn=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,hn=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$/,$n=/^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/,_n=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,bn=/^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/,Rt=/^[A-Za-z0-9_-]*$/,yn=/^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/,zl=/^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/,xn=/^\+(?:[0-9]){6,14}[0-9]$/,su="(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))",kn=new RegExp(`^${su}$`);function lu(e){let r="(?:[01]\\d|2[0-3]):[0-5]\\d";return typeof e.precision=="number"?e.precision===-1?`${r}`:e.precision===0?`${r}:[0-5]\\d`:`${r}:[0-5]\\d\\.\\d{${e.precision}}`:`${r}(?::[0-5]\\d(?:\\.\\d+)?)?`}function wn(e){return new RegExp(`^${lu(e)}$`)}function zn(e){let r=lu({precision:e.precision}),n=["Z"];e.local&&n.push(""),e.offset&&n.push("([+-](?:[01]\\d|2[0-3]):[0-5]\\d)");let i=`${r}(?:${n.join("|")})`;return new RegExp(`^${su}T(?:${i})$`)}var In=e=>{let r=e?`[\\s\\S]{${e?.minimum??0},${e?.maximum??""}}`:"[\\s\\S]*";return new RegExp(`^${r}$`)},Sn=/^-?\d+n?$/,jn=/^-?\d+$/,On=/^-?\d+(?:\.\d+)?/,Pn=/^(?:true|false)$/i,Un=/^null$/i;var Nn=/^undefined$/i;var Zn=/^[^A-Z]*$/,Dn=/^[^a-z]*$/,Il=/^[0-9a-fA-F]*$/;function We(e,r){return new RegExp(`^[A-Za-z0-9+/]{${e}}${r}$`)}function Ge(e){return new RegExp(`^[A-Za-z0-9_-]{${e}}$`)}var Sl=/^[0-9a-fA-F]{32}$/,jl=We(22,"=="),Ol=Ge(22),Pl=/^[0-9a-fA-F]{40}$/,Ul=We(27,"="),Nl=Ge(27),Zl=/^[0-9a-fA-F]{64}$/,Dl=We(43,"="),Tl=Ge(43),El=/^[0-9a-fA-F]{96}$/,Al=We(64,""),Ll=Ge(64),Rl=/^[0-9a-fA-F]{128}$/,Cl=We(86,"=="),Fl=Ge(86);var U=c("$ZodCheck",(e,r)=>{var n;e._zod??(e._zod={}),e._zod.def=r,(n=e._zod).onattach??(n.onattach=[])}),mu={number:"number",bigint:"bigint",object:"date"},Ct=c("$ZodCheckLessThan",(e,r)=>{U.init(e,r);let n=mu[typeof r.value];e._zod.onattach.push(i=>{let t=i._zod.bag,o=(r.inclusive?t.maximum:t.exclusiveMaximum)??Number.POSITIVE_INFINITY;r.value<o&&(r.inclusive?t.maximum=r.value:t.exclusiveMaximum=r.value)}),e._zod.check=i=>{(r.inclusive?i.value<=r.value:i.value<r.value)||i.issues.push({origin:n,code:"too_big",maximum:r.value,input:i.value,inclusive:r.inclusive,inst:e,continue:!r.abort})}}),Ft=c("$ZodCheckGreaterThan",(e,r)=>{U.init(e,r);let n=mu[typeof r.value];e._zod.onattach.push(i=>{let t=i._zod.bag,o=(r.inclusive?t.minimum:t.exclusiveMinimum)??Number.NEGATIVE_INFINITY;r.value>o&&(r.inclusive?t.minimum=r.value:t.exclusiveMinimum=r.value)}),e._zod.check=i=>{(r.inclusive?i.value>=r.value:i.value>r.value)||i.issues.push({origin:n,code:"too_small",minimum:r.value,input:i.value,inclusive:r.inclusive,inst:e,continue:!r.abort})}}),Tn=c("$ZodCheckMultipleOf",(e,r)=>{U.init(e,r),e._zod.onattach.push(n=>{var i;(i=n._zod.bag).multipleOf??(i.multipleOf=r.value)}),e._zod.check=n=>{if(typeof n.value!=typeof r.value)throw new Error("Cannot mix number and bigint in multiple_of check.");(typeof n.value=="bigint"?n.value%r.value===BigInt(0):Kr(n.value,r.value)===0)||n.issues.push({origin:typeof n.value,code:"not_multiple_of",divisor:r.value,input:n.value,inst:e,continue:!r.abort})}}),En=c("$ZodCheckNumberFormat",(e,r)=>{U.init(e,r),r.format=r.format||"float64";let n=r.format?.includes("int"),i=n?"int":"number",[t,o]=Qr[r.format];e._zod.onattach.push(a=>{let u=a._zod.bag;u.format=r.format,u.minimum=t,u.maximum=o,n&&(u.pattern=jn)}),e._zod.check=a=>{let u=a.value;if(n){if(!Number.isInteger(u)){a.issues.push({expected:i,format:r.format,code:"invalid_type",continue:!1,input:u,inst:e});return}if(!Number.isSafeInteger(u)){u>0?a.issues.push({input:u,code:"too_big",maximum:Number.MAX_SAFE_INTEGER,note:"Integers must be within the safe integer range.",inst:e,origin:i,continue:!r.abort}):a.issues.push({input:u,code:"too_small",minimum:Number.MIN_SAFE_INTEGER,note:"Integers must be within the safe integer range.",inst:e,origin:i,continue:!r.abort});return}}u<t&&a.issues.push({origin:"number",input:u,code:"too_small",minimum:t,inclusive:!0,inst:e,continue:!r.abort}),u>o&&a.issues.push({origin:"number",input:u,code:"too_big",maximum:o,inst:e})}}),An=c("$ZodCheckBigIntFormat",(e,r)=>{U.init(e,r);let[n,i]=en[r.format];e._zod.onattach.push(t=>{let o=t._zod.bag;o.format=r.format,o.minimum=n,o.maximum=i}),e._zod.check=t=>{let o=t.value;o<n&&t.issues.push({origin:"bigint",input:o,code:"too_small",minimum:n,inclusive:!0,inst:e,continue:!r.abort}),o>i&&t.issues.push({origin:"bigint",input:o,code:"too_big",maximum:i,inst:e})}}),Ln=c("$ZodCheckMaxSize",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.size!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag.maximum??Number.POSITIVE_INFINITY;r.maximum<t&&(i._zod.bag.maximum=r.maximum)}),e._zod.check=i=>{let t=i.value;t.size<=r.maximum||i.issues.push({origin:Fe(t),code:"too_big",maximum:r.maximum,inclusive:!0,input:t,inst:e,continue:!r.abort})}}),Rn=c("$ZodCheckMinSize",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.size!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag.minimum??Number.NEGATIVE_INFINITY;r.minimum>t&&(i._zod.bag.minimum=r.minimum)}),e._zod.check=i=>{let t=i.value;t.size>=r.minimum||i.issues.push({origin:Fe(t),code:"too_small",minimum:r.minimum,inclusive:!0,input:t,inst:e,continue:!r.abort})}}),Cn=c("$ZodCheckSizeEquals",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.size!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag;t.minimum=r.size,t.maximum=r.size,t.size=r.size}),e._zod.check=i=>{let t=i.value,o=t.size;if(o===r.size)return;let a=o>r.size;i.issues.push({origin:Fe(t),...a?{code:"too_big",maximum:r.size}:{code:"too_small",minimum:r.size},inclusive:!0,exact:!0,input:i.value,inst:e,continue:!r.abort})}}),Fn=c("$ZodCheckMaxLength",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.length!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag.maximum??Number.POSITIVE_INFINITY;r.maximum<t&&(i._zod.bag.maximum=r.maximum)}),e._zod.check=i=>{let t=i.value;if(t.length<=r.maximum)return;let a=Ve(t);i.issues.push({origin:a,code:"too_big",maximum:r.maximum,inclusive:!0,input:t,inst:e,continue:!r.abort})}}),Vn=c("$ZodCheckMinLength",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.length!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag.minimum??Number.NEGATIVE_INFINITY;r.minimum>t&&(i._zod.bag.minimum=r.minimum)}),e._zod.check=i=>{let t=i.value;if(t.length>=r.minimum)return;let a=Ve(t);i.issues.push({origin:a,code:"too_small",minimum:r.minimum,inclusive:!0,input:t,inst:e,continue:!r.abort})}}),Mn=c("$ZodCheckLengthEquals",(e,r)=>{var n;U.init(e,r),(n=e._zod.def).when??(n.when=i=>{let t=i.value;return!ie(t)&&t.length!==void 0}),e._zod.onattach.push(i=>{let t=i._zod.bag;t.minimum=r.length,t.maximum=r.length,t.length=r.length}),e._zod.check=i=>{let t=i.value,o=t.length;if(o===r.length)return;let a=Ve(t),u=o>r.length;i.issues.push({origin:a,...u?{code:"too_big",maximum:r.length}:{code:"too_small",minimum:r.length},inclusive:!0,exact:!0,input:i.value,inst:e,continue:!r.abort})}}),Ie=c("$ZodCheckStringFormat",(e,r)=>{var n,i;U.init(e,r),e._zod.onattach.push(t=>{let o=t._zod.bag;o.format=r.format,r.pattern&&(o.patterns??(o.patterns=new Set),o.patterns.add(r.pattern))}),r.pattern?(n=e._zod).check??(n.check=t=>{r.pattern.lastIndex=0,!r.pattern.test(t.value)&&t.issues.push({origin:"string",code:"invalid_format",format:r.format,input:t.value,...r.pattern?{pattern:r.pattern.toString()}:{},inst:e,continue:!r.abort})}):(i=e._zod).check??(i.check=()=>{})}),Jn=c("$ZodCheckRegex",(e,r)=>{Ie.init(e,r),e._zod.check=n=>{r.pattern.lastIndex=0,!r.pattern.test(n.value)&&n.issues.push({origin:"string",code:"invalid_format",format:"regex",input:n.value,pattern:r.pattern.toString(),inst:e,continue:!r.abort})}}),Bn=c("$ZodCheckLowerCase",(e,r)=>{r.pattern??(r.pattern=Zn),Ie.init(e,r)}),Wn=c("$ZodCheckUpperCase",(e,r)=>{r.pattern??(r.pattern=Dn),Ie.init(e,r)}),Gn=c("$ZodCheckIncludes",(e,r)=>{U.init(e,r);let n=q(r.includes),i=new RegExp(typeof r.position=="number"?`^.{${r.position}}${n}`:n);r.pattern=i,e._zod.onattach.push(t=>{let o=t._zod.bag;o.patterns??(o.patterns=new Set),o.patterns.add(i)}),e._zod.check=t=>{t.value.includes(r.includes,r.position)||t.issues.push({origin:"string",code:"invalid_format",format:"includes",includes:r.includes,input:t.value,inst:e,continue:!r.abort})}}),Kn=c("$ZodCheckStartsWith",(e,r)=>{U.init(e,r);let n=new RegExp(`^${q(r.prefix)}.*`);r.pattern??(r.pattern=n),e._zod.onattach.push(i=>{let t=i._zod.bag;t.patterns??(t.patterns=new Set),t.patterns.add(n)}),e._zod.check=i=>{i.value.startsWith(r.prefix)||i.issues.push({origin:"string",code:"invalid_format",format:"starts_with",prefix:r.prefix,input:i.value,inst:e,continue:!r.abort})}}),Xn=c("$ZodCheckEndsWith",(e,r)=>{U.init(e,r);let n=new RegExp(`.*${q(r.suffix)}$`);r.pattern??(r.pattern=n),e._zod.onattach.push(i=>{let t=i._zod.bag;t.patterns??(t.patterns=new Set),t.patterns.add(n)}),e._zod.check=i=>{i.value.endsWith(r.suffix)||i.issues.push({origin:"string",code:"invalid_format",format:"ends_with",suffix:r.suffix,input:i.value,inst:e,continue:!r.abort})}});function du(e,r,n){e.issues.length&&r.issues.push(...M(n,e.issues))}var qn=c("$ZodCheckProperty",(e,r)=>{U.init(e,r),e._zod.check=n=>{let i=r.schema._zod.run({value:n.value[r.property],issues:[]},{});if(i instanceof Promise)return i.then(t=>du(t,n,r.property));du(i,n,r.property)}}),Hn=c("$ZodCheckMimeType",(e,r)=>{U.init(e,r);let n=new Set(r.mime);e._zod.onattach.push(i=>{i._zod.bag.mime=r.mime}),e._zod.check=i=>{n.has(i.value.type)||i.issues.push({code:"invalid_value",values:r.mime,input:i.value.type,inst:e,continue:!r.abort})}}),Yn=c("$ZodCheckOverwrite",(e,r)=>{U.init(e,r),e._zod.check=n=>{n.value=r.tx(n.value)}});var Ke=class{constructor(r=[]){this.content=[],this.indent=0,this&&(this.args=r)}indented(r){this.indent+=1,r(this),this.indent-=1}write(r){if(typeof r=="function"){r(this,{execution:"sync"}),r(this,{execution:"async"});return}let i=r.split(`
`).filter(a=>a),t=Math.min(...i.map(a=>a.length-a.trimStart().length)),o=i.map(a=>a.slice(t)).map(a=>" ".repeat(this.indent*2)+a);for(let a of o)this.content.push(a)}compile(){let r=Function,n=this?.args,t=[...(this?.content??[""]).map(o=>`  ${o}`)];return new r(...n,t.join(`
`))}};var Qn={major:4,minor:1,patch:12};var x=c("$ZodType",(e,r)=>{var n;e??(e={}),e._zod.def=r,e._zod.bag=e._zod.bag||{},e._zod.version=Qn;let i=[...e._zod.def.checks??[]];e._zod.traits.has("$ZodCheck")&&i.unshift(e);for(let t of i)for(let o of t._zod.onattach)o(e);if(i.length===0)(n=e._zod).deferred??(n.deferred=[]),e._zod.deferred?.push(()=>{e._zod.run=e._zod.parse});else{let t=(a,u,s)=>{let m=se(a),p;for(let h of u){if(h._zod.def.when){if(!h._zod.def.when(a))continue}else if(m)continue;let y=a.issues.length,$=h._zod.check(a);if($ instanceof Promise&&s?.async===!1)throw new K;if(p||$ instanceof Promise)p=(p??Promise.resolve()).then(async()=>{await $,a.issues.length!==y&&(m||(m=se(a,y)))});else{if(a.issues.length===y)continue;m||(m=se(a,y))}}return p?p.then(()=>a):a},o=(a,u,s)=>{if(se(a))return a.aborted=!0,a;let m=t(u,i,s);if(m instanceof Promise){if(s.async===!1)throw new K;return m.then(p=>e._zod.parse(p,s))}return e._zod.parse(m,s)};e._zod.run=(a,u)=>{if(u.skipChecks)return e._zod.parse(a,u);if(u.direction==="backward"){let m=e._zod.parse({value:a.value,issues:[]},{...u,skipChecks:!0});return m instanceof Promise?m.then(p=>o(p,a,u)):o(m,a,u)}let s=e._zod.parse(a,u);if(s instanceof Promise){if(u.async===!1)throw new K;return s.then(m=>t(m,i,u))}return t(s,i,u)}}e["~standard"]={validate:t=>{try{let o=nn(e,t);return o.success?{value:o.data}:{issues:o.error?.issues}}catch{return on(e,t).then(a=>a.success?{value:a.data}:{issues:a.error?.issues})}},vendor:"zod",version:1}}),ge=c("$ZodString",(e,r)=>{x.init(e,r),e._zod.pattern=[...e?._zod.bag?.patterns??[]].pop()??In(e._zod.bag),e._zod.parse=(n,i)=>{if(r.coerce)try{n.value=String(n.value)}catch{}return typeof n.value=="string"||n.issues.push({expected:"string",code:"invalid_type",input:n.value,inst:e}),n}}),j=c("$ZodStringFormat",(e,r)=>{Ie.init(e,r),ge.init(e,r)}),to=c("$ZodGUID",(e,r)=>{r.pattern??(r.pattern=pn),j.init(e,r)}),ro=c("$ZodUUID",(e,r)=>{if(r.version){let i={v1:1,v2:2,v3:3,v4:4,v5:5,v6:6,v7:7,v8:8}[r.version];if(i===void 0)throw new Error(`Invalid UUID version: "${r.version}"`);r.pattern??(r.pattern=fe(i))}else r.pattern??(r.pattern=fe());j.init(e,r)}),no=c("$ZodEmail",(e,r)=>{r.pattern??(r.pattern=fn),j.init(e,r)}),oo=c("$ZodURL",(e,r)=>{j.init(e,r),e._zod.check=n=>{try{let i=n.value.trim(),t=new URL(i);r.hostname&&(r.hostname.lastIndex=0,r.hostname.test(t.hostname)||n.issues.push({code:"invalid_format",format:"url",note:"Invalid hostname",pattern:yn.source,input:n.value,inst:e,continue:!r.abort})),r.protocol&&(r.protocol.lastIndex=0,r.protocol.test(t.protocol.endsWith(":")?t.protocol.slice(0,-1):t.protocol)||n.issues.push({code:"invalid_format",format:"url",note:"Invalid protocol",pattern:r.protocol.source,input:n.value,inst:e,continue:!r.abort})),r.normalize?n.value=t.href:n.value=i;return}catch{n.issues.push({code:"invalid_format",format:"url",input:n.value,inst:e,continue:!r.abort})}}}),io=c("$ZodEmoji",(e,r)=>{r.pattern??(r.pattern=gn()),j.init(e,r)}),ao=c("$ZodNanoID",(e,r)=>{r.pattern??(r.pattern=dn),j.init(e,r)}),uo=c("$ZodCUID",(e,r)=>{r.pattern??(r.pattern=an),j.init(e,r)}),co=c("$ZodCUID2",(e,r)=>{r.pattern??(r.pattern=un),j.init(e,r)}),so=c("$ZodULID",(e,r)=>{r.pattern??(r.pattern=cn),j.init(e,r)}),lo=c("$ZodXID",(e,r)=>{r.pattern??(r.pattern=sn),j.init(e,r)}),mo=c("$ZodKSUID",(e,r)=>{r.pattern??(r.pattern=ln),j.init(e,r)}),po=c("$ZodISODateTime",(e,r)=>{r.pattern??(r.pattern=zn(r)),j.init(e,r)}),fo=c("$ZodISODate",(e,r)=>{r.pattern??(r.pattern=kn),j.init(e,r)}),go=c("$ZodISOTime",(e,r)=>{r.pattern??(r.pattern=wn(r)),j.init(e,r)}),vo=c("$ZodISODuration",(e,r)=>{r.pattern??(r.pattern=mn),j.init(e,r)}),ho=c("$ZodIPv4",(e,r)=>{r.pattern??(r.pattern=vn),j.init(e,r),e._zod.onattach.push(n=>{let i=n._zod.bag;i.format="ipv4"})}),$o=c("$ZodIPv6",(e,r)=>{r.pattern??(r.pattern=hn),j.init(e,r),e._zod.onattach.push(n=>{let i=n._zod.bag;i.format="ipv6"}),e._zod.check=n=>{try{new URL(`http://[${n.value}]`)}catch{n.issues.push({code:"invalid_format",format:"ipv6",input:n.value,inst:e,continue:!r.abort})}}}),_o=c("$ZodCIDRv4",(e,r)=>{r.pattern??(r.pattern=$n),j.init(e,r)}),bo=c("$ZodCIDRv6",(e,r)=>{r.pattern??(r.pattern=_n),j.init(e,r),e._zod.check=n=>{let i=n.value.split("/");try{if(i.length!==2)throw new Error;let[t,o]=i;if(!o)throw new Error;let a=Number(o);if(`${a}`!==o)throw new Error;if(a<0||a>128)throw new Error;new URL(`http://[${t}]`)}catch{n.issues.push({code:"invalid_format",format:"cidrv6",input:n.value,inst:e,continue:!r.abort})}}});function yo(e){if(e==="")return!0;if(e.length%4!==0)return!1;try{return atob(e),!0}catch{return!1}}var xo=c("$ZodBase64",(e,r)=>{r.pattern??(r.pattern=bn),j.init(e,r),e._zod.onattach.push(n=>{n._zod.bag.contentEncoding="base64"}),e._zod.check=n=>{yo(n.value)||n.issues.push({code:"invalid_format",format:"base64",input:n.value,inst:e,continue:!r.abort})}});function wu(e){if(!Rt.test(e))return!1;let r=e.replace(/[-_]/g,i=>i==="-"?"+":"/"),n=r.padEnd(Math.ceil(r.length/4)*4,"=");return yo(n)}var ko=c("$ZodBase64URL",(e,r)=>{r.pattern??(r.pattern=Rt),j.init(e,r),e._zod.onattach.push(n=>{n._zod.bag.contentEncoding="base64url"}),e._zod.check=n=>{wu(n.value)||n.issues.push({code:"invalid_format",format:"base64url",input:n.value,inst:e,continue:!r.abort})}}),wo=c("$ZodE164",(e,r)=>{r.pattern??(r.pattern=xn),j.init(e,r)});function zu(e,r=null){try{let n=e.split(".");if(n.length!==3)return!1;let[i]=n;if(!i)return!1;let t=JSON.parse(atob(i));return!("typ"in t&&t?.typ!=="JWT"||!t.alg||r&&(!("alg"in t)||t.alg!==r))}catch{return!1}}var zo=c("$ZodJWT",(e,r)=>{j.init(e,r),e._zod.check=n=>{zu(n.value,r.alg)||n.issues.push({code:"invalid_format",format:"jwt",input:n.value,inst:e,continue:!r.abort})}}),Io=c("$ZodCustomStringFormat",(e,r)=>{j.init(e,r),e._zod.check=n=>{r.fn(n.value)||n.issues.push({code:"invalid_format",format:r.format,input:n.value,inst:e,continue:!r.abort})}}),Gt=c("$ZodNumber",(e,r)=>{x.init(e,r),e._zod.pattern=e._zod.bag.pattern??On,e._zod.parse=(n,i)=>{if(r.coerce)try{n.value=Number(n.value)}catch{}let t=n.value;if(typeof t=="number"&&!Number.isNaN(t)&&Number.isFinite(t))return n;let o=typeof t=="number"?Number.isNaN(t)?"NaN":Number.isFinite(t)?void 0:"Infinity":void 0;return n.issues.push({expected:"number",code:"invalid_type",input:t,inst:e,...o?{received:o}:{}}),n}}),So=c("$ZodNumber",(e,r)=>{En.init(e,r),Gt.init(e,r)}),Xe=c("$ZodBoolean",(e,r)=>{x.init(e,r),e._zod.pattern=Pn,e._zod.parse=(n,i)=>{if(r.coerce)try{n.value=!!n.value}catch{}let t=n.value;return typeof t=="boolean"||n.issues.push({expected:"boolean",code:"invalid_type",input:t,inst:e}),n}}),Kt=c("$ZodBigInt",(e,r)=>{x.init(e,r),e._zod.pattern=Sn,e._zod.parse=(n,i)=>{if(r.coerce)try{n.value=BigInt(n.value)}catch{}return typeof n.value=="bigint"||n.issues.push({expected:"bigint",code:"invalid_type",input:n.value,inst:e}),n}}),jo=c("$ZodBigInt",(e,r)=>{An.init(e,r),Kt.init(e,r)}),Oo=c("$ZodSymbol",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;return typeof t=="symbol"||n.issues.push({expected:"symbol",code:"invalid_type",input:t,inst:e}),n}}),Po=c("$ZodUndefined",(e,r)=>{x.init(e,r),e._zod.pattern=Nn,e._zod.values=new Set([void 0]),e._zod.optin="optional",e._zod.optout="optional",e._zod.parse=(n,i)=>{let t=n.value;return typeof t>"u"||n.issues.push({expected:"undefined",code:"invalid_type",input:t,inst:e}),n}}),Uo=c("$ZodNull",(e,r)=>{x.init(e,r),e._zod.pattern=Un,e._zod.values=new Set([null]),e._zod.parse=(n,i)=>{let t=n.value;return t===null||n.issues.push({expected:"null",code:"invalid_type",input:t,inst:e}),n}}),No=c("$ZodAny",(e,r)=>{x.init(e,r),e._zod.parse=n=>n}),Zo=c("$ZodUnknown",(e,r)=>{x.init(e,r),e._zod.parse=n=>n}),Do=c("$ZodNever",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>(n.issues.push({expected:"never",code:"invalid_type",input:n.value,inst:e}),n)}),To=c("$ZodVoid",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;return typeof t>"u"||n.issues.push({expected:"void",code:"invalid_type",input:t,inst:e}),n}}),Eo=c("$ZodDate",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{if(r.coerce)try{n.value=new Date(n.value)}catch{}let t=n.value,o=t instanceof Date;return o&&!Number.isNaN(t.getTime())||n.issues.push({expected:"date",code:"invalid_type",input:t,...o?{received:"Invalid Date"}:{},inst:e}),n}});function fu(e,r,n){e.issues.length&&r.issues.push(...M(n,e.issues)),r.value[n]=e.value}var Ao=c("$ZodArray",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;if(!Array.isArray(t))return n.issues.push({expected:"array",code:"invalid_type",input:t,inst:e}),n;n.value=Array(t.length);let o=[];for(let a=0;a<t.length;a++){let u=t[a],s=r.element._zod.run({value:u,issues:[]},i);s instanceof Promise?o.push(s.then(m=>fu(m,n,a))):fu(s,n,a)}return o.length?Promise.all(o).then(()=>n):n}});function Wt(e,r,n,i){e.issues.length&&r.issues.push(...M(n,e.issues)),e.value===void 0?n in i&&(r.value[n]=void 0):r.value[n]=e.value}function Iu(e){let r=Object.keys(e.shape);for(let i of r)if(!e.shape?.[i]?._zod?.traits?.has("$ZodType"))throw new Error(`Invalid element at key "${i}": expected a Zod schema`);let n=Yr(e.shape);return{...e,keys:r,keySet:new Set(r),numKeys:r.length,optionalKeys:new Set(n)}}function Su(e,r,n,i,t,o){let a=[],u=t.keySet,s=t.catchall._zod,m=s.def.type;for(let p of Object.keys(r)){if(u.has(p))continue;if(m==="never"){a.push(p);continue}let h=s.run({value:r[p],issues:[]},i);h instanceof Promise?e.push(h.then(y=>Wt(y,n,p,r))):Wt(h,n,p,r)}return a.length&&n.issues.push({code:"unrecognized_keys",keys:a,input:r,inst:o}),e.length?Promise.all(e).then(()=>n):n}var ju=c("$ZodObject",(e,r)=>{if(x.init(e,r),!Object.getOwnPropertyDescriptor(r,"shape")?.get){let u=r.shape;Object.defineProperty(r,"shape",{get:()=>{let s={...u};return Object.defineProperty(r,"shape",{value:s}),s}})}let i=be(()=>Iu(r));w(e._zod,"propValues",()=>{let u=r.shape,s={};for(let m in u){let p=u[m]._zod;if(p.values){s[m]??(s[m]=new Set);for(let h of p.values)s[m].add(h)}}return s});let t=pe,o=r.catchall,a;e._zod.parse=(u,s)=>{a??(a=i.value);let m=u.value;if(!t(m))return u.issues.push({expected:"object",code:"invalid_type",input:m,inst:e}),u;u.value={};let p=[],h=a.shape;for(let y of a.keys){let d=h[y]._zod.run({value:m[y],issues:[]},s);d instanceof Promise?p.push(d.then(_=>Wt(_,u,y,m))):Wt(d,u,y,m)}return o?Su(p,m,u,s,i.value,e):p.length?Promise.all(p).then(()=>u):u}}),Lo=c("$ZodObjectJIT",(e,r)=>{ju.init(e,r);let n=e._zod.parse,i=be(()=>Iu(r)),t=y=>{let $=new Ke(["shape","payload","ctx"]),d=i.value,_=S=>{let P=St(S);return`shape[${P}]._zod.run({ value: input[${P}], issues: [] }, ctx)`};$.write("const input = payload.value;");let b=Object.create(null),I=0;for(let S of d.keys)b[S]=`key_${I++}`;$.write("const newResult = {};");for(let S of d.keys){let P=b[S],Y=St(S);$.write(`const ${P} = ${_(S)};`),$.write(`
        if (${P}.issues.length) {
          payload.issues = payload.issues.concat(${P}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${Y}, ...iss.path] : [${Y}]
          })));
        }
        
        
        if (${P}.value === undefined) {
          if (${Y} in input) {
            newResult[${Y}] = undefined;
          }
        } else {
          newResult[${Y}] = ${P}.value;
        }
        
      `)}$.write("payload.value = newResult;"),$.write("return payload;");let z=$.compile();return(S,P)=>z(y,S,P)},o,a=pe,u=!Ee.jitless,m=u&&Xr.value,p=r.catchall,h;e._zod.parse=(y,$)=>{h??(h=i.value);let d=y.value;return a(d)?u&&m&&$?.async===!1&&$.jitless!==!0?(o||(o=t(r.shape)),y=o(y,$),p?Su([],d,y,$,h,e):y):n(y,$):(y.issues.push({expected:"object",code:"invalid_type",input:d,inst:e}),y)}});function gu(e,r,n,i){for(let o of e)if(o.issues.length===0)return r.value=o.value,r;let t=e.filter(o=>!se(o));return t.length===1?(r.value=t[0].value,t[0]):(r.issues.push({code:"invalid_union",input:r.value,inst:n,errors:e.map(o=>o.issues.map(a=>J(a,i,N())))}),r)}var Xt=c("$ZodUnion",(e,r)=>{x.init(e,r),w(e._zod,"optin",()=>r.options.some(t=>t._zod.optin==="optional")?"optional":void 0),w(e._zod,"optout",()=>r.options.some(t=>t._zod.optout==="optional")?"optional":void 0),w(e._zod,"values",()=>{if(r.options.every(t=>t._zod.values))return new Set(r.options.flatMap(t=>Array.from(t._zod.values)))}),w(e._zod,"pattern",()=>{if(r.options.every(t=>t._zod.pattern)){let t=r.options.map(o=>o._zod.pattern);return new RegExp(`^(${t.map(o=>Re(o.source)).join("|")})$`)}});let n=r.options.length===1,i=r.options[0]._zod.run;e._zod.parse=(t,o)=>{if(n)return i(t,o);let a=!1,u=[];for(let s of r.options){let m=s._zod.run({value:t.value,issues:[]},o);if(m instanceof Promise)u.push(m),a=!0;else{if(m.issues.length===0)return m;u.push(m)}}return a?Promise.all(u).then(s=>gu(s,t,e,o)):gu(u,t,e,o)}}),Ro=c("$ZodDiscriminatedUnion",(e,r)=>{Xt.init(e,r);let n=e._zod.parse;w(e._zod,"propValues",()=>{let t={};for(let o of r.options){let a=o._zod.propValues;if(!a||Object.keys(a).length===0)throw new Error(`Invalid discriminated union option at index "${r.options.indexOf(o)}"`);for(let[u,s]of Object.entries(a)){t[u]||(t[u]=new Set);for(let m of s)t[u].add(m)}}return t});let i=be(()=>{let t=r.options,o=new Map;for(let a of t){let u=a._zod.propValues?.[r.discriminator];if(!u||u.size===0)throw new Error(`Invalid discriminated union option at index "${r.options.indexOf(a)}"`);for(let s of u){if(o.has(s))throw new Error(`Duplicate discriminator value "${String(s)}"`);o.set(s,a)}}return o});e._zod.parse=(t,o)=>{let a=t.value;if(!pe(a))return t.issues.push({code:"invalid_type",expected:"object",input:a,inst:e}),t;let u=i.value.get(a?.[r.discriminator]);return u?u._zod.run(t,o):r.unionFallback?n(t,o):(t.issues.push({code:"invalid_union",errors:[],note:"No matching discriminator",discriminator:r.discriminator,input:a,path:[r.discriminator],inst:e}),t)}}),Co=c("$ZodIntersection",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value,o=r.left._zod.run({value:t,issues:[]},i),a=r.right._zod.run({value:t,issues:[]},i);return o instanceof Promise||a instanceof Promise?Promise.all([o,a]).then(([s,m])=>vu(n,s,m)):vu(n,o,a)}});function eo(e,r){if(e===r)return{valid:!0,data:e};if(e instanceof Date&&r instanceof Date&&+e==+r)return{valid:!0,data:e};if(ce(e)&&ce(r)){let n=Object.keys(r),i=Object.keys(e).filter(o=>n.indexOf(o)!==-1),t={...e,...r};for(let o of i){let a=eo(e[o],r[o]);if(!a.valid)return{valid:!1,mergeErrorPath:[o,...a.mergeErrorPath]};t[o]=a.data}return{valid:!0,data:t}}if(Array.isArray(e)&&Array.isArray(r)){if(e.length!==r.length)return{valid:!1,mergeErrorPath:[]};let n=[];for(let i=0;i<e.length;i++){let t=e[i],o=r[i],a=eo(t,o);if(!a.valid)return{valid:!1,mergeErrorPath:[i,...a.mergeErrorPath]};n.push(a.data)}return{valid:!0,data:n}}return{valid:!1,mergeErrorPath:[]}}function vu(e,r,n){if(r.issues.length&&e.issues.push(...r.issues),n.issues.length&&e.issues.push(...n.issues),se(e))return e;let i=eo(r.value,n.value);if(!i.valid)throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(i.mergeErrorPath)}`);return e.value=i.data,e}var qt=c("$ZodTuple",(e,r)=>{x.init(e,r);let n=r.items,i=n.length-[...n].reverse().findIndex(t=>t._zod.optin!=="optional");e._zod.parse=(t,o)=>{let a=t.value;if(!Array.isArray(a))return t.issues.push({input:a,inst:e,expected:"tuple",code:"invalid_type"}),t;t.value=[];let u=[];if(!r.rest){let m=a.length>n.length,p=a.length<i-1;if(m||p)return t.issues.push({...m?{code:"too_big",maximum:n.length}:{code:"too_small",minimum:n.length},input:a,inst:e,origin:"array"}),t}let s=-1;for(let m of n){if(s++,s>=a.length&&s>=i)continue;let p=m._zod.run({value:a[s],issues:[]},o);p instanceof Promise?u.push(p.then(h=>Vt(h,t,s))):Vt(p,t,s)}if(r.rest){let m=a.slice(n.length);for(let p of m){s++;let h=r.rest._zod.run({value:p,issues:[]},o);h instanceof Promise?u.push(h.then(y=>Vt(y,t,s))):Vt(h,t,s)}}return u.length?Promise.all(u).then(()=>t):t}});function Vt(e,r,n){e.issues.length&&r.issues.push(...M(n,e.issues)),r.value[n]=e.value}var Fo=c("$ZodRecord",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;if(!ce(t))return n.issues.push({expected:"record",code:"invalid_type",input:t,inst:e}),n;let o=[];if(r.keyType._zod.values){let a=r.keyType._zod.values;n.value={};for(let s of a)if(typeof s=="string"||typeof s=="number"||typeof s=="symbol"){let m=r.valueType._zod.run({value:t[s],issues:[]},i);m instanceof Promise?o.push(m.then(p=>{p.issues.length&&n.issues.push(...M(s,p.issues)),n.value[s]=p.value})):(m.issues.length&&n.issues.push(...M(s,m.issues)),n.value[s]=m.value)}let u;for(let s in t)a.has(s)||(u=u??[],u.push(s));u&&u.length>0&&n.issues.push({code:"unrecognized_keys",input:t,inst:e,keys:u})}else{n.value={};for(let a of Reflect.ownKeys(t)){if(a==="__proto__")continue;let u=r.keyType._zod.run({value:a,issues:[]},i);if(u instanceof Promise)throw new Error("Async schemas not supported in object keys currently");if(u.issues.length){n.issues.push({code:"invalid_key",origin:"record",issues:u.issues.map(m=>J(m,i,N())),input:a,path:[a],inst:e}),n.value[u.value]=u.value;continue}let s=r.valueType._zod.run({value:t[a],issues:[]},i);s instanceof Promise?o.push(s.then(m=>{m.issues.length&&n.issues.push(...M(a,m.issues)),n.value[u.value]=m.value})):(s.issues.length&&n.issues.push(...M(a,s.issues)),n.value[u.value]=s.value)}}return o.length?Promise.all(o).then(()=>n):n}}),Vo=c("$ZodMap",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;if(!(t instanceof Map))return n.issues.push({expected:"map",code:"invalid_type",input:t,inst:e}),n;let o=[];n.value=new Map;for(let[a,u]of t){let s=r.keyType._zod.run({value:a,issues:[]},i),m=r.valueType._zod.run({value:u,issues:[]},i);s instanceof Promise||m instanceof Promise?o.push(Promise.all([s,m]).then(([p,h])=>{hu(p,h,n,a,t,e,i)})):hu(s,m,n,a,t,e,i)}return o.length?Promise.all(o).then(()=>n):n}});function hu(e,r,n,i,t,o,a){e.issues.length&&(Ce.has(typeof i)?n.issues.push(...M(i,e.issues)):n.issues.push({code:"invalid_key",origin:"map",input:t,inst:o,issues:e.issues.map(u=>J(u,a,N()))})),r.issues.length&&(Ce.has(typeof i)?n.issues.push(...M(i,r.issues)):n.issues.push({origin:"map",code:"invalid_element",input:t,inst:o,key:i,issues:r.issues.map(u=>J(u,a,N()))})),n.value.set(e.value,r.value)}var Mo=c("$ZodSet",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;if(!(t instanceof Set))return n.issues.push({input:t,inst:e,expected:"set",code:"invalid_type"}),n;let o=[];n.value=new Set;for(let a of t){let u=r.valueType._zod.run({value:a,issues:[]},i);u instanceof Promise?o.push(u.then(s=>$u(s,n))):$u(u,n)}return o.length?Promise.all(o).then(()=>n):n}});function $u(e,r){e.issues.length&&r.issues.push(...e.issues),r.value.add(e.value)}var Jo=c("$ZodEnum",(e,r)=>{x.init(e,r);let n=Le(r.entries),i=new Set(n);e._zod.values=i,e._zod.pattern=new RegExp(`^(${n.filter(t=>Ce.has(typeof t)).map(t=>typeof t=="string"?q(t):t.toString()).join("|")})$`),e._zod.parse=(t,o)=>{let a=t.value;return i.has(a)||t.issues.push({code:"invalid_value",values:n,input:a,inst:e}),t}}),Bo=c("$ZodLiteral",(e,r)=>{if(x.init(e,r),r.values.length===0)throw new Error("Cannot create literal schema with no valid values");e._zod.values=new Set(r.values),e._zod.pattern=new RegExp(`^(${r.values.map(n=>typeof n=="string"?q(n):n?q(n.toString()):String(n)).join("|")})$`),e._zod.parse=(n,i)=>{let t=n.value;return e._zod.values.has(t)||n.issues.push({code:"invalid_value",values:r.values,input:t,inst:e}),n}}),Wo=c("$ZodFile",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{let t=n.value;return t instanceof File||n.issues.push({expected:"file",code:"invalid_type",input:t,inst:e}),n}}),Go=c("$ZodTransform",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{if(i.direction==="backward")throw new oe(e.constructor.name);let t=r.transform(n.value,n);if(i.async)return(t instanceof Promise?t:Promise.resolve(t)).then(a=>(n.value=a,n));if(t instanceof Promise)throw new K;return n.value=t,n}});function _u(e,r){return e.issues.length&&r===void 0?{issues:[],value:void 0}:e}var Ko=c("$ZodOptional",(e,r)=>{x.init(e,r),e._zod.optin="optional",e._zod.optout="optional",w(e._zod,"values",()=>r.innerType._zod.values?new Set([...r.innerType._zod.values,void 0]):void 0),w(e._zod,"pattern",()=>{let n=r.innerType._zod.pattern;return n?new RegExp(`^(${Re(n.source)})?$`):void 0}),e._zod.parse=(n,i)=>{if(r.innerType._zod.optin==="optional"){let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(o=>_u(o,n.value)):_u(t,n.value)}return n.value===void 0?n:r.innerType._zod.run(n,i)}}),Xo=c("$ZodNullable",(e,r)=>{x.init(e,r),w(e._zod,"optin",()=>r.innerType._zod.optin),w(e._zod,"optout",()=>r.innerType._zod.optout),w(e._zod,"pattern",()=>{let n=r.innerType._zod.pattern;return n?new RegExp(`^(${Re(n.source)}|null)$`):void 0}),w(e._zod,"values",()=>r.innerType._zod.values?new Set([...r.innerType._zod.values,null]):void 0),e._zod.parse=(n,i)=>n.value===null?n:r.innerType._zod.run(n,i)}),qo=c("$ZodDefault",(e,r)=>{x.init(e,r),e._zod.optin="optional",w(e._zod,"values",()=>r.innerType._zod.values),e._zod.parse=(n,i)=>{if(i.direction==="backward")return r.innerType._zod.run(n,i);if(n.value===void 0)return n.value=r.defaultValue,n;let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(o=>bu(o,r)):bu(t,r)}});function bu(e,r){return e.value===void 0&&(e.value=r.defaultValue),e}var Ho=c("$ZodPrefault",(e,r)=>{x.init(e,r),e._zod.optin="optional",w(e._zod,"values",()=>r.innerType._zod.values),e._zod.parse=(n,i)=>(i.direction==="backward"||n.value===void 0&&(n.value=r.defaultValue),r.innerType._zod.run(n,i))}),Yo=c("$ZodNonOptional",(e,r)=>{x.init(e,r),w(e._zod,"values",()=>{let n=r.innerType._zod.values;return n?new Set([...n].filter(i=>i!==void 0)):void 0}),e._zod.parse=(n,i)=>{let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(o=>yu(o,e)):yu(t,e)}});function yu(e,r){return!e.issues.length&&e.value===void 0&&e.issues.push({code:"invalid_type",expected:"nonoptional",input:e.value,inst:r}),e}var Qo=c("$ZodSuccess",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>{if(i.direction==="backward")throw new oe("ZodSuccess");let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(o=>(n.value=o.issues.length===0,n)):(n.value=t.issues.length===0,n)}}),ei=c("$ZodCatch",(e,r)=>{x.init(e,r),w(e._zod,"optin",()=>r.innerType._zod.optin),w(e._zod,"optout",()=>r.innerType._zod.optout),w(e._zod,"values",()=>r.innerType._zod.values),e._zod.parse=(n,i)=>{if(i.direction==="backward")return r.innerType._zod.run(n,i);let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(o=>(n.value=o.value,o.issues.length&&(n.value=r.catchValue({...n,error:{issues:o.issues.map(a=>J(a,i,N()))},input:n.value}),n.issues=[]),n)):(n.value=t.value,t.issues.length&&(n.value=r.catchValue({...n,error:{issues:t.issues.map(o=>J(o,i,N()))},input:n.value}),n.issues=[]),n)}}),ti=c("$ZodNaN",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>((typeof n.value!="number"||!Number.isNaN(n.value))&&n.issues.push({input:n.value,inst:e,expected:"nan",code:"invalid_type"}),n)}),ri=c("$ZodPipe",(e,r)=>{x.init(e,r),w(e._zod,"values",()=>r.in._zod.values),w(e._zod,"optin",()=>r.in._zod.optin),w(e._zod,"optout",()=>r.out._zod.optout),w(e._zod,"propValues",()=>r.in._zod.propValues),e._zod.parse=(n,i)=>{if(i.direction==="backward"){let o=r.out._zod.run(n,i);return o instanceof Promise?o.then(a=>Mt(a,r.in,i)):Mt(o,r.in,i)}let t=r.in._zod.run(n,i);return t instanceof Promise?t.then(o=>Mt(o,r.out,i)):Mt(t,r.out,i)}});function Mt(e,r,n){return e.issues.length?(e.aborted=!0,e):r._zod.run({value:e.value,issues:e.issues},n)}var qe=c("$ZodCodec",(e,r)=>{x.init(e,r),w(e._zod,"values",()=>r.in._zod.values),w(e._zod,"optin",()=>r.in._zod.optin),w(e._zod,"optout",()=>r.out._zod.optout),w(e._zod,"propValues",()=>r.in._zod.propValues),e._zod.parse=(n,i)=>{if((i.direction||"forward")==="forward"){let o=r.in._zod.run(n,i);return o instanceof Promise?o.then(a=>Jt(a,r,i)):Jt(o,r,i)}else{let o=r.out._zod.run(n,i);return o instanceof Promise?o.then(a=>Jt(a,r,i)):Jt(o,r,i)}}});function Jt(e,r,n){if(e.issues.length)return e.aborted=!0,e;if((n.direction||"forward")==="forward"){let t=r.transform(e.value,e);return t instanceof Promise?t.then(o=>Bt(e,o,r.out,n)):Bt(e,t,r.out,n)}else{let t=r.reverseTransform(e.value,e);return t instanceof Promise?t.then(o=>Bt(e,o,r.in,n)):Bt(e,t,r.in,n)}}function Bt(e,r,n,i){return e.issues.length?(e.aborted=!0,e):n._zod.run({value:r,issues:e.issues},i)}var ni=c("$ZodReadonly",(e,r)=>{x.init(e,r),w(e._zod,"propValues",()=>r.innerType._zod.propValues),w(e._zod,"values",()=>r.innerType._zod.values),w(e._zod,"optin",()=>r.innerType._zod.optin),w(e._zod,"optout",()=>r.innerType._zod.optout),e._zod.parse=(n,i)=>{if(i.direction==="backward")return r.innerType._zod.run(n,i);let t=r.innerType._zod.run(n,i);return t instanceof Promise?t.then(xu):xu(t)}});function xu(e){return e.value=Object.freeze(e.value),e}var oi=c("$ZodTemplateLiteral",(e,r)=>{x.init(e,r);let n=[];for(let i of r.parts)if(typeof i=="object"&&i!==null){if(!i._zod.pattern)throw new Error(`Invalid template literal part, no pattern found: ${[...i._zod.traits].shift()}`);let t=i._zod.pattern instanceof RegExp?i._zod.pattern.source:i._zod.pattern;if(!t)throw new Error(`Invalid template literal part: ${i._zod.traits}`);let o=t.startsWith("^")?1:0,a=t.endsWith("$")?t.length-1:t.length;n.push(t.slice(o,a))}else if(i===null||Hr.has(typeof i))n.push(q(`${i}`));else throw new Error(`Invalid template literal part: ${i}`);e._zod.pattern=new RegExp(`^${n.join("")}$`),e._zod.parse=(i,t)=>typeof i.value!="string"?(i.issues.push({input:i.value,inst:e,expected:"template_literal",code:"invalid_type"}),i):(e._zod.pattern.lastIndex=0,e._zod.pattern.test(i.value)||i.issues.push({input:i.value,inst:e,code:"invalid_format",format:r.format??"template_literal",pattern:e._zod.pattern.source}),i)}),ii=c("$ZodFunction",(e,r)=>(x.init(e,r),e._def=r,e._zod.def=r,e.implement=n=>{if(typeof n!="function")throw new Error("implement() must be called with a function");return function(...i){let t=e._def.input?Ot(e._def.input,i):i,o=Reflect.apply(n,this,t);return e._def.output?Ot(e._def.output,o):o}},e.implementAsync=n=>{if(typeof n!="function")throw new Error("implementAsync() must be called with a function");return async function(...i){let t=e._def.input?await Pt(e._def.input,i):i,o=await Reflect.apply(n,this,t);return e._def.output?await Pt(e._def.output,o):o}},e._zod.parse=(n,i)=>typeof n.value!="function"?(n.issues.push({code:"invalid_type",expected:"function",input:n.value,inst:e}),n):(e._def.output&&e._def.output._zod.def.type==="promise"?n.value=e.implementAsync(n.value):n.value=e.implement(n.value),n),e.input=(...n)=>{let i=e.constructor;return Array.isArray(n[0])?new i({type:"function",input:new qt({type:"tuple",items:n[0],rest:n[1]}),output:e._def.output}):new i({type:"function",input:n[0],output:e._def.output})},e.output=n=>{let i=e.constructor;return new i({type:"function",input:e._def.input,output:n})},e)),ai=c("$ZodPromise",(e,r)=>{x.init(e,r),e._zod.parse=(n,i)=>Promise.resolve(n.value).then(t=>r.innerType._zod.run({value:t,issues:[]},i))}),ui=c("$ZodLazy",(e,r)=>{x.init(e,r),w(e._zod,"innerType",()=>r.getter()),w(e._zod,"pattern",()=>e._zod.innerType._zod.pattern),w(e._zod,"propValues",()=>e._zod.innerType._zod.propValues),w(e._zod,"optin",()=>e._zod.innerType._zod.optin??void 0),w(e._zod,"optout",()=>e._zod.innerType._zod.optout??void 0),e._zod.parse=(n,i)=>e._zod.innerType._zod.run(n,i)}),ci=c("$ZodCustom",(e,r)=>{U.init(e,r),x.init(e,r),e._zod.parse=(n,i)=>n,e._zod.check=n=>{let i=n.value,t=r.fn(i);if(t instanceof Promise)return t.then(o=>ku(o,n,i,e));ku(t,n,i,e)}});function ku(e,r,n,i){if(!e){let t={code:"custom",input:n,inst:i,path:[...i._zod.def.path??[]],continue:!i._zod.def.abort};i._zod.def.params&&(t.params=i._zod.def.params),r.issues.push(ye(t))}}var Qe={};de(Qe,{ar:()=>Ou,az:()=>Pu,be:()=>Nu,bg:()=>Zu,ca:()=>Du,cs:()=>Tu,da:()=>Eu,de:()=>Au,en:()=>Ht,eo:()=>Lu,es:()=>Ru,fa:()=>Cu,fi:()=>Fu,fr:()=>Vu,frCA:()=>Mu,he:()=>Ju,hu:()=>Bu,id:()=>Wu,is:()=>Gu,it:()=>Ku,ja:()=>Xu,ka:()=>qu,kh:()=>Hu,km:()=>Yt,ko:()=>Yu,lt:()=>ec,mk:()=>tc,ms:()=>rc,nl:()=>nc,no:()=>oc,ota:()=>ic,pl:()=>uc,ps:()=>ac,pt:()=>cc,ru:()=>lc,sl:()=>dc,sv:()=>mc,ta:()=>pc,th:()=>fc,tr:()=>gc,ua:()=>vc,uk:()=>Qt,ur:()=>hc,vi:()=>$c,yo:()=>yc,zhCN:()=>_c,zhTW:()=>bc});var Ml=()=>{let e={string:{unit:"\u062D\u0631\u0641",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},file:{unit:"\u0628\u0627\u064A\u062A",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},array:{unit:"\u0639\u0646\u0635\u0631",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},set:{unit:"\u0639\u0646\u0635\u0631",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0645\u062F\u062E\u0644",email:"\u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A",url:"\u0631\u0627\u0628\u0637",emoji:"\u0625\u064A\u0645\u0648\u062C\u064A",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u062A\u0627\u0631\u064A\u062E \u0648\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",date:"\u062A\u0627\u0631\u064A\u062E \u0628\u0645\u0639\u064A\u0627\u0631 ISO",time:"\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",duration:"\u0645\u062F\u0629 \u0628\u0645\u0639\u064A\u0627\u0631 ISO",ipv4:"\u0639\u0646\u0648\u0627\u0646 IPv4",ipv6:"\u0639\u0646\u0648\u0627\u0646 IPv6",cidrv4:"\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv4",cidrv6:"\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv6",base64:"\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64-encoded",base64url:"\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64url-encoded",json_string:"\u0646\u064E\u0635 \u0639\u0644\u0649 \u0647\u064A\u0626\u0629 JSON",e164:"\u0631\u0642\u0645 \u0647\u0627\u062A\u0641 \u0628\u0645\u0639\u064A\u0627\u0631 E.164",jwt:"JWT",template_literal:"\u0645\u062F\u062E\u0644"};return t=>{switch(t.code){case"invalid_type":return`\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${t.expected}\u060C \u0648\u0644\u0643\u0646 \u062A\u0645 \u0625\u062F\u062E\u0627\u0644 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${f(t.values[0])}`:`\u0627\u062E\u062A\u064A\u0627\u0631 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062A\u0648\u0642\u0639 \u0627\u0646\u062A\u0642\u0627\u0621 \u0623\u062D\u062F \u0647\u0630\u0647 \u0627\u0644\u062E\u064A\u0627\u0631\u0627\u062A: ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?` \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${t.origin??"\u0627\u0644\u0642\u064A\u0645\u0629"} ${o} ${t.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631"}`:`\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${t.origin??"\u0627\u0644\u0642\u064A\u0645\u0629"} ${o} ${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${t.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${o} ${t.minimum.toString()} ${a.unit}`:`\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${t.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${o} ${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0628\u062F\u0623 \u0628\u0640 "${t.prefix}"`:o.format==="ends_with"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0646\u062A\u0647\u064A \u0628\u0640 "${o.suffix}"`:o.format==="includes"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u062A\u0636\u0645\u0651\u064E\u0646 "${o.includes}"`:o.format==="regex"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0637\u0627\u0628\u0642 \u0627\u0644\u0646\u0645\u0637 ${o.pattern}`:`${i[o.format]??t.format} \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644`}case"not_multiple_of":return`\u0631\u0642\u0645 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0645\u0646 \u0645\u0636\u0627\u0639\u0641\u0627\u062A ${t.divisor}`;case"unrecognized_keys":return`\u0645\u0639\u0631\u0641${t.keys.length>1?"\u0627\u062A":""} \u063A\u0631\u064A\u0628${t.keys.length>1?"\u0629":""}: ${l(t.keys,"\u060C ")}`;case"invalid_key":return`\u0645\u0639\u0631\u0641 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${t.origin}`;case"invalid_union":return"\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";case"invalid_element":return`\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${t.origin}`;default:return"\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644"}}};function Ou(){return{localeError:Ml()}}var Jl=()=>{let e={string:{unit:"simvol",verb:"olmal\u0131d\u0131r"},file:{unit:"bayt",verb:"olmal\u0131d\u0131r"},array:{unit:"element",verb:"olmal\u0131d\u0131r"},set:{unit:"element",verb:"olmal\u0131d\u0131r"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"input",email:"email address",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datetime",date:"ISO date",time:"ISO time",duration:"ISO duration",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded string",base64url:"base64url-encoded string",json_string:"JSON string",e164:"E.164 number",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${t.expected}, daxil olan ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${f(t.values[0])}`:`Yanl\u0131\u015F se\xE7im: a\u015Fa\u011F\u0131dak\u0131lardan biri olmal\u0131d\u0131r: ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${t.origin??"d\u0259y\u0259r"} ${o}${t.maximum.toString()} ${a.unit??"element"}`:`\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${t.origin??"d\u0259y\u0259r"} ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${t.origin} ${o}${t.minimum.toString()} ${a.unit}`:`\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${t.origin} ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Yanl\u0131\u015F m\u0259tn: "${o.prefix}" il\u0259 ba\u015Flamal\u0131d\u0131r`:o.format==="ends_with"?`Yanl\u0131\u015F m\u0259tn: "${o.suffix}" il\u0259 bitm\u0259lidir`:o.format==="includes"?`Yanl\u0131\u015F m\u0259tn: "${o.includes}" daxil olmal\u0131d\u0131r`:o.format==="regex"?`Yanl\u0131\u015F m\u0259tn: ${o.pattern} \u015Fablonuna uy\u011Fun olmal\u0131d\u0131r`:`Yanl\u0131\u015F ${i[o.format]??t.format}`}case"not_multiple_of":return`Yanl\u0131\u015F \u0259d\u0259d: ${t.divisor} il\u0259 b\xF6l\xFCn\u0259 bil\u0259n olmal\u0131d\u0131r`;case"unrecognized_keys":return`Tan\u0131nmayan a\xE7ar${t.keys.length>1?"lar":""}: ${l(t.keys,", ")}`;case"invalid_key":return`${t.origin} daxilind\u0259 yanl\u0131\u015F a\xE7ar`;case"invalid_union":return"Yanl\u0131\u015F d\u0259y\u0259r";case"invalid_element":return`${t.origin} daxilind\u0259 yanl\u0131\u015F d\u0259y\u0259r`;default:return"Yanl\u0131\u015F d\u0259y\u0259r"}}};function Pu(){return{localeError:Jl()}}function Uu(e,r,n,i){let t=Math.abs(e),o=t%10,a=t%100;return a>=11&&a<=19?i:o===1?r:o>=2&&o<=4?n:i}var Bl=()=>{let e={string:{unit:{one:"\u0441\u0456\u043C\u0432\u0430\u043B",few:"\u0441\u0456\u043C\u0432\u0430\u043B\u044B",many:"\u0441\u0456\u043C\u0432\u0430\u043B\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},array:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},set:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},file:{unit:{one:"\u0431\u0430\u0439\u0442",few:"\u0431\u0430\u0439\u0442\u044B",many:"\u0431\u0430\u0439\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u043B\u0456\u043A";case"object":{if(Array.isArray(t))return"\u043C\u0430\u0441\u0456\u045E";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0443\u0432\u043E\u0434",email:"email \u0430\u0434\u0440\u0430\u0441",url:"URL",emoji:"\u044D\u043C\u043E\u0434\u0437\u0456",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0430 \u0456 \u0447\u0430\u0441",date:"ISO \u0434\u0430\u0442\u0430",time:"ISO \u0447\u0430\u0441",duration:"ISO \u043F\u0440\u0430\u0446\u044F\u0433\u043B\u0430\u0441\u0446\u044C",ipv4:"IPv4 \u0430\u0434\u0440\u0430\u0441",ipv6:"IPv6 \u0430\u0434\u0440\u0430\u0441",cidrv4:"IPv4 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",cidrv6:"IPv6 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",base64:"\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64",base64url:"\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64url",json_string:"JSON \u0440\u0430\u0434\u043E\u043A",e164:"\u043D\u0443\u043C\u0430\u0440 E.164",jwt:"JWT",template_literal:"\u0443\u0432\u043E\u0434"};return t=>{switch(t.code){case"invalid_type":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u045E\u0441\u044F ${t.expected}, \u0430\u0442\u0440\u044B\u043C\u0430\u043D\u0430 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F ${f(t.values[0])}`:`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0432\u0430\u0440\u044B\u044F\u043D\u0442: \u0447\u0430\u043A\u0430\u045E\u0441\u044F \u0430\u0434\u0437\u0456\u043D \u0437 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);if(a){let u=Number(t.maximum),s=Uu(u,a.unit.one,a.unit.few,a.unit.many);return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${a.verb} ${o}${t.maximum.toString()} ${s}`}return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);if(a){let u=Number(t.minimum),s=Uu(u,a.unit.one,a.unit.few,a.unit.many);return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${t.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${a.verb} ${o}${t.minimum.toString()} ${s}`}return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${t.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u043F\u0430\u0447\u044B\u043D\u0430\u0446\u0446\u0430 \u0437 "${o.prefix}"`:o.format==="ends_with"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0446\u0446\u0430 \u043D\u0430 "${o.suffix}"`:o.format==="includes"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u043C\u044F\u0448\u0447\u0430\u0446\u044C "${o.includes}"`:o.format==="regex"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0430\u0434\u043F\u0430\u0432\u044F\u0434\u0430\u0446\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${o.pattern}`:`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B ${i[o.format]??t.format}`}case"not_multiple_of":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043B\u0456\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0431\u044B\u0446\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${t.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u0430\u0441\u043F\u0430\u0437\u043D\u0430\u043D\u044B ${t.keys.length>1?"\u043A\u043B\u044E\u0447\u044B":"\u043A\u043B\u044E\u0447"}: ${l(t.keys,", ")}`;case"invalid_key":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043A\u043B\u044E\u0447 \u0443 ${t.origin}`;case"invalid_union":return"\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434";case"invalid_element":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u0430\u0435 \u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u045E ${t.origin}`;default:return"\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434"}}};function Nu(){return{localeError:Bl()}}var Wl=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"\u0447\u0438\u0441\u043B\u043E";case"object":{if(Array.isArray(e))return"\u043C\u0430\u0441\u0438\u0432";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return r},Gl=()=>{let e={string:{unit:"\u0441\u0438\u043C\u0432\u043E\u043B\u0430",verb:"\u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430"},file:{unit:"\u0431\u0430\u0439\u0442\u0430",verb:"\u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430"},array:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0430",verb:"\u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430"},set:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0430",verb:"\u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430"}};function r(i){return e[i]??null}let n={regex:"\u0432\u0445\u043E\u0434",email:"\u0438\u043C\u0435\u0439\u043B \u0430\u0434\u0440\u0435\u0441",url:"URL",emoji:"\u0435\u043C\u043E\u0434\u0436\u0438",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0432\u0440\u0435\u043C\u0435",date:"ISO \u0434\u0430\u0442\u0430",time:"ISO \u0432\u0440\u0435\u043C\u0435",duration:"ISO \u043F\u0440\u043E\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E\u0441\u0442",ipv4:"IPv4 \u0430\u0434\u0440\u0435\u0441",ipv6:"IPv6 \u0430\u0434\u0440\u0435\u0441",cidrv4:"IPv4 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",cidrv6:"IPv6 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",base64:"base64-\u043A\u043E\u0434\u0438\u0440\u0430\u043D \u043D\u0438\u0437",base64url:"base64url-\u043A\u043E\u0434\u0438\u0440\u0430\u043D \u043D\u0438\u0437",json_string:"JSON \u043D\u0438\u0437",e164:"E.164 \u043D\u043E\u043C\u0435\u0440",jwt:"JWT",template_literal:"\u0432\u0445\u043E\u0434"};return i=>{switch(i.code){case"invalid_type":return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434: \u043E\u0447\u0430\u043A\u0432\u0430\u043D ${i.expected}, \u043F\u043E\u043B\u0443\u0447\u0435\u043D ${Wl(i.input)}`;case"invalid_value":return i.values.length===1?`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434: \u043E\u0447\u0430\u043A\u0432\u0430\u043D ${f(i.values[0])}`:`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430 \u043E\u043F\u0446\u0438\u044F: \u043E\u0447\u0430\u043A\u0432\u0430\u043D\u043E \u0435\u0434\u043D\u043E \u043E\u0442 ${l(i.values,"|")}`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`\u0422\u0432\u044A\u0440\u0434\u0435 \u0433\u043E\u043B\u044F\u043C\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ${i.origin??"\u0441\u0442\u043E\u0439\u043D\u043E\u0441\u0442"} \u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430 ${t}${i.maximum.toString()} ${o.unit??"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0430"}`:`\u0422\u0432\u044A\u0440\u0434\u0435 \u0433\u043E\u043B\u044F\u043C\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ${i.origin??"\u0441\u0442\u043E\u0439\u043D\u043E\u0441\u0442"} \u0434\u0430 \u0431\u044A\u0434\u0435 ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`\u0422\u0432\u044A\u0440\u0434\u0435 \u043C\u0430\u043B\u043A\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ${i.origin} \u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430 ${t}${i.minimum.toString()} ${o.unit}`:`\u0422\u0432\u044A\u0440\u0434\u0435 \u043C\u0430\u043B\u043A\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ${i.origin} \u0434\u0430 \u0431\u044A\u0434\u0435 ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;if(t.format==="starts_with")return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u0432\u0430 \u0441 "${t.prefix}"`;if(t.format==="ends_with")return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0437\u0430\u0432\u044A\u0440\u0448\u0432\u0430 \u0441 "${t.suffix}"`;if(t.format==="includes")return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0432\u043A\u043B\u044E\u0447\u0432\u0430 "${t.includes}"`;if(t.format==="regex")return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0441\u044A\u0432\u043F\u0430\u0434\u0430 \u0441 ${t.pattern}`;let o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D";return t.format==="emoji"&&(o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u043E"),t.format==="datetime"&&(o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u043E"),t.format==="date"&&(o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430"),t.format==="time"&&(o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u043E"),t.format==="duration"&&(o="\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430"),`${o} ${n[t.format]??i.format}`}case"not_multiple_of":return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u043E \u0447\u0438\u0441\u043B\u043E: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0431\u044A\u0434\u0435 \u043A\u0440\u0430\u0442\u043D\u043E \u043D\u0430 ${i.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u0430\u0437\u043F\u043E\u0437\u043D\u0430\u0442${i.keys.length>1?"\u0438":""} \u043A\u043B\u044E\u0447${i.keys.length>1?"\u043E\u0432\u0435":""}: ${l(i.keys,", ")}`;case"invalid_key":return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043A\u043B\u044E\u0447 \u0432 ${i.origin}`;case"invalid_union":return"\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434";case"invalid_element":return`\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430 \u0441\u0442\u043E\u0439\u043D\u043E\u0441\u0442 \u0432 ${i.origin}`;default:return"\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434"}}};function Zu(){return{localeError:Gl()}}var Kl=()=>{let e={string:{unit:"car\xE0cters",verb:"contenir"},file:{unit:"bytes",verb:"contenir"},array:{unit:"elements",verb:"contenir"},set:{unit:"elements",verb:"contenir"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"entrada",email:"adre\xE7a electr\xF2nica",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data i hora ISO",date:"data ISO",time:"hora ISO",duration:"durada ISO",ipv4:"adre\xE7a IPv4",ipv6:"adre\xE7a IPv6",cidrv4:"rang IPv4",cidrv6:"rang IPv6",base64:"cadena codificada en base64",base64url:"cadena codificada en base64url",json_string:"cadena JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return t=>{switch(t.code){case"invalid_type":return`Tipus inv\xE0lid: s'esperava ${t.expected}, s'ha rebut ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Valor inv\xE0lid: s'esperava ${f(t.values[0])}`:`Opci\xF3 inv\xE0lida: s'esperava una de ${l(t.values," o ")}`;case"too_big":{let o=t.inclusive?"com a m\xE0xim":"menys de",a=r(t.origin);return a?`Massa gran: s'esperava que ${t.origin??"el valor"} contingu\xE9s ${o} ${t.maximum.toString()} ${a.unit??"elements"}`:`Massa gran: s'esperava que ${t.origin??"el valor"} fos ${o} ${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?"com a m\xEDnim":"m\xE9s de",a=r(t.origin);return a?`Massa petit: s'esperava que ${t.origin} contingu\xE9s ${o} ${t.minimum.toString()} ${a.unit}`:`Massa petit: s'esperava que ${t.origin} fos ${o} ${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Format inv\xE0lid: ha de comen\xE7ar amb "${o.prefix}"`:o.format==="ends_with"?`Format inv\xE0lid: ha d'acabar amb "${o.suffix}"`:o.format==="includes"?`Format inv\xE0lid: ha d'incloure "${o.includes}"`:o.format==="regex"?`Format inv\xE0lid: ha de coincidir amb el patr\xF3 ${o.pattern}`:`Format inv\xE0lid per a ${i[o.format]??t.format}`}case"not_multiple_of":return`N\xFAmero inv\xE0lid: ha de ser m\xFAltiple de ${t.divisor}`;case"unrecognized_keys":return`Clau${t.keys.length>1?"s":""} no reconeguda${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`Clau inv\xE0lida a ${t.origin}`;case"invalid_union":return"Entrada inv\xE0lida";case"invalid_element":return`Element inv\xE0lid a ${t.origin}`;default:return"Entrada inv\xE0lida"}}};function Du(){return{localeError:Kl()}}var Xl=()=>{let e={string:{unit:"znak\u016F",verb:"m\xEDt"},file:{unit:"bajt\u016F",verb:"m\xEDt"},array:{unit:"prvk\u016F",verb:"m\xEDt"},set:{unit:"prvk\u016F",verb:"m\xEDt"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u010D\xEDslo";case"string":return"\u0159et\u011Bzec";case"boolean":return"boolean";case"bigint":return"bigint";case"function":return"funkce";case"symbol":return"symbol";case"undefined":return"undefined";case"object":{if(Array.isArray(t))return"pole";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"regul\xE1rn\xED v\xFDraz",email:"e-mailov\xE1 adresa",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"datum a \u010Das ve form\xE1tu ISO",date:"datum ve form\xE1tu ISO",time:"\u010Das ve form\xE1tu ISO",duration:"doba trv\xE1n\xED ISO",ipv4:"IPv4 adresa",ipv6:"IPv6 adresa",cidrv4:"rozsah IPv4",cidrv6:"rozsah IPv6",base64:"\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64",base64url:"\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64url",json_string:"\u0159et\u011Bzec ve form\xE1tu JSON",e164:"\u010D\xEDslo E.164",jwt:"JWT",template_literal:"vstup"};return t=>{switch(t.code){case"invalid_type":return`Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${t.expected}, obdr\u017Eeno ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${f(t.values[0])}`:`Neplatn\xE1 mo\u017Enost: o\u010Dek\xE1v\xE1na jedna z hodnot ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${t.origin??"hodnota"} mus\xED m\xEDt ${o}${t.maximum.toString()} ${a.unit??"prvk\u016F"}`:`Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${t.origin??"hodnota"} mus\xED b\xFDt ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${t.origin??"hodnota"} mus\xED m\xEDt ${o}${t.minimum.toString()} ${a.unit??"prvk\u016F"}`:`Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${t.origin??"hodnota"} mus\xED b\xFDt ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED za\u010D\xEDnat na "${o.prefix}"`:o.format==="ends_with"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED kon\u010Dit na "${o.suffix}"`:o.format==="includes"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED obsahovat "${o.includes}"`:o.format==="regex"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED odpov\xEDdat vzoru ${o.pattern}`:`Neplatn\xFD form\xE1t ${i[o.format]??t.format}`}case"not_multiple_of":return`Neplatn\xE9 \u010D\xEDslo: mus\xED b\xFDt n\xE1sobkem ${t.divisor}`;case"unrecognized_keys":return`Nezn\xE1m\xE9 kl\xED\u010De: ${l(t.keys,", ")}`;case"invalid_key":return`Neplatn\xFD kl\xED\u010D v ${t.origin}`;case"invalid_union":return"Neplatn\xFD vstup";case"invalid_element":return`Neplatn\xE1 hodnota v ${t.origin}`;default:return"Neplatn\xFD vstup"}}};function Tu(){return{localeError:Xl()}}var ql=()=>{let e={string:{unit:"tegn",verb:"havde"},file:{unit:"bytes",verb:"havde"},array:{unit:"elementer",verb:"indeholdt"},set:{unit:"elementer",verb:"indeholdt"}},r={string:"streng",number:"tal",boolean:"boolean",array:"liste",object:"objekt",set:"s\xE6t",file:"fil"};function n(a){return e[a]??null}function i(a){return r[a]??a}let t=a=>{let u=typeof a;switch(u){case"number":return Number.isNaN(a)?"NaN":"tal";case"object":return Array.isArray(a)?"liste":a===null?"null":Object.getPrototypeOf(a)!==Object.prototype&&a.constructor?a.constructor.name:"objekt"}return u},o={regex:"input",email:"e-mailadresse",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dato- og klokkesl\xE6t",date:"ISO-dato",time:"ISO-klokkesl\xE6t",duration:"ISO-varighed",ipv4:"IPv4-omr\xE5de",ipv6:"IPv6-omr\xE5de",cidrv4:"IPv4-spektrum",cidrv6:"IPv6-spektrum",base64:"base64-kodet streng",base64url:"base64url-kodet streng",json_string:"JSON-streng",e164:"E.164-nummer",jwt:"JWT",template_literal:"input"};return a=>{switch(a.code){case"invalid_type":return`Ugyldigt input: forventede ${i(a.expected)}, fik ${i(t(a.input))}`;case"invalid_value":return a.values.length===1?`Ugyldig v\xE6rdi: forventede ${f(a.values[0])}`:`Ugyldigt valg: forventede en af f\xF8lgende ${l(a.values,"|")}`;case"too_big":{let u=a.inclusive?"<=":"<",s=n(a.origin),m=i(a.origin);return s?`For stor: forventede ${m??"value"} ${s.verb} ${u} ${a.maximum.toString()} ${s.unit??"elementer"}`:`For stor: forventede ${m??"value"} havde ${u} ${a.maximum.toString()}`}case"too_small":{let u=a.inclusive?">=":">",s=n(a.origin),m=i(a.origin);return s?`For lille: forventede ${m} ${s.verb} ${u} ${a.minimum.toString()} ${s.unit}`:`For lille: forventede ${m} havde ${u} ${a.minimum.toString()}`}case"invalid_format":{let u=a;return u.format==="starts_with"?`Ugyldig streng: skal starte med "${u.prefix}"`:u.format==="ends_with"?`Ugyldig streng: skal ende med "${u.suffix}"`:u.format==="includes"?`Ugyldig streng: skal indeholde "${u.includes}"`:u.format==="regex"?`Ugyldig streng: skal matche m\xF8nsteret ${u.pattern}`:`Ugyldig ${o[u.format]??a.format}`}case"not_multiple_of":return`Ugyldigt tal: skal v\xE6re deleligt med ${a.divisor}`;case"unrecognized_keys":return`${a.keys.length>1?"Ukendte n\xF8gler":"Ukendt n\xF8gle"}: ${l(a.keys,", ")}`;case"invalid_key":return`Ugyldig n\xF8gle i ${a.origin}`;case"invalid_union":return"Ugyldigt input: matcher ingen af de tilladte typer";case"invalid_element":return`Ugyldig v\xE6rdi i ${a.origin}`;default:return"Ugyldigt input"}}};function Eu(){return{localeError:ql()}}var Hl=()=>{let e={string:{unit:"Zeichen",verb:"zu haben"},file:{unit:"Bytes",verb:"zu haben"},array:{unit:"Elemente",verb:"zu haben"},set:{unit:"Elemente",verb:"zu haben"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"Zahl";case"object":{if(Array.isArray(t))return"Array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"Eingabe",email:"E-Mail-Adresse",url:"URL",emoji:"Emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-Datum und -Uhrzeit",date:"ISO-Datum",time:"ISO-Uhrzeit",duration:"ISO-Dauer",ipv4:"IPv4-Adresse",ipv6:"IPv6-Adresse",cidrv4:"IPv4-Bereich",cidrv6:"IPv6-Bereich",base64:"Base64-codierter String",base64url:"Base64-URL-codierter String",json_string:"JSON-String",e164:"E.164-Nummer",jwt:"JWT",template_literal:"Eingabe"};return t=>{switch(t.code){case"invalid_type":return`Ung\xFCltige Eingabe: erwartet ${t.expected}, erhalten ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Ung\xFCltige Eingabe: erwartet ${f(t.values[0])}`:`Ung\xFCltige Option: erwartet eine von ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Zu gro\xDF: erwartet, dass ${t.origin??"Wert"} ${o}${t.maximum.toString()} ${a.unit??"Elemente"} hat`:`Zu gro\xDF: erwartet, dass ${t.origin??"Wert"} ${o}${t.maximum.toString()} ist`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Zu klein: erwartet, dass ${t.origin} ${o}${t.minimum.toString()} ${a.unit} hat`:`Zu klein: erwartet, dass ${t.origin} ${o}${t.minimum.toString()} ist`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Ung\xFCltiger String: muss mit "${o.prefix}" beginnen`:o.format==="ends_with"?`Ung\xFCltiger String: muss mit "${o.suffix}" enden`:o.format==="includes"?`Ung\xFCltiger String: muss "${o.includes}" enthalten`:o.format==="regex"?`Ung\xFCltiger String: muss dem Muster ${o.pattern} entsprechen`:`Ung\xFCltig: ${i[o.format]??t.format}`}case"not_multiple_of":return`Ung\xFCltige Zahl: muss ein Vielfaches von ${t.divisor} sein`;case"unrecognized_keys":return`${t.keys.length>1?"Unbekannte Schl\xFCssel":"Unbekannter Schl\xFCssel"}: ${l(t.keys,", ")}`;case"invalid_key":return`Ung\xFCltiger Schl\xFCssel in ${t.origin}`;case"invalid_union":return"Ung\xFCltige Eingabe";case"invalid_element":return`Ung\xFCltiger Wert in ${t.origin}`;default:return"Ung\xFCltige Eingabe"}}};function Au(){return{localeError:Hl()}}var Yl=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return r},Ql=()=>{let e={string:{unit:"characters",verb:"to have"},file:{unit:"bytes",verb:"to have"},array:{unit:"items",verb:"to have"},set:{unit:"items",verb:"to have"}};function r(i){return e[i]??null}let n={regex:"input",email:"email address",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datetime",date:"ISO date",time:"ISO time",duration:"ISO duration",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded string",base64url:"base64url-encoded string",json_string:"JSON string",e164:"E.164 number",jwt:"JWT",template_literal:"input"};return i=>{switch(i.code){case"invalid_type":return`Invalid input: expected ${i.expected}, received ${Yl(i.input)}`;case"invalid_value":return i.values.length===1?`Invalid input: expected ${f(i.values[0])}`:`Invalid option: expected one of ${l(i.values,"|")}`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`Too big: expected ${i.origin??"value"} to have ${t}${i.maximum.toString()} ${o.unit??"elements"}`:`Too big: expected ${i.origin??"value"} to be ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`Too small: expected ${i.origin} to have ${t}${i.minimum.toString()} ${o.unit}`:`Too small: expected ${i.origin} to be ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`Invalid string: must start with "${t.prefix}"`:t.format==="ends_with"?`Invalid string: must end with "${t.suffix}"`:t.format==="includes"?`Invalid string: must include "${t.includes}"`:t.format==="regex"?`Invalid string: must match pattern ${t.pattern}`:`Invalid ${n[t.format]??i.format}`}case"not_multiple_of":return`Invalid number: must be a multiple of ${i.divisor}`;case"unrecognized_keys":return`Unrecognized key${i.keys.length>1?"s":""}: ${l(i.keys,", ")}`;case"invalid_key":return`Invalid key in ${i.origin}`;case"invalid_union":return"Invalid input";case"invalid_element":return`Invalid value in ${i.origin}`;default:return"Invalid input"}}};function Ht(){return{localeError:Ql()}}var ed=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"nombro";case"object":{if(Array.isArray(e))return"tabelo";if(e===null)return"senvalora";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return r},td=()=>{let e={string:{unit:"karaktrojn",verb:"havi"},file:{unit:"bajtojn",verb:"havi"},array:{unit:"elementojn",verb:"havi"},set:{unit:"elementojn",verb:"havi"}};function r(i){return e[i]??null}let n={regex:"enigo",email:"retadreso",url:"URL",emoji:"emo\u011Dio",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-datotempo",date:"ISO-dato",time:"ISO-tempo",duration:"ISO-da\u016Dro",ipv4:"IPv4-adreso",ipv6:"IPv6-adreso",cidrv4:"IPv4-rango",cidrv6:"IPv6-rango",base64:"64-ume kodita karaktraro",base64url:"URL-64-ume kodita karaktraro",json_string:"JSON-karaktraro",e164:"E.164-nombro",jwt:"JWT",template_literal:"enigo"};return i=>{switch(i.code){case"invalid_type":return`Nevalida enigo: atendi\u011Dis ${i.expected}, ricevi\u011Dis ${ed(i.input)}`;case"invalid_value":return i.values.length===1?`Nevalida enigo: atendi\u011Dis ${f(i.values[0])}`:`Nevalida opcio: atendi\u011Dis unu el ${l(i.values,"|")}`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`Tro granda: atendi\u011Dis ke ${i.origin??"valoro"} havu ${t}${i.maximum.toString()} ${o.unit??"elementojn"}`:`Tro granda: atendi\u011Dis ke ${i.origin??"valoro"} havu ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`Tro malgranda: atendi\u011Dis ke ${i.origin} havu ${t}${i.minimum.toString()} ${o.unit}`:`Tro malgranda: atendi\u011Dis ke ${i.origin} estu ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`Nevalida karaktraro: devas komenci\u011Di per "${t.prefix}"`:t.format==="ends_with"?`Nevalida karaktraro: devas fini\u011Di per "${t.suffix}"`:t.format==="includes"?`Nevalida karaktraro: devas inkluzivi "${t.includes}"`:t.format==="regex"?`Nevalida karaktraro: devas kongrui kun la modelo ${t.pattern}`:`Nevalida ${n[t.format]??i.format}`}case"not_multiple_of":return`Nevalida nombro: devas esti oblo de ${i.divisor}`;case"unrecognized_keys":return`Nekonata${i.keys.length>1?"j":""} \u015Dlosilo${i.keys.length>1?"j":""}: ${l(i.keys,", ")}`;case"invalid_key":return`Nevalida \u015Dlosilo en ${i.origin}`;case"invalid_union":return"Nevalida enigo";case"invalid_element":return`Nevalida valoro en ${i.origin}`;default:return"Nevalida enigo"}}};function Lu(){return{localeError:td()}}var rd=()=>{let e={string:{unit:"caracteres",verb:"tener"},file:{unit:"bytes",verb:"tener"},array:{unit:"elementos",verb:"tener"},set:{unit:"elementos",verb:"tener"}},r={string:"texto",number:"n\xFAmero",boolean:"booleano",array:"arreglo",object:"objeto",set:"conjunto",file:"archivo",date:"fecha",bigint:"n\xFAmero grande",symbol:"s\xEDmbolo",undefined:"indefinido",null:"nulo",function:"funci\xF3n",map:"mapa",record:"registro",tuple:"tupla",enum:"enumeraci\xF3n",union:"uni\xF3n",literal:"literal",promise:"promesa",void:"vac\xEDo",never:"nunca",unknown:"desconocido",any:"cualquiera"};function n(a){return e[a]??null}function i(a){return r[a]??a}let t=a=>{let u=typeof a;switch(u){case"number":return Number.isNaN(a)?"NaN":"number";case"object":return Array.isArray(a)?"array":a===null?"null":Object.getPrototypeOf(a)!==Object.prototype?a.constructor.name:"object"}return u},o={regex:"entrada",email:"direcci\xF3n de correo electr\xF3nico",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"fecha y hora ISO",date:"fecha ISO",time:"hora ISO",duration:"duraci\xF3n ISO",ipv4:"direcci\xF3n IPv4",ipv6:"direcci\xF3n IPv6",cidrv4:"rango IPv4",cidrv6:"rango IPv6",base64:"cadena codificada en base64",base64url:"URL codificada en base64",json_string:"cadena JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return a=>{switch(a.code){case"invalid_type":return`Entrada inv\xE1lida: se esperaba ${i(a.expected)}, recibido ${i(t(a.input))}`;case"invalid_value":return a.values.length===1?`Entrada inv\xE1lida: se esperaba ${f(a.values[0])}`:`Opci\xF3n inv\xE1lida: se esperaba una de ${l(a.values,"|")}`;case"too_big":{let u=a.inclusive?"<=":"<",s=n(a.origin),m=i(a.origin);return s?`Demasiado grande: se esperaba que ${m??"valor"} tuviera ${u}${a.maximum.toString()} ${s.unit??"elementos"}`:`Demasiado grande: se esperaba que ${m??"valor"} fuera ${u}${a.maximum.toString()}`}case"too_small":{let u=a.inclusive?">=":">",s=n(a.origin),m=i(a.origin);return s?`Demasiado peque\xF1o: se esperaba que ${m} tuviera ${u}${a.minimum.toString()} ${s.unit}`:`Demasiado peque\xF1o: se esperaba que ${m} fuera ${u}${a.minimum.toString()}`}case"invalid_format":{let u=a;return u.format==="starts_with"?`Cadena inv\xE1lida: debe comenzar con "${u.prefix}"`:u.format==="ends_with"?`Cadena inv\xE1lida: debe terminar en "${u.suffix}"`:u.format==="includes"?`Cadena inv\xE1lida: debe incluir "${u.includes}"`:u.format==="regex"?`Cadena inv\xE1lida: debe coincidir con el patr\xF3n ${u.pattern}`:`Inv\xE1lido ${o[u.format]??a.format}`}case"not_multiple_of":return`N\xFAmero inv\xE1lido: debe ser m\xFAltiplo de ${a.divisor}`;case"unrecognized_keys":return`Llave${a.keys.length>1?"s":""} desconocida${a.keys.length>1?"s":""}: ${l(a.keys,", ")}`;case"invalid_key":return`Llave inv\xE1lida en ${i(a.origin)}`;case"invalid_union":return"Entrada inv\xE1lida";case"invalid_element":return`Valor inv\xE1lido en ${i(a.origin)}`;default:return"Entrada inv\xE1lida"}}};function Ru(){return{localeError:rd()}}var nd=()=>{let e={string:{unit:"\u06A9\u0627\u0631\u0627\u06A9\u062A\u0631",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},file:{unit:"\u0628\u0627\u06CC\u062A",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},array:{unit:"\u0622\u06CC\u062A\u0645",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},set:{unit:"\u0622\u06CC\u062A\u0645",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0639\u062F\u062F";case"object":{if(Array.isArray(t))return"\u0622\u0631\u0627\u06CC\u0647";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0648\u0631\u0648\u062F\u06CC",email:"\u0622\u062F\u0631\u0633 \u0627\u06CC\u0645\u06CC\u0644",url:"URL",emoji:"\u0627\u06CC\u0645\u0648\u062C\u06CC",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u062A\u0627\u0631\u06CC\u062E \u0648 \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",date:"\u062A\u0627\u0631\u06CC\u062E \u0627\u06CC\u0632\u0648",time:"\u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",duration:"\u0645\u062F\u062A \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",ipv4:"IPv4 \u0622\u062F\u0631\u0633",ipv6:"IPv6 \u0622\u062F\u0631\u0633",cidrv4:"IPv4 \u062F\u0627\u0645\u0646\u0647",cidrv6:"IPv6 \u062F\u0627\u0645\u0646\u0647",base64:"base64-encoded \u0631\u0634\u062A\u0647",base64url:"base64url-encoded \u0631\u0634\u062A\u0647",json_string:"JSON \u0631\u0634\u062A\u0647",e164:"E.164 \u0639\u062F\u062F",jwt:"JWT",template_literal:"\u0648\u0631\u0648\u062F\u06CC"};return t=>{switch(t.code){case"invalid_type":return`\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${t.expected} \u0645\u06CC\u200C\u0628\u0648\u062F\u060C ${n(t.input)} \u062F\u0631\u06CC\u0627\u0641\u062A \u0634\u062F`;case"invalid_value":return t.values.length===1?`\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${f(t.values[0])} \u0645\u06CC\u200C\u0628\u0648\u062F`:`\u06AF\u0632\u06CC\u0646\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A \u06CC\u06A9\u06CC \u0627\u0632 ${l(t.values,"|")} \u0645\u06CC\u200C\u0628\u0648\u062F`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${t.origin??"\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${o}${t.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631"} \u0628\u0627\u0634\u062F`:`\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${t.origin??"\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${o}${t.maximum.toString()} \u0628\u0627\u0634\u062F`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${t.origin} \u0628\u0627\u06CC\u062F ${o}${t.minimum.toString()} ${a.unit} \u0628\u0627\u0634\u062F`:`\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${t.origin} \u0628\u0627\u06CC\u062F ${o}${t.minimum.toString()} \u0628\u0627\u0634\u062F`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${o.prefix}" \u0634\u0631\u0648\u0639 \u0634\u0648\u062F`:o.format==="ends_with"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${o.suffix}" \u062A\u0645\u0627\u0645 \u0634\u0648\u062F`:o.format==="includes"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0634\u0627\u0645\u0644 "${o.includes}" \u0628\u0627\u0634\u062F`:o.format==="regex"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \u0627\u0644\u06AF\u0648\u06CC ${o.pattern} \u0645\u0637\u0627\u0628\u0642\u062A \u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F`:`${i[o.format]??t.format} \u0646\u0627\u0645\u0639\u062A\u0628\u0631`}case"not_multiple_of":return`\u0639\u062F\u062F \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0645\u0636\u0631\u0628 ${t.divisor} \u0628\u0627\u0634\u062F`;case"unrecognized_keys":return`\u06A9\u0644\u06CC\u062F${t.keys.length>1?"\u0647\u0627\u06CC":""} \u0646\u0627\u0634\u0646\u0627\u0633: ${l(t.keys,", ")}`;case"invalid_key":return`\u06A9\u0644\u06CC\u062F \u0646\u0627\u0634\u0646\u0627\u0633 \u062F\u0631 ${t.origin}`;case"invalid_union":return"\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631";case"invalid_element":return`\u0645\u0642\u062F\u0627\u0631 \u0646\u0627\u0645\u0639\u062A\u0628\u0631 \u062F\u0631 ${t.origin}`;default:return"\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631"}}};function Cu(){return{localeError:nd()}}var od=()=>{let e={string:{unit:"merkki\xE4",subject:"merkkijonon"},file:{unit:"tavua",subject:"tiedoston"},array:{unit:"alkiota",subject:"listan"},set:{unit:"alkiota",subject:"joukon"},number:{unit:"",subject:"luvun"},bigint:{unit:"",subject:"suuren kokonaisluvun"},int:{unit:"",subject:"kokonaisluvun"},date:{unit:"",subject:"p\xE4iv\xE4m\xE4\xE4r\xE4n"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"s\xE4\xE4nn\xF6llinen lauseke",email:"s\xE4hk\xF6postiosoite",url:"URL-osoite",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-aikaleima",date:"ISO-p\xE4iv\xE4m\xE4\xE4r\xE4",time:"ISO-aika",duration:"ISO-kesto",ipv4:"IPv4-osoite",ipv6:"IPv6-osoite",cidrv4:"IPv4-alue",cidrv6:"IPv6-alue",base64:"base64-koodattu merkkijono",base64url:"base64url-koodattu merkkijono",json_string:"JSON-merkkijono",e164:"E.164-luku",jwt:"JWT",template_literal:"templaattimerkkijono"};return t=>{switch(t.code){case"invalid_type":return`Virheellinen tyyppi: odotettiin ${t.expected}, oli ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Virheellinen sy\xF6te: t\xE4ytyy olla ${f(t.values[0])}`:`Virheellinen valinta: t\xE4ytyy olla yksi seuraavista: ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Liian suuri: ${a.subject} t\xE4ytyy olla ${o}${t.maximum.toString()} ${a.unit}`.trim():`Liian suuri: arvon t\xE4ytyy olla ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Liian pieni: ${a.subject} t\xE4ytyy olla ${o}${t.minimum.toString()} ${a.unit}`.trim():`Liian pieni: arvon t\xE4ytyy olla ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Virheellinen sy\xF6te: t\xE4ytyy alkaa "${o.prefix}"`:o.format==="ends_with"?`Virheellinen sy\xF6te: t\xE4ytyy loppua "${o.suffix}"`:o.format==="includes"?`Virheellinen sy\xF6te: t\xE4ytyy sis\xE4lt\xE4\xE4 "${o.includes}"`:o.format==="regex"?`Virheellinen sy\xF6te: t\xE4ytyy vastata s\xE4\xE4nn\xF6llist\xE4 lauseketta ${o.pattern}`:`Virheellinen ${i[o.format]??t.format}`}case"not_multiple_of":return`Virheellinen luku: t\xE4ytyy olla luvun ${t.divisor} monikerta`;case"unrecognized_keys":return`${t.keys.length>1?"Tuntemattomat avaimet":"Tuntematon avain"}: ${l(t.keys,", ")}`;case"invalid_key":return"Virheellinen avain tietueessa";case"invalid_union":return"Virheellinen unioni";case"invalid_element":return"Virheellinen arvo joukossa";default:return"Virheellinen sy\xF6te"}}};function Fu(){return{localeError:od()}}var id=()=>{let e={string:{unit:"caract\xE8res",verb:"avoir"},file:{unit:"octets",verb:"avoir"},array:{unit:"\xE9l\xE9ments",verb:"avoir"},set:{unit:"\xE9l\xE9ments",verb:"avoir"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"nombre";case"object":{if(Array.isArray(t))return"tableau";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"entr\xE9e",email:"adresse e-mail",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"date et heure ISO",date:"date ISO",time:"heure ISO",duration:"dur\xE9e ISO",ipv4:"adresse IPv4",ipv6:"adresse IPv6",cidrv4:"plage IPv4",cidrv6:"plage IPv6",base64:"cha\xEEne encod\xE9e en base64",base64url:"cha\xEEne encod\xE9e en base64url",json_string:"cha\xEEne JSON",e164:"num\xE9ro E.164",jwt:"JWT",template_literal:"entr\xE9e"};return t=>{switch(t.code){case"invalid_type":return`Entr\xE9e invalide : ${t.expected} attendu, ${n(t.input)} re\xE7u`;case"invalid_value":return t.values.length===1?`Entr\xE9e invalide : ${f(t.values[0])} attendu`:`Option invalide : une valeur parmi ${l(t.values,"|")} attendue`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Trop grand : ${t.origin??"valeur"} doit ${a.verb} ${o}${t.maximum.toString()} ${a.unit??"\xE9l\xE9ment(s)"}`:`Trop grand : ${t.origin??"valeur"} doit \xEAtre ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Trop petit : ${t.origin} doit ${a.verb} ${o}${t.minimum.toString()} ${a.unit}`:`Trop petit : ${t.origin} doit \xEAtre ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Cha\xEEne invalide : doit commencer par "${o.prefix}"`:o.format==="ends_with"?`Cha\xEEne invalide : doit se terminer par "${o.suffix}"`:o.format==="includes"?`Cha\xEEne invalide : doit inclure "${o.includes}"`:o.format==="regex"?`Cha\xEEne invalide : doit correspondre au mod\xE8le ${o.pattern}`:`${i[o.format]??t.format} invalide`}case"not_multiple_of":return`Nombre invalide : doit \xEAtre un multiple de ${t.divisor}`;case"unrecognized_keys":return`Cl\xE9${t.keys.length>1?"s":""} non reconnue${t.keys.length>1?"s":""} : ${l(t.keys,", ")}`;case"invalid_key":return`Cl\xE9 invalide dans ${t.origin}`;case"invalid_union":return"Entr\xE9e invalide";case"invalid_element":return`Valeur invalide dans ${t.origin}`;default:return"Entr\xE9e invalide"}}};function Vu(){return{localeError:id()}}var ad=()=>{let e={string:{unit:"caract\xE8res",verb:"avoir"},file:{unit:"octets",verb:"avoir"},array:{unit:"\xE9l\xE9ments",verb:"avoir"},set:{unit:"\xE9l\xE9ments",verb:"avoir"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"entr\xE9e",email:"adresse courriel",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"date-heure ISO",date:"date ISO",time:"heure ISO",duration:"dur\xE9e ISO",ipv4:"adresse IPv4",ipv6:"adresse IPv6",cidrv4:"plage IPv4",cidrv6:"plage IPv6",base64:"cha\xEEne encod\xE9e en base64",base64url:"cha\xEEne encod\xE9e en base64url",json_string:"cha\xEEne JSON",e164:"num\xE9ro E.164",jwt:"JWT",template_literal:"entr\xE9e"};return t=>{switch(t.code){case"invalid_type":return`Entr\xE9e invalide : attendu ${t.expected}, re\xE7u ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Entr\xE9e invalide : attendu ${f(t.values[0])}`:`Option invalide : attendu l'une des valeurs suivantes ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"\u2264":"<",a=r(t.origin);return a?`Trop grand : attendu que ${t.origin??"la valeur"} ait ${o}${t.maximum.toString()} ${a.unit}`:`Trop grand : attendu que ${t.origin??"la valeur"} soit ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?"\u2265":">",a=r(t.origin);return a?`Trop petit : attendu que ${t.origin} ait ${o}${t.minimum.toString()} ${a.unit}`:`Trop petit : attendu que ${t.origin} soit ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Cha\xEEne invalide : doit commencer par "${o.prefix}"`:o.format==="ends_with"?`Cha\xEEne invalide : doit se terminer par "${o.suffix}"`:o.format==="includes"?`Cha\xEEne invalide : doit inclure "${o.includes}"`:o.format==="regex"?`Cha\xEEne invalide : doit correspondre au motif ${o.pattern}`:`${i[o.format]??t.format} invalide`}case"not_multiple_of":return`Nombre invalide : doit \xEAtre un multiple de ${t.divisor}`;case"unrecognized_keys":return`Cl\xE9${t.keys.length>1?"s":""} non reconnue${t.keys.length>1?"s":""} : ${l(t.keys,", ")}`;case"invalid_key":return`Cl\xE9 invalide dans ${t.origin}`;case"invalid_union":return"Entr\xE9e invalide";case"invalid_element":return`Valeur invalide dans ${t.origin}`;default:return"Entr\xE9e invalide"}}};function Mu(){return{localeError:ad()}}var ud=()=>{let e={string:{unit:"\u05D0\u05D5\u05EA\u05D9\u05D5\u05EA",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},file:{unit:"\u05D1\u05D9\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},array:{unit:"\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},set:{unit:"\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u05E7\u05DC\u05D8",email:"\u05DB\u05EA\u05D5\u05D1\u05EA \u05D0\u05D9\u05DE\u05D9\u05D9\u05DC",url:"\u05DB\u05EA\u05D5\u05D1\u05EA \u05E8\u05E9\u05EA",emoji:"\u05D0\u05D9\u05DE\u05D5\u05D2'\u05D9",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u05EA\u05D0\u05E8\u05D9\u05DA \u05D5\u05D6\u05DE\u05DF ISO",date:"\u05EA\u05D0\u05E8\u05D9\u05DA ISO",time:"\u05D6\u05DE\u05DF ISO",duration:"\u05DE\u05E9\u05DA \u05D6\u05DE\u05DF ISO",ipv4:"\u05DB\u05EA\u05D5\u05D1\u05EA IPv4",ipv6:"\u05DB\u05EA\u05D5\u05D1\u05EA IPv6",cidrv4:"\u05D8\u05D5\u05D5\u05D7 IPv4",cidrv6:"\u05D8\u05D5\u05D5\u05D7 IPv6",base64:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64",base64url:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64 \u05DC\u05DB\u05EA\u05D5\u05D1\u05D5\u05EA \u05E8\u05E9\u05EA",json_string:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA JSON",e164:"\u05DE\u05E1\u05E4\u05E8 E.164",jwt:"JWT",template_literal:"\u05E7\u05DC\u05D8"};return t=>{switch(t.code){case"invalid_type":return`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${t.expected}, \u05D4\u05EA\u05E7\u05D1\u05DC ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${f(t.values[0])}`:`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA \u05D0\u05D7\u05EA \u05DE\u05D4\u05D0\u05E4\u05E9\u05E8\u05D5\u05D9\u05D5\u05EA  ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${t.origin??"value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${o}${t.maximum.toString()} ${a.unit??"elements"}`:`\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${t.origin??"value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${t.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${o}${t.minimum.toString()} ${a.unit}`:`\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${t.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D7\u05D9\u05DC \u05D1"${o.prefix}"`:o.format==="ends_with"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1 "${o.suffix}"`:o.format==="includes"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05DB\u05DC\u05D5\u05DC "${o.includes}"`:o.format==="regex"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D0\u05D9\u05DD \u05DC\u05EA\u05D1\u05E0\u05D9\u05EA ${o.pattern}`:`${i[o.format]??t.format} \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`}case"not_multiple_of":return`\u05DE\u05E1\u05E4\u05E8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05D7\u05D9\u05D9\u05D1 \u05DC\u05D4\u05D9\u05D5\u05EA \u05DE\u05DB\u05E4\u05DC\u05D4 \u05E9\u05DC ${t.divisor}`;case"unrecognized_keys":return`\u05DE\u05E4\u05EA\u05D7${t.keys.length>1?"\u05D5\u05EA":""} \u05DC\u05D0 \u05DE\u05D6\u05D5\u05D4${t.keys.length>1?"\u05D9\u05DD":"\u05D4"}: ${l(t.keys,", ")}`;case"invalid_key":return`\u05DE\u05E4\u05EA\u05D7 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${t.origin}`;case"invalid_union":return"\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF";case"invalid_element":return`\u05E2\u05E8\u05DA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${t.origin}`;default:return"\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF"}}};function Ju(){return{localeError:ud()}}var cd=()=>{let e={string:{unit:"karakter",verb:"legyen"},file:{unit:"byte",verb:"legyen"},array:{unit:"elem",verb:"legyen"},set:{unit:"elem",verb:"legyen"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"sz\xE1m";case"object":{if(Array.isArray(t))return"t\xF6mb";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"bemenet",email:"email c\xEDm",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO id\u0151b\xE9lyeg",date:"ISO d\xE1tum",time:"ISO id\u0151",duration:"ISO id\u0151intervallum",ipv4:"IPv4 c\xEDm",ipv6:"IPv6 c\xEDm",cidrv4:"IPv4 tartom\xE1ny",cidrv6:"IPv6 tartom\xE1ny",base64:"base64-k\xF3dolt string",base64url:"base64url-k\xF3dolt string",json_string:"JSON string",e164:"E.164 sz\xE1m",jwt:"JWT",template_literal:"bemenet"};return t=>{switch(t.code){case"invalid_type":return`\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${t.expected}, a kapott \xE9rt\xE9k ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${f(t.values[0])}`:`\xC9rv\xE9nytelen opci\xF3: valamelyik \xE9rt\xE9k v\xE1rt ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`T\xFAl nagy: ${t.origin??"\xE9rt\xE9k"} m\xE9rete t\xFAl nagy ${o}${t.maximum.toString()} ${a.unit??"elem"}`:`T\xFAl nagy: a bemeneti \xE9rt\xE9k ${t.origin??"\xE9rt\xE9k"} t\xFAl nagy: ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${t.origin} m\xE9rete t\xFAl kicsi ${o}${t.minimum.toString()} ${a.unit}`:`T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${t.origin} t\xFAl kicsi ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\xC9rv\xE9nytelen string: "${o.prefix}" \xE9rt\xE9kkel kell kezd\u0151dnie`:o.format==="ends_with"?`\xC9rv\xE9nytelen string: "${o.suffix}" \xE9rt\xE9kkel kell v\xE9gz\u0151dnie`:o.format==="includes"?`\xC9rv\xE9nytelen string: "${o.includes}" \xE9rt\xE9ket kell tartalmaznia`:o.format==="regex"?`\xC9rv\xE9nytelen string: ${o.pattern} mint\xE1nak kell megfelelnie`:`\xC9rv\xE9nytelen ${i[o.format]??t.format}`}case"not_multiple_of":return`\xC9rv\xE9nytelen sz\xE1m: ${t.divisor} t\xF6bbsz\xF6r\xF6s\xE9nek kell lennie`;case"unrecognized_keys":return`Ismeretlen kulcs${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`\xC9rv\xE9nytelen kulcs ${t.origin}`;case"invalid_union":return"\xC9rv\xE9nytelen bemenet";case"invalid_element":return`\xC9rv\xE9nytelen \xE9rt\xE9k: ${t.origin}`;default:return"\xC9rv\xE9nytelen bemenet"}}};function Bu(){return{localeError:cd()}}var sd=()=>{let e={string:{unit:"karakter",verb:"memiliki"},file:{unit:"byte",verb:"memiliki"},array:{unit:"item",verb:"memiliki"},set:{unit:"item",verb:"memiliki"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"input",email:"alamat email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"tanggal dan waktu format ISO",date:"tanggal format ISO",time:"jam format ISO",duration:"durasi format ISO",ipv4:"alamat IPv4",ipv6:"alamat IPv6",cidrv4:"rentang alamat IPv4",cidrv6:"rentang alamat IPv6",base64:"string dengan enkode base64",base64url:"string dengan enkode base64url",json_string:"string JSON",e164:"angka E.164",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`Input tidak valid: diharapkan ${t.expected}, diterima ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Input tidak valid: diharapkan ${f(t.values[0])}`:`Pilihan tidak valid: diharapkan salah satu dari ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Terlalu besar: diharapkan ${t.origin??"value"} memiliki ${o}${t.maximum.toString()} ${a.unit??"elemen"}`:`Terlalu besar: diharapkan ${t.origin??"value"} menjadi ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Terlalu kecil: diharapkan ${t.origin} memiliki ${o}${t.minimum.toString()} ${a.unit}`:`Terlalu kecil: diharapkan ${t.origin} menjadi ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`String tidak valid: harus dimulai dengan "${o.prefix}"`:o.format==="ends_with"?`String tidak valid: harus berakhir dengan "${o.suffix}"`:o.format==="includes"?`String tidak valid: harus menyertakan "${o.includes}"`:o.format==="regex"?`String tidak valid: harus sesuai pola ${o.pattern}`:`${i[o.format]??t.format} tidak valid`}case"not_multiple_of":return`Angka tidak valid: harus kelipatan dari ${t.divisor}`;case"unrecognized_keys":return`Kunci tidak dikenali ${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`Kunci tidak valid di ${t.origin}`;case"invalid_union":return"Input tidak valid";case"invalid_element":return`Nilai tidak valid di ${t.origin}`;default:return"Input tidak valid"}}};function Wu(){return{localeError:sd()}}var ld=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"n\xFAmer";case"object":{if(Array.isArray(e))return"fylki";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return r},dd=()=>{let e={string:{unit:"stafi",verb:"a\xF0 hafa"},file:{unit:"b\xE6ti",verb:"a\xF0 hafa"},array:{unit:"hluti",verb:"a\xF0 hafa"},set:{unit:"hluti",verb:"a\xF0 hafa"}};function r(i){return e[i]??null}let n={regex:"gildi",email:"netfang",url:"vefsl\xF3\xF0",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dagsetning og t\xEDmi",date:"ISO dagsetning",time:"ISO t\xEDmi",duration:"ISO t\xEDmalengd",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded strengur",base64url:"base64url-encoded strengur",json_string:"JSON strengur",e164:"E.164 t\xF6lugildi",jwt:"JWT",template_literal:"gildi"};return i=>{switch(i.code){case"invalid_type":return`Rangt gildi: \xDE\xFA sl\xF3st inn ${ld(i.input)} \xFEar sem \xE1 a\xF0 vera ${i.expected}`;case"invalid_value":return i.values.length===1?`Rangt gildi: gert r\xE1\xF0 fyrir ${f(i.values[0])}`:`\xD3gilt val: m\xE1 vera eitt af eftirfarandi ${l(i.values,"|")}`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${i.origin??"gildi"} hafi ${t}${i.maximum.toString()} ${o.unit??"hluti"}`:`Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${i.origin??"gildi"} s\xE9 ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${i.origin} hafi ${t}${i.minimum.toString()} ${o.unit}`:`Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${i.origin} s\xE9 ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`\xD3gildur strengur: ver\xF0ur a\xF0 byrja \xE1 "${t.prefix}"`:t.format==="ends_with"?`\xD3gildur strengur: ver\xF0ur a\xF0 enda \xE1 "${t.suffix}"`:t.format==="includes"?`\xD3gildur strengur: ver\xF0ur a\xF0 innihalda "${t.includes}"`:t.format==="regex"?`\xD3gildur strengur: ver\xF0ur a\xF0 fylgja mynstri ${t.pattern}`:`Rangt ${n[t.format]??i.format}`}case"not_multiple_of":return`R\xF6ng tala: ver\xF0ur a\xF0 vera margfeldi af ${i.divisor}`;case"unrecognized_keys":return`\xD3\xFEekkt ${i.keys.length>1?"ir lyklar":"ur lykill"}: ${l(i.keys,", ")}`;case"invalid_key":return`Rangur lykill \xED ${i.origin}`;case"invalid_union":return"Rangt gildi";case"invalid_element":return`Rangt gildi \xED ${i.origin}`;default:return"Rangt gildi"}}};function Gu(){return{localeError:dd()}}var md=()=>{let e={string:{unit:"caratteri",verb:"avere"},file:{unit:"byte",verb:"avere"},array:{unit:"elementi",verb:"avere"},set:{unit:"elementi",verb:"avere"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"numero";case"object":{if(Array.isArray(t))return"vettore";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"input",email:"indirizzo email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data e ora ISO",date:"data ISO",time:"ora ISO",duration:"durata ISO",ipv4:"indirizzo IPv4",ipv6:"indirizzo IPv6",cidrv4:"intervallo IPv4",cidrv6:"intervallo IPv6",base64:"stringa codificata in base64",base64url:"URL codificata in base64",json_string:"stringa JSON",e164:"numero E.164",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`Input non valido: atteso ${t.expected}, ricevuto ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Input non valido: atteso ${f(t.values[0])}`:`Opzione non valida: atteso uno tra ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Troppo grande: ${t.origin??"valore"} deve avere ${o}${t.maximum.toString()} ${a.unit??"elementi"}`:`Troppo grande: ${t.origin??"valore"} deve essere ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Troppo piccolo: ${t.origin} deve avere ${o}${t.minimum.toString()} ${a.unit}`:`Troppo piccolo: ${t.origin} deve essere ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Stringa non valida: deve iniziare con "${o.prefix}"`:o.format==="ends_with"?`Stringa non valida: deve terminare con "${o.suffix}"`:o.format==="includes"?`Stringa non valida: deve includere "${o.includes}"`:o.format==="regex"?`Stringa non valida: deve corrispondere al pattern ${o.pattern}`:`Invalid ${i[o.format]??t.format}`}case"not_multiple_of":return`Numero non valido: deve essere un multiplo di ${t.divisor}`;case"unrecognized_keys":return`Chiav${t.keys.length>1?"i":"e"} non riconosciut${t.keys.length>1?"e":"a"}: ${l(t.keys,", ")}`;case"invalid_key":return`Chiave non valida in ${t.origin}`;case"invalid_union":return"Input non valido";case"invalid_element":return`Valore non valido in ${t.origin}`;default:return"Input non valido"}}};function Ku(){return{localeError:md()}}var pd=()=>{let e={string:{unit:"\u6587\u5B57",verb:"\u3067\u3042\u308B"},file:{unit:"\u30D0\u30A4\u30C8",verb:"\u3067\u3042\u308B"},array:{unit:"\u8981\u7D20",verb:"\u3067\u3042\u308B"},set:{unit:"\u8981\u7D20",verb:"\u3067\u3042\u308B"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u6570\u5024";case"object":{if(Array.isArray(t))return"\u914D\u5217";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u5165\u529B\u5024",email:"\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9",url:"URL",emoji:"\u7D75\u6587\u5B57",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO\u65E5\u6642",date:"ISO\u65E5\u4ED8",time:"ISO\u6642\u523B",duration:"ISO\u671F\u9593",ipv4:"IPv4\u30A2\u30C9\u30EC\u30B9",ipv6:"IPv6\u30A2\u30C9\u30EC\u30B9",cidrv4:"IPv4\u7BC4\u56F2",cidrv6:"IPv6\u7BC4\u56F2",base64:"base64\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",base64url:"base64url\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",json_string:"JSON\u6587\u5B57\u5217",e164:"E.164\u756A\u53F7",jwt:"JWT",template_literal:"\u5165\u529B\u5024"};return t=>{switch(t.code){case"invalid_type":return`\u7121\u52B9\u306A\u5165\u529B: ${t.expected}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F\u304C\u3001${n(t.input)}\u304C\u5165\u529B\u3055\u308C\u307E\u3057\u305F`;case"invalid_value":return t.values.length===1?`\u7121\u52B9\u306A\u5165\u529B: ${f(t.values[0])}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F`:`\u7121\u52B9\u306A\u9078\u629E: ${l(t.values,"\u3001")}\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;case"too_big":{let o=t.inclusive?"\u4EE5\u4E0B\u3067\u3042\u308B":"\u3088\u308A\u5C0F\u3055\u3044",a=r(t.origin);return a?`\u5927\u304D\u3059\u304E\u308B\u5024: ${t.origin??"\u5024"}\u306F${t.maximum.toString()}${a.unit??"\u8981\u7D20"}${o}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u5927\u304D\u3059\u304E\u308B\u5024: ${t.origin??"\u5024"}\u306F${t.maximum.toString()}${o}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`}case"too_small":{let o=t.inclusive?"\u4EE5\u4E0A\u3067\u3042\u308B":"\u3088\u308A\u5927\u304D\u3044",a=r(t.origin);return a?`\u5C0F\u3055\u3059\u304E\u308B\u5024: ${t.origin}\u306F${t.minimum.toString()}${a.unit}${o}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u5C0F\u3055\u3059\u304E\u308B\u5024: ${t.origin}\u306F${t.minimum.toString()}${o}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${o.prefix}"\u3067\u59CB\u307E\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:o.format==="ends_with"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${o.suffix}"\u3067\u7D42\u308F\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:o.format==="includes"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${o.includes}"\u3092\u542B\u3080\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:o.format==="regex"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: \u30D1\u30BF\u30FC\u30F3${o.pattern}\u306B\u4E00\u81F4\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u7121\u52B9\u306A${i[o.format]??t.format}`}case"not_multiple_of":return`\u7121\u52B9\u306A\u6570\u5024: ${t.divisor}\u306E\u500D\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;case"unrecognized_keys":return`\u8A8D\u8B58\u3055\u308C\u3066\u3044\u306A\u3044\u30AD\u30FC${t.keys.length>1?"\u7FA4":""}: ${l(t.keys,"\u3001")}`;case"invalid_key":return`${t.origin}\u5185\u306E\u7121\u52B9\u306A\u30AD\u30FC`;case"invalid_union":return"\u7121\u52B9\u306A\u5165\u529B";case"invalid_element":return`${t.origin}\u5185\u306E\u7121\u52B9\u306A\u5024`;default:return"\u7121\u52B9\u306A\u5165\u529B"}}};function Xu(){return{localeError:pd()}}var fd=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"\u10E0\u10D8\u10EA\u10EE\u10D5\u10D8";case"object":{if(Array.isArray(e))return"\u10DB\u10D0\u10E1\u10D8\u10D5\u10D8";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return{string:"\u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",boolean:"\u10D1\u10E3\u10DA\u10D4\u10D0\u10DC\u10D8",undefined:"undefined",bigint:"bigint",symbol:"symbol",function:"\u10E4\u10E3\u10DC\u10E5\u10EA\u10D8\u10D0"}[r]??r},gd=()=>{let e={string:{unit:"\u10E1\u10D8\u10DB\u10D1\u10DD\u10DA\u10DD",verb:"\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1"},file:{unit:"\u10D1\u10D0\u10D8\u10E2\u10D8",verb:"\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1"},array:{unit:"\u10D4\u10DA\u10D4\u10DB\u10D4\u10DC\u10E2\u10D8",verb:"\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1"},set:{unit:"\u10D4\u10DA\u10D4\u10DB\u10D4\u10DC\u10E2\u10D8",verb:"\u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1"}};function r(i){return e[i]??null}let n={regex:"\u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0",email:"\u10D4\u10DA-\u10E4\u10DD\u10E1\u10E2\u10D8\u10E1 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",url:"URL",emoji:"\u10D4\u10DB\u10DD\u10EF\u10D8",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u10D7\u10D0\u10E0\u10D8\u10E6\u10D8-\u10D3\u10E0\u10DD",date:"\u10D7\u10D0\u10E0\u10D8\u10E6\u10D8",time:"\u10D3\u10E0\u10DD",duration:"\u10EE\u10D0\u10DC\u10D2\u10E0\u10EB\u10DA\u10D8\u10D5\u10DD\u10D1\u10D0",ipv4:"IPv4 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",ipv6:"IPv6 \u10DB\u10D8\u10E1\u10D0\u10DB\u10D0\u10E0\u10D7\u10D8",cidrv4:"IPv4 \u10D3\u10D8\u10D0\u10DE\u10D0\u10D6\u10DD\u10DC\u10D8",cidrv6:"IPv6 \u10D3\u10D8\u10D0\u10DE\u10D0\u10D6\u10DD\u10DC\u10D8",base64:"base64-\u10D9\u10DD\u10D3\u10D8\u10E0\u10D4\u10D1\u10E3\u10DA\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",base64url:"base64url-\u10D9\u10DD\u10D3\u10D8\u10E0\u10D4\u10D1\u10E3\u10DA\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",json_string:"JSON \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8",e164:"E.164 \u10DC\u10DD\u10DB\u10D4\u10E0\u10D8",jwt:"JWT",template_literal:"\u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0"};return i=>{switch(i.code){case"invalid_type":return`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${i.expected}, \u10DB\u10D8\u10E6\u10D4\u10D1\u10E3\u10DA\u10D8 ${fd(i.input)}`;case"invalid_value":return i.values.length===1?`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${f(i.values[0])}`:`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D5\u10D0\u10E0\u10D8\u10D0\u10DC\u10E2\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8\u10D0 \u10D4\u10E0\u10D7-\u10D4\u10E0\u10D7\u10D8 ${l(i.values,"|")}-\u10D3\u10D0\u10DC`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${i.origin??"\u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0"} ${o.verb} ${t}${i.maximum.toString()} ${o.unit}`:`\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${i.origin??"\u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0"} \u10D8\u10E7\u10DD\u10E1 ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${i.origin} ${o.verb} ${t}${i.minimum.toString()} ${o.unit}`:`\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ${i.origin} \u10D8\u10E7\u10DD\u10E1 ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10EC\u10E7\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 "${t.prefix}"-\u10D8\u10D7`:t.format==="ends_with"?`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10DB\u10D7\u10D0\u10D5\u10E0\u10D3\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 "${t.suffix}"-\u10D8\u10D7`:t.format==="includes"?`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1 "${t.includes}"-\u10E1`:t.format==="regex"?`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D4\u10E1\u10D0\u10D1\u10D0\u10DB\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 \u10E8\u10D0\u10D1\u10DA\u10DD\u10DC\u10E1 ${t.pattern}`:`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 ${n[t.format]??i.format}`}case"not_multiple_of":return`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E0\u10D8\u10EA\u10EE\u10D5\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10E7\u10DD\u10E1 ${i.divisor}-\u10D8\u10E1 \u10EF\u10D4\u10E0\u10D0\u10D3\u10D8`;case"unrecognized_keys":return`\u10E3\u10EA\u10DC\u10DD\u10D1\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1${i.keys.length>1?"\u10D4\u10D1\u10D8":"\u10D8"}: ${l(i.keys,", ")}`;case"invalid_key":return`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1\u10D8 ${i.origin}-\u10E8\u10D8`;case"invalid_union":return"\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0";case"invalid_element":return`\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0 ${i.origin}-\u10E8\u10D8`;default:return"\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0"}}};function qu(){return{localeError:gd()}}var vd=()=>{let e={string:{unit:"\u178F\u17BD\u17A2\u1780\u17D2\u179F\u179A",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},file:{unit:"\u1794\u17C3",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},array:{unit:"\u1792\u17B6\u178F\u17BB",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},set:{unit:"\u1792\u17B6\u178F\u17BB",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"\u1798\u17B7\u1793\u1798\u17C2\u1793\u1787\u17B6\u179B\u17C1\u1781 (NaN)":"\u179B\u17C1\u1781";case"object":{if(Array.isArray(t))return"\u17A2\u17B6\u179A\u17C1 (Array)";if(t===null)return"\u1782\u17D2\u1798\u17B6\u1793\u178F\u1798\u17D2\u179B\u17C3 (null)";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B",email:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793\u17A2\u17CA\u17B8\u1798\u17C2\u179B",url:"URL",emoji:"\u179F\u1789\u17D2\u1789\u17B6\u17A2\u17B6\u179A\u1798\u17D2\u1798\u178E\u17CD",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 \u1793\u17B7\u1784\u1798\u17C9\u17C4\u1784 ISO",date:"\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 ISO",time:"\u1798\u17C9\u17C4\u1784 ISO",duration:"\u179A\u1799\u17C8\u1796\u17C1\u179B ISO",ipv4:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",ipv6:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",cidrv4:"\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",cidrv6:"\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",base64:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64",base64url:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64url",json_string:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A JSON",e164:"\u179B\u17C1\u1781 E.164",jwt:"JWT",template_literal:"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B"};return t=>{switch(t.code){case"invalid_type":return`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${t.expected} \u1794\u17C9\u17BB\u1793\u17D2\u178F\u17C2\u1791\u1791\u17BD\u179B\u1794\u17B6\u1793 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${f(t.values[0])}`:`\u1787\u1798\u17D2\u179A\u17BE\u179F\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1787\u17B6\u1798\u17BD\u1799\u1780\u17D2\u1793\u17BB\u1784\u1785\u17C6\u178E\u17C4\u1798 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${t.origin??"\u178F\u1798\u17D2\u179B\u17C3"} ${o} ${t.maximum.toString()} ${a.unit??"\u1792\u17B6\u178F\u17BB"}`:`\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${t.origin??"\u178F\u1798\u17D2\u179B\u17C3"} ${o} ${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${t.origin} ${o} ${t.minimum.toString()} ${a.unit}`:`\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${t.origin} ${o} ${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1785\u17B6\u1794\u17CB\u1795\u17D2\u178F\u17BE\u1798\u178A\u17C4\u1799 "${o.prefix}"`:o.format==="ends_with"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1794\u1789\u17D2\u1785\u1794\u17CB\u178A\u17C4\u1799 "${o.suffix}"`:o.format==="includes"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1798\u17B6\u1793 "${o.includes}"`:o.format==="regex"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1795\u17D2\u1782\u17BC\u1795\u17D2\u1782\u1784\u1793\u17B9\u1784\u1791\u1798\u17D2\u179A\u1784\u17CB\u178A\u17C2\u179B\u1794\u17B6\u1793\u1780\u17C6\u178E\u178F\u17CB ${o.pattern}`:`\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u179B\u17C1\u1781\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1787\u17B6\u1796\u17A0\u17BB\u1782\u17BB\u178E\u1793\u17C3 ${t.divisor}`;case"unrecognized_keys":return`\u179A\u1780\u1783\u17BE\u1789\u179F\u17C4\u1798\u17B7\u1793\u179F\u17D2\u1782\u17B6\u179B\u17CB\u17D6 ${l(t.keys,", ")}`;case"invalid_key":return`\u179F\u17C4\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${t.origin}`;case"invalid_union":return"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C";case"invalid_element":return`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${t.origin}`;default:return"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C"}}};function Yt(){return{localeError:vd()}}function Hu(){return Yt()}var hd=()=>{let e={string:{unit:"\uBB38\uC790",verb:"to have"},file:{unit:"\uBC14\uC774\uD2B8",verb:"to have"},array:{unit:"\uAC1C",verb:"to have"},set:{unit:"\uAC1C",verb:"to have"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\uC785\uB825",email:"\uC774\uBA54\uC77C \uC8FC\uC18C",url:"URL",emoji:"\uC774\uBAA8\uC9C0",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \uB0A0\uC9DC\uC2DC\uAC04",date:"ISO \uB0A0\uC9DC",time:"ISO \uC2DC\uAC04",duration:"ISO \uAE30\uAC04",ipv4:"IPv4 \uC8FC\uC18C",ipv6:"IPv6 \uC8FC\uC18C",cidrv4:"IPv4 \uBC94\uC704",cidrv6:"IPv6 \uBC94\uC704",base64:"base64 \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",base64url:"base64url \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",json_string:"JSON \uBB38\uC790\uC5F4",e164:"E.164 \uBC88\uD638",jwt:"JWT",template_literal:"\uC785\uB825"};return t=>{switch(t.code){case"invalid_type":return`\uC798\uBABB\uB41C \uC785\uB825: \uC608\uC0C1 \uD0C0\uC785\uC740 ${t.expected}, \uBC1B\uC740 \uD0C0\uC785\uC740 ${n(t.input)}\uC785\uB2C8\uB2E4`;case"invalid_value":return t.values.length===1?`\uC798\uBABB\uB41C \uC785\uB825: \uAC12\uC740 ${f(t.values[0])} \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4`:`\uC798\uBABB\uB41C \uC635\uC158: ${l(t.values,"\uB610\uB294 ")} \uC911 \uD558\uB098\uC5EC\uC57C \uD569\uB2C8\uB2E4`;case"too_big":{let o=t.inclusive?"\uC774\uD558":"\uBBF8\uB9CC",a=o==="\uBBF8\uB9CC"?"\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4":"\uC5EC\uC57C \uD569\uB2C8\uB2E4",u=r(t.origin),s=u?.unit??"\uC694\uC18C";return u?`${t.origin??"\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${t.maximum.toString()}${s} ${o}${a}`:`${t.origin??"\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${t.maximum.toString()} ${o}${a}`}case"too_small":{let o=t.inclusive?"\uC774\uC0C1":"\uCD08\uACFC",a=o==="\uC774\uC0C1"?"\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4":"\uC5EC\uC57C \uD569\uB2C8\uB2E4",u=r(t.origin),s=u?.unit??"\uC694\uC18C";return u?`${t.origin??"\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${t.minimum.toString()}${s} ${o}${a}`:`${t.origin??"\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${t.minimum.toString()} ${o}${a}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${o.prefix}"(\uC73C)\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4`:o.format==="ends_with"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${o.suffix}"(\uC73C)\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4`:o.format==="includes"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${o.includes}"\uC744(\uB97C) \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4`:o.format==="regex"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \uC815\uADDC\uC2DD ${o.pattern} \uD328\uD134\uACFC \uC77C\uCE58\uD574\uC57C \uD569\uB2C8\uB2E4`:`\uC798\uBABB\uB41C ${i[o.format]??t.format}`}case"not_multiple_of":return`\uC798\uBABB\uB41C \uC22B\uC790: ${t.divisor}\uC758 \uBC30\uC218\uC5EC\uC57C \uD569\uB2C8\uB2E4`;case"unrecognized_keys":return`\uC778\uC2DD\uD560 \uC218 \uC5C6\uB294 \uD0A4: ${l(t.keys,", ")}`;case"invalid_key":return`\uC798\uBABB\uB41C \uD0A4: ${t.origin}`;case"invalid_union":return"\uC798\uBABB\uB41C \uC785\uB825";case"invalid_element":return`\uC798\uBABB\uB41C \uAC12: ${t.origin}`;default:return"\uC798\uBABB\uB41C \uC785\uB825"}}};function Yu(){return{localeError:hd()}}var $d=e=>Ye(typeof e,e),Ye=(e,r=void 0)=>{switch(e){case"number":return Number.isNaN(r)?"NaN":"skai\u010Dius";case"bigint":return"sveikasis skai\u010Dius";case"string":return"eilut\u0117";case"boolean":return"login\u0117 reik\u0161m\u0117";case"undefined":case"void":return"neapibr\u0117\u017Eta reik\u0161m\u0117";case"function":return"funkcija";case"symbol":return"simbolis";case"object":return r===void 0?"ne\u017Einomas objektas":r===null?"nulin\u0117 reik\u0161m\u0117":Array.isArray(r)?"masyvas":Object.getPrototypeOf(r)!==Object.prototype&&r.constructor?r.constructor.name:"objektas";case"null":return"nulin\u0117 reik\u0161m\u0117"}return e},He=e=>e.charAt(0).toUpperCase()+e.slice(1);function Qu(e){let r=Math.abs(e),n=r%10,i=r%100;return i>=11&&i<=19||n===0?"many":n===1?"one":"few"}var _d=()=>{let e={string:{unit:{one:"simbolis",few:"simboliai",many:"simboli\u0173"},verb:{smaller:{inclusive:"turi b\u016Bti ne ilgesn\u0117 kaip",notInclusive:"turi b\u016Bti trumpesn\u0117 kaip"},bigger:{inclusive:"turi b\u016Bti ne trumpesn\u0117 kaip",notInclusive:"turi b\u016Bti ilgesn\u0117 kaip"}}},file:{unit:{one:"baitas",few:"baitai",many:"bait\u0173"},verb:{smaller:{inclusive:"turi b\u016Bti ne didesnis kaip",notInclusive:"turi b\u016Bti ma\u017Eesnis kaip"},bigger:{inclusive:"turi b\u016Bti ne ma\u017Eesnis kaip",notInclusive:"turi b\u016Bti didesnis kaip"}}},array:{unit:{one:"element\u0105",few:"elementus",many:"element\u0173"},verb:{smaller:{inclusive:"turi tur\u0117ti ne daugiau kaip",notInclusive:"turi tur\u0117ti ma\u017Eiau kaip"},bigger:{inclusive:"turi tur\u0117ti ne ma\u017Eiau kaip",notInclusive:"turi tur\u0117ti daugiau kaip"}}},set:{unit:{one:"element\u0105",few:"elementus",many:"element\u0173"},verb:{smaller:{inclusive:"turi tur\u0117ti ne daugiau kaip",notInclusive:"turi tur\u0117ti ma\u017Eiau kaip"},bigger:{inclusive:"turi tur\u0117ti ne ma\u017Eiau kaip",notInclusive:"turi tur\u0117ti daugiau kaip"}}}};function r(i,t,o,a){let u=e[i]??null;return u===null?u:{unit:u.unit[t],verb:u.verb[a][o?"inclusive":"notInclusive"]}}let n={regex:"\u012Fvestis",email:"el. pa\u0161to adresas",url:"URL",emoji:"jaustukas",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO data ir laikas",date:"ISO data",time:"ISO laikas",duration:"ISO trukm\u0117",ipv4:"IPv4 adresas",ipv6:"IPv6 adresas",cidrv4:"IPv4 tinklo prefiksas (CIDR)",cidrv6:"IPv6 tinklo prefiksas (CIDR)",base64:"base64 u\u017Ekoduota eilut\u0117",base64url:"base64url u\u017Ekoduota eilut\u0117",json_string:"JSON eilut\u0117",e164:"E.164 numeris",jwt:"JWT",template_literal:"\u012Fvestis"};return i=>{switch(i.code){case"invalid_type":return`Gautas tipas ${$d(i.input)}, o tik\u0117tasi - ${Ye(i.expected)}`;case"invalid_value":return i.values.length===1?`Privalo b\u016Bti ${f(i.values[0])}`:`Privalo b\u016Bti vienas i\u0161 ${l(i.values,"|")} pasirinkim\u0173`;case"too_big":{let t=Ye(i.origin),o=r(i.origin,Qu(Number(i.maximum)),i.inclusive??!1,"smaller");if(o?.verb)return`${He(t??i.origin??"reik\u0161m\u0117")} ${o.verb} ${i.maximum.toString()} ${o.unit??"element\u0173"}`;let a=i.inclusive?"ne didesnis kaip":"ma\u017Eesnis kaip";return`${He(t??i.origin??"reik\u0161m\u0117")} turi b\u016Bti ${a} ${i.maximum.toString()} ${o?.unit}`}case"too_small":{let t=Ye(i.origin),o=r(i.origin,Qu(Number(i.minimum)),i.inclusive??!1,"bigger");if(o?.verb)return`${He(t??i.origin??"reik\u0161m\u0117")} ${o.verb} ${i.minimum.toString()} ${o.unit??"element\u0173"}`;let a=i.inclusive?"ne ma\u017Eesnis kaip":"didesnis kaip";return`${He(t??i.origin??"reik\u0161m\u0117")} turi b\u016Bti ${a} ${i.minimum.toString()} ${o?.unit}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`Eilut\u0117 privalo prasid\u0117ti "${t.prefix}"`:t.format==="ends_with"?`Eilut\u0117 privalo pasibaigti "${t.suffix}"`:t.format==="includes"?`Eilut\u0117 privalo \u012Ftraukti "${t.includes}"`:t.format==="regex"?`Eilut\u0117 privalo atitikti ${t.pattern}`:`Neteisingas ${n[t.format]??i.format}`}case"not_multiple_of":return`Skai\u010Dius privalo b\u016Bti ${i.divisor} kartotinis.`;case"unrecognized_keys":return`Neatpa\u017Eint${i.keys.length>1?"i":"as"} rakt${i.keys.length>1?"ai":"as"}: ${l(i.keys,", ")}`;case"invalid_key":return"Rastas klaidingas raktas";case"invalid_union":return"Klaidinga \u012Fvestis";case"invalid_element":{let t=Ye(i.origin);return`${He(t??i.origin??"reik\u0161m\u0117")} turi klaiding\u0105 \u012Fvest\u012F`}default:return"Klaidinga \u012Fvestis"}}};function ec(){return{localeError:_d()}}var bd=()=>{let e={string:{unit:"\u0437\u043D\u0430\u0446\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},file:{unit:"\u0431\u0430\u0458\u0442\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},array:{unit:"\u0441\u0442\u0430\u0432\u043A\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},set:{unit:"\u0441\u0442\u0430\u0432\u043A\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0431\u0440\u043E\u0458";case"object":{if(Array.isArray(t))return"\u043D\u0438\u0437\u0430";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0432\u043D\u0435\u0441",email:"\u0430\u0434\u0440\u0435\u0441\u0430 \u043D\u0430 \u0435-\u043F\u043E\u0448\u0442\u0430",url:"URL",emoji:"\u0435\u043C\u043E\u045F\u0438",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0443\u043C \u0438 \u0432\u0440\u0435\u043C\u0435",date:"ISO \u0434\u0430\u0442\u0443\u043C",time:"ISO \u0432\u0440\u0435\u043C\u0435",duration:"ISO \u0432\u0440\u0435\u043C\u0435\u0442\u0440\u0430\u0435\u045A\u0435",ipv4:"IPv4 \u0430\u0434\u0440\u0435\u0441\u0430",ipv6:"IPv6 \u0430\u0434\u0440\u0435\u0441\u0430",cidrv4:"IPv4 \u043E\u043F\u0441\u0435\u0433",cidrv6:"IPv6 \u043E\u043F\u0441\u0435\u0433",base64:"base64-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",base64url:"base64url-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",json_string:"JSON \u043D\u0438\u0437\u0430",e164:"E.164 \u0431\u0440\u043E\u0458",jwt:"JWT",template_literal:"\u0432\u043D\u0435\u0441"};return t=>{switch(t.code){case"invalid_type":return`\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${t.expected}, \u043F\u0440\u0438\u043C\u0435\u043D\u043E ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Invalid input: expected ${f(t.values[0])}`:`\u0413\u0440\u0435\u0448\u0430\u043D\u0430 \u043E\u043F\u0446\u0438\u0458\u0430: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 \u0435\u0434\u043D\u0430 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${t.origin??"\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0438\u043C\u0430 ${o}${t.maximum.toString()} ${a.unit??"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438"}`:`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${t.origin??"\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0431\u0438\u0434\u0435 ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${t.origin} \u0434\u0430 \u0438\u043C\u0430 ${o}${t.minimum.toString()} ${a.unit}`:`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${t.origin} \u0434\u0430 \u0431\u0438\u0434\u0435 ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0443\u0432\u0430 \u0441\u043E "${o.prefix}"`:o.format==="ends_with"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u0432\u0440\u0448\u0443\u0432\u0430 \u0441\u043E "${o.suffix}"`:o.format==="includes"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0432\u043A\u043B\u0443\u0447\u0443\u0432\u0430 "${o.includes}"`:o.format==="regex"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u043E\u0434\u0433\u043E\u0430\u0440\u0430 \u043D\u0430 \u043F\u0430\u0442\u0435\u0440\u043D\u043E\u0442 ${o.pattern}`:`Invalid ${i[o.format]??t.format}`}case"not_multiple_of":return`\u0413\u0440\u0435\u0448\u0435\u043D \u0431\u0440\u043E\u0458: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0434\u0435\u043B\u0438\u0432 \u0441\u043E ${t.divisor}`;case"unrecognized_keys":return`${t.keys.length>1?"\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D\u0438 \u043A\u043B\u0443\u0447\u0435\u0432\u0438":"\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D \u043A\u043B\u0443\u0447"}: ${l(t.keys,", ")}`;case"invalid_key":return`\u0413\u0440\u0435\u0448\u0435\u043D \u043A\u043B\u0443\u0447 \u0432\u043E ${t.origin}`;case"invalid_union":return"\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441";case"invalid_element":return`\u0413\u0440\u0435\u0448\u043D\u0430 \u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442 \u0432\u043E ${t.origin}`;default:return"\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441"}}};function tc(){return{localeError:bd()}}var yd=()=>{let e={string:{unit:"aksara",verb:"mempunyai"},file:{unit:"bait",verb:"mempunyai"},array:{unit:"elemen",verb:"mempunyai"},set:{unit:"elemen",verb:"mempunyai"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"nombor";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"input",email:"alamat e-mel",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"tarikh masa ISO",date:"tarikh ISO",time:"masa ISO",duration:"tempoh ISO",ipv4:"alamat IPv4",ipv6:"alamat IPv6",cidrv4:"julat IPv4",cidrv6:"julat IPv6",base64:"string dikodkan base64",base64url:"string dikodkan base64url",json_string:"string JSON",e164:"nombor E.164",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`Input tidak sah: dijangka ${t.expected}, diterima ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Input tidak sah: dijangka ${f(t.values[0])}`:`Pilihan tidak sah: dijangka salah satu daripada ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Terlalu besar: dijangka ${t.origin??"nilai"} ${a.verb} ${o}${t.maximum.toString()} ${a.unit??"elemen"}`:`Terlalu besar: dijangka ${t.origin??"nilai"} adalah ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Terlalu kecil: dijangka ${t.origin} ${a.verb} ${o}${t.minimum.toString()} ${a.unit}`:`Terlalu kecil: dijangka ${t.origin} adalah ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`String tidak sah: mesti bermula dengan "${o.prefix}"`:o.format==="ends_with"?`String tidak sah: mesti berakhir dengan "${o.suffix}"`:o.format==="includes"?`String tidak sah: mesti mengandungi "${o.includes}"`:o.format==="regex"?`String tidak sah: mesti sepadan dengan corak ${o.pattern}`:`${i[o.format]??t.format} tidak sah`}case"not_multiple_of":return`Nombor tidak sah: perlu gandaan ${t.divisor}`;case"unrecognized_keys":return`Kunci tidak dikenali: ${l(t.keys,", ")}`;case"invalid_key":return`Kunci tidak sah dalam ${t.origin}`;case"invalid_union":return"Input tidak sah";case"invalid_element":return`Nilai tidak sah dalam ${t.origin}`;default:return"Input tidak sah"}}};function rc(){return{localeError:yd()}}var xd=()=>{let e={string:{unit:"tekens"},file:{unit:"bytes"},array:{unit:"elementen"},set:{unit:"elementen"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"getal";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"invoer",email:"emailadres",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datum en tijd",date:"ISO datum",time:"ISO tijd",duration:"ISO duur",ipv4:"IPv4-adres",ipv6:"IPv6-adres",cidrv4:"IPv4-bereik",cidrv6:"IPv6-bereik",base64:"base64-gecodeerde tekst",base64url:"base64 URL-gecodeerde tekst",json_string:"JSON string",e164:"E.164-nummer",jwt:"JWT",template_literal:"invoer"};return t=>{switch(t.code){case"invalid_type":return`Ongeldige invoer: verwacht ${t.expected}, ontving ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Ongeldige invoer: verwacht ${f(t.values[0])}`:`Ongeldige optie: verwacht \xE9\xE9n van ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Te lang: verwacht dat ${t.origin??"waarde"} ${o}${t.maximum.toString()} ${a.unit??"elementen"} bevat`:`Te lang: verwacht dat ${t.origin??"waarde"} ${o}${t.maximum.toString()} is`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Te kort: verwacht dat ${t.origin} ${o}${t.minimum.toString()} ${a.unit} bevat`:`Te kort: verwacht dat ${t.origin} ${o}${t.minimum.toString()} is`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Ongeldige tekst: moet met "${o.prefix}" beginnen`:o.format==="ends_with"?`Ongeldige tekst: moet op "${o.suffix}" eindigen`:o.format==="includes"?`Ongeldige tekst: moet "${o.includes}" bevatten`:o.format==="regex"?`Ongeldige tekst: moet overeenkomen met patroon ${o.pattern}`:`Ongeldig: ${i[o.format]??t.format}`}case"not_multiple_of":return`Ongeldig getal: moet een veelvoud van ${t.divisor} zijn`;case"unrecognized_keys":return`Onbekende key${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`Ongeldige key in ${t.origin}`;case"invalid_union":return"Ongeldige invoer";case"invalid_element":return`Ongeldige waarde in ${t.origin}`;default:return"Ongeldige invoer"}}};function nc(){return{localeError:xd()}}var kd=()=>{let e={string:{unit:"tegn",verb:"\xE5 ha"},file:{unit:"bytes",verb:"\xE5 ha"},array:{unit:"elementer",verb:"\xE5 inneholde"},set:{unit:"elementer",verb:"\xE5 inneholde"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"tall";case"object":{if(Array.isArray(t))return"liste";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"input",email:"e-postadresse",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dato- og klokkeslett",date:"ISO-dato",time:"ISO-klokkeslett",duration:"ISO-varighet",ipv4:"IPv4-omr\xE5de",ipv6:"IPv6-omr\xE5de",cidrv4:"IPv4-spekter",cidrv6:"IPv6-spekter",base64:"base64-enkodet streng",base64url:"base64url-enkodet streng",json_string:"JSON-streng",e164:"E.164-nummer",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`Ugyldig input: forventet ${t.expected}, fikk ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Ugyldig verdi: forventet ${f(t.values[0])}`:`Ugyldig valg: forventet en av ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`For stor(t): forventet ${t.origin??"value"} til \xE5 ha ${o}${t.maximum.toString()} ${a.unit??"elementer"}`:`For stor(t): forventet ${t.origin??"value"} til \xE5 ha ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`For lite(n): forventet ${t.origin} til \xE5 ha ${o}${t.minimum.toString()} ${a.unit}`:`For lite(n): forventet ${t.origin} til \xE5 ha ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Ugyldig streng: m\xE5 starte med "${o.prefix}"`:o.format==="ends_with"?`Ugyldig streng: m\xE5 ende med "${o.suffix}"`:o.format==="includes"?`Ugyldig streng: m\xE5 inneholde "${o.includes}"`:o.format==="regex"?`Ugyldig streng: m\xE5 matche m\xF8nsteret ${o.pattern}`:`Ugyldig ${i[o.format]??t.format}`}case"not_multiple_of":return`Ugyldig tall: m\xE5 v\xE6re et multiplum av ${t.divisor}`;case"unrecognized_keys":return`${t.keys.length>1?"Ukjente n\xF8kler":"Ukjent n\xF8kkel"}: ${l(t.keys,", ")}`;case"invalid_key":return`Ugyldig n\xF8kkel i ${t.origin}`;case"invalid_union":return"Ugyldig input";case"invalid_element":return`Ugyldig verdi i ${t.origin}`;default:return"Ugyldig input"}}};function oc(){return{localeError:kd()}}var wd=()=>{let e={string:{unit:"harf",verb:"olmal\u0131d\u0131r"},file:{unit:"bayt",verb:"olmal\u0131d\u0131r"},array:{unit:"unsur",verb:"olmal\u0131d\u0131r"},set:{unit:"unsur",verb:"olmal\u0131d\u0131r"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"numara";case"object":{if(Array.isArray(t))return"saf";if(t===null)return"gayb";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"giren",email:"epostag\xE2h",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO heng\xE2m\u0131",date:"ISO tarihi",time:"ISO zaman\u0131",duration:"ISO m\xFCddeti",ipv4:"IPv4 ni\u015F\xE2n\u0131",ipv6:"IPv6 ni\u015F\xE2n\u0131",cidrv4:"IPv4 menzili",cidrv6:"IPv6 menzili",base64:"base64-\u015Fifreli metin",base64url:"base64url-\u015Fifreli metin",json_string:"JSON metin",e164:"E.164 say\u0131s\u0131",jwt:"JWT",template_literal:"giren"};return t=>{switch(t.code){case"invalid_type":return`F\xE2sit giren: umulan ${t.expected}, al\u0131nan ${n(t.input)}`;case"invalid_value":return t.values.length===1?`F\xE2sit giren: umulan ${f(t.values[0])}`:`F\xE2sit tercih: m\xFBteberler ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Fazla b\xFCy\xFCk: ${t.origin??"value"}, ${o}${t.maximum.toString()} ${a.unit??"elements"} sahip olmal\u0131yd\u0131.`:`Fazla b\xFCy\xFCk: ${t.origin??"value"}, ${o}${t.maximum.toString()} olmal\u0131yd\u0131.`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Fazla k\xFC\xE7\xFCk: ${t.origin}, ${o}${t.minimum.toString()} ${a.unit} sahip olmal\u0131yd\u0131.`:`Fazla k\xFC\xE7\xFCk: ${t.origin}, ${o}${t.minimum.toString()} olmal\u0131yd\u0131.`}case"invalid_format":{let o=t;return o.format==="starts_with"?`F\xE2sit metin: "${o.prefix}" ile ba\u015Flamal\u0131.`:o.format==="ends_with"?`F\xE2sit metin: "${o.suffix}" ile bitmeli.`:o.format==="includes"?`F\xE2sit metin: "${o.includes}" ihtiv\xE2 etmeli.`:o.format==="regex"?`F\xE2sit metin: ${o.pattern} nak\u015F\u0131na uymal\u0131.`:`F\xE2sit ${i[o.format]??t.format}`}case"not_multiple_of":return`F\xE2sit say\u0131: ${t.divisor} kat\u0131 olmal\u0131yd\u0131.`;case"unrecognized_keys":return`Tan\u0131nmayan anahtar ${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`${t.origin} i\xE7in tan\u0131nmayan anahtar var.`;case"invalid_union":return"Giren tan\u0131namad\u0131.";case"invalid_element":return`${t.origin} i\xE7in tan\u0131nmayan k\u0131ymet var.`;default:return"K\u0131ymet tan\u0131namad\u0131."}}};function ic(){return{localeError:wd()}}var zd=()=>{let e={string:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"},file:{unit:"\u0628\u0627\u06CC\u067C\u0633",verb:"\u0648\u0644\u0631\u064A"},array:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"},set:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0639\u062F\u062F";case"object":{if(Array.isArray(t))return"\u0627\u0631\u06D0";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0648\u0631\u0648\u062F\u064A",email:"\u0628\u0631\u06CC\u069A\u0646\u0627\u0644\u06CC\u06A9",url:"\u06CC\u0648 \u0622\u0631 \u0627\u0644",emoji:"\u0627\u06CC\u0645\u0648\u062C\u064A",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0646\u06CC\u067C\u0647 \u0627\u0648 \u0648\u062E\u062A",date:"\u0646\u06D0\u067C\u0647",time:"\u0648\u062E\u062A",duration:"\u0645\u0648\u062F\u0647",ipv4:"\u062F IPv4 \u067E\u062A\u0647",ipv6:"\u062F IPv6 \u067E\u062A\u0647",cidrv4:"\u062F IPv4 \u0633\u0627\u062D\u0647",cidrv6:"\u062F IPv6 \u0633\u0627\u062D\u0647",base64:"base64-encoded \u0645\u062A\u0646",base64url:"base64url-encoded \u0645\u062A\u0646",json_string:"JSON \u0645\u062A\u0646",e164:"\u062F E.164 \u0634\u0645\u06D0\u0631\u0647",jwt:"JWT",template_literal:"\u0648\u0631\u0648\u062F\u064A"};return t=>{switch(t.code){case"invalid_type":return`\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${t.expected} \u0648\u0627\u06CC, \u0645\u06AB\u0631 ${n(t.input)} \u062A\u0631\u0644\u0627\u0633\u0647 \u0634\u0648`;case"invalid_value":return t.values.length===1?`\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${f(t.values[0])} \u0648\u0627\u06CC`:`\u0646\u0627\u0633\u0645 \u0627\u0646\u062A\u062E\u0627\u0628: \u0628\u0627\u06CC\u062F \u06CC\u0648 \u0644\u0647 ${l(t.values,"|")} \u0685\u062E\u0647 \u0648\u0627\u06CC`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${t.origin??"\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${o}${t.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631\u0648\u0646\u0647"} \u0648\u0644\u0631\u064A`:`\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${t.origin??"\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${o}${t.maximum.toString()} \u0648\u064A`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${t.origin} \u0628\u0627\u06CC\u062F ${o}${t.minimum.toString()} ${a.unit} \u0648\u0644\u0631\u064A`:`\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${t.origin} \u0628\u0627\u06CC\u062F ${o}${t.minimum.toString()} \u0648\u064A`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${o.prefix}" \u0633\u0631\u0647 \u067E\u06CC\u0644 \u0634\u064A`:o.format==="ends_with"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${o.suffix}" \u0633\u0631\u0647 \u067E\u0627\u06CC \u062A\u0647 \u0648\u0631\u0633\u064A\u0696\u064A`:o.format==="includes"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F "${o.includes}" \u0648\u0644\u0631\u064A`:o.format==="regex"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F ${o.pattern} \u0633\u0631\u0647 \u0645\u0637\u0627\u0628\u0642\u062A \u0648\u0644\u0631\u064A`:`${i[o.format]??t.format} \u0646\u0627\u0633\u0645 \u062F\u06CC`}case"not_multiple_of":return`\u0646\u0627\u0633\u0645 \u0639\u062F\u062F: \u0628\u0627\u06CC\u062F \u062F ${t.divisor} \u0645\u0636\u0631\u0628 \u0648\u064A`;case"unrecognized_keys":return`\u0646\u0627\u0633\u0645 ${t.keys.length>1?"\u06A9\u0644\u06CC\u0689\u0648\u0646\u0647":"\u06A9\u0644\u06CC\u0689"}: ${l(t.keys,", ")}`;case"invalid_key":return`\u0646\u0627\u0633\u0645 \u06A9\u0644\u06CC\u0689 \u067E\u0647 ${t.origin} \u06A9\u06D0`;case"invalid_union":return"\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A";case"invalid_element":return`\u0646\u0627\u0633\u0645 \u0639\u0646\u0635\u0631 \u067E\u0647 ${t.origin} \u06A9\u06D0`;default:return"\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A"}}};function ac(){return{localeError:zd()}}var Id=()=>{let e={string:{unit:"znak\xF3w",verb:"mie\u0107"},file:{unit:"bajt\xF3w",verb:"mie\u0107"},array:{unit:"element\xF3w",verb:"mie\u0107"},set:{unit:"element\xF3w",verb:"mie\u0107"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"liczba";case"object":{if(Array.isArray(t))return"tablica";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"wyra\u017Cenie",email:"adres email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data i godzina w formacie ISO",date:"data w formacie ISO",time:"godzina w formacie ISO",duration:"czas trwania ISO",ipv4:"adres IPv4",ipv6:"adres IPv6",cidrv4:"zakres IPv4",cidrv6:"zakres IPv6",base64:"ci\u0105g znak\xF3w zakodowany w formacie base64",base64url:"ci\u0105g znak\xF3w zakodowany w formacie base64url",json_string:"ci\u0105g znak\xF3w w formacie JSON",e164:"liczba E.164",jwt:"JWT",template_literal:"wej\u015Bcie"};return t=>{switch(t.code){case"invalid_type":return`Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${t.expected}, otrzymano ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${f(t.values[0])}`:`Nieprawid\u0142owa opcja: oczekiwano jednej z warto\u015Bci ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Za du\u017Ca warto\u015B\u0107: oczekiwano, \u017Ce ${t.origin??"warto\u015B\u0107"} b\u0119dzie mie\u0107 ${o}${t.maximum.toString()} ${a.unit??"element\xF3w"}`:`Zbyt du\u017C(y/a/e): oczekiwano, \u017Ce ${t.origin??"warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Za ma\u0142a warto\u015B\u0107: oczekiwano, \u017Ce ${t.origin??"warto\u015B\u0107"} b\u0119dzie mie\u0107 ${o}${t.minimum.toString()} ${a.unit??"element\xF3w"}`:`Zbyt ma\u0142(y/a/e): oczekiwano, \u017Ce ${t.origin??"warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zaczyna\u0107 si\u0119 od "${o.prefix}"`:o.format==="ends_with"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi ko\u0144czy\u0107 si\u0119 na "${o.suffix}"`:o.format==="includes"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zawiera\u0107 "${o.includes}"`:o.format==="regex"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi odpowiada\u0107 wzorcowi ${o.pattern}`:`Nieprawid\u0142ow(y/a/e) ${i[o.format]??t.format}`}case"not_multiple_of":return`Nieprawid\u0142owa liczba: musi by\u0107 wielokrotno\u015Bci\u0105 ${t.divisor}`;case"unrecognized_keys":return`Nierozpoznane klucze${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`Nieprawid\u0142owy klucz w ${t.origin}`;case"invalid_union":return"Nieprawid\u0142owe dane wej\u015Bciowe";case"invalid_element":return`Nieprawid\u0142owa warto\u015B\u0107 w ${t.origin}`;default:return"Nieprawid\u0142owe dane wej\u015Bciowe"}}};function uc(){return{localeError:Id()}}var Sd=()=>{let e={string:{unit:"caracteres",verb:"ter"},file:{unit:"bytes",verb:"ter"},array:{unit:"itens",verb:"ter"},set:{unit:"itens",verb:"ter"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"n\xFAmero";case"object":{if(Array.isArray(t))return"array";if(t===null)return"nulo";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"padr\xE3o",email:"endere\xE7o de e-mail",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data e hora ISO",date:"data ISO",time:"hora ISO",duration:"dura\xE7\xE3o ISO",ipv4:"endere\xE7o IPv4",ipv6:"endere\xE7o IPv6",cidrv4:"faixa de IPv4",cidrv6:"faixa de IPv6",base64:"texto codificado em base64",base64url:"URL codificada em base64",json_string:"texto JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return t=>{switch(t.code){case"invalid_type":return`Tipo inv\xE1lido: esperado ${t.expected}, recebido ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Entrada inv\xE1lida: esperado ${f(t.values[0])}`:`Op\xE7\xE3o inv\xE1lida: esperada uma das ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Muito grande: esperado que ${t.origin??"valor"} tivesse ${o}${t.maximum.toString()} ${a.unit??"elementos"}`:`Muito grande: esperado que ${t.origin??"valor"} fosse ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Muito pequeno: esperado que ${t.origin} tivesse ${o}${t.minimum.toString()} ${a.unit}`:`Muito pequeno: esperado que ${t.origin} fosse ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Texto inv\xE1lido: deve come\xE7ar com "${o.prefix}"`:o.format==="ends_with"?`Texto inv\xE1lido: deve terminar com "${o.suffix}"`:o.format==="includes"?`Texto inv\xE1lido: deve incluir "${o.includes}"`:o.format==="regex"?`Texto inv\xE1lido: deve corresponder ao padr\xE3o ${o.pattern}`:`${i[o.format]??t.format} inv\xE1lido`}case"not_multiple_of":return`N\xFAmero inv\xE1lido: deve ser m\xFAltiplo de ${t.divisor}`;case"unrecognized_keys":return`Chave${t.keys.length>1?"s":""} desconhecida${t.keys.length>1?"s":""}: ${l(t.keys,", ")}`;case"invalid_key":return`Chave inv\xE1lida em ${t.origin}`;case"invalid_union":return"Entrada inv\xE1lida";case"invalid_element":return`Valor inv\xE1lido em ${t.origin}`;default:return"Campo inv\xE1lido"}}};function cc(){return{localeError:Sd()}}function sc(e,r,n,i){let t=Math.abs(e),o=t%10,a=t%100;return a>=11&&a<=19?i:o===1?r:o>=2&&o<=4?n:i}var jd=()=>{let e={string:{unit:{one:"\u0441\u0438\u043C\u0432\u043E\u043B",few:"\u0441\u0438\u043C\u0432\u043E\u043B\u0430",many:"\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"},file:{unit:{one:"\u0431\u0430\u0439\u0442",few:"\u0431\u0430\u0439\u0442\u0430",many:"\u0431\u0430\u0439\u0442"},verb:"\u0438\u043C\u0435\u0442\u044C"},array:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"},set:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0447\u0438\u0441\u043B\u043E";case"object":{if(Array.isArray(t))return"\u043C\u0430\u0441\u0441\u0438\u0432";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0432\u0432\u043E\u0434",email:"email \u0430\u0434\u0440\u0435\u0441",url:"URL",emoji:"\u044D\u043C\u043E\u0434\u0437\u0438",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043C\u044F",date:"ISO \u0434\u0430\u0442\u0430",time:"ISO \u0432\u0440\u0435\u043C\u044F",duration:"ISO \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C",ipv4:"IPv4 \u0430\u0434\u0440\u0435\u0441",ipv6:"IPv6 \u0430\u0434\u0440\u0435\u0441",cidrv4:"IPv4 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",cidrv6:"IPv6 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",base64:"\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64",base64url:"\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64url",json_string:"JSON \u0441\u0442\u0440\u043E\u043A\u0430",e164:"\u043D\u043E\u043C\u0435\u0440 E.164",jwt:"JWT",template_literal:"\u0432\u0432\u043E\u0434"};return t=>{switch(t.code){case"invalid_type":return`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${t.expected}, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${f(t.values[0])}`:`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0434\u043D\u043E \u0438\u0437 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);if(a){let u=Number(t.maximum),s=sc(u,a.unit.one,a.unit.few,a.unit.many);return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${o}${t.maximum.toString()} ${s}`}return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);if(a){let u=Number(t.minimum),s=sc(u,a.unit.one,a.unit.few,a.unit.many);return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${t.origin} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${o}${t.minimum.toString()} ${s}`}return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${t.origin} \u0431\u0443\u0434\u0435\u0442 ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u0442\u044C\u0441\u044F \u0441 "${o.prefix}"`:o.format==="ends_with"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 "${o.suffix}"`:o.format==="includes"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C "${o.includes}"`:o.format==="regex"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${o.pattern}`:`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${t.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043D\u043D${t.keys.length>1?"\u044B\u0435":"\u044B\u0439"} \u043A\u043B\u044E\u0447${t.keys.length>1?"\u0438":""}: ${l(t.keys,", ")}`;case"invalid_key":return`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043A\u043B\u044E\u0447 \u0432 ${t.origin}`;case"invalid_union":return"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435";case"invalid_element":return`\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 ${t.origin}`;default:return"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435"}}};function lc(){return{localeError:jd()}}var Od=()=>{let e={string:{unit:"znakov",verb:"imeti"},file:{unit:"bajtov",verb:"imeti"},array:{unit:"elementov",verb:"imeti"},set:{unit:"elementov",verb:"imeti"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0161tevilo";case"object":{if(Array.isArray(t))return"tabela";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"vnos",email:"e-po\u0161tni naslov",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datum in \u010Das",date:"ISO datum",time:"ISO \u010Das",duration:"ISO trajanje",ipv4:"IPv4 naslov",ipv6:"IPv6 naslov",cidrv4:"obseg IPv4",cidrv6:"obseg IPv6",base64:"base64 kodiran niz",base64url:"base64url kodiran niz",json_string:"JSON niz",e164:"E.164 \u0161tevilka",jwt:"JWT",template_literal:"vnos"};return t=>{switch(t.code){case"invalid_type":return`Neveljaven vnos: pri\u010Dakovano ${t.expected}, prejeto ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Neveljaven vnos: pri\u010Dakovano ${f(t.values[0])}`:`Neveljavna mo\u017Enost: pri\u010Dakovano eno izmed ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Preveliko: pri\u010Dakovano, da bo ${t.origin??"vrednost"} imelo ${o}${t.maximum.toString()} ${a.unit??"elementov"}`:`Preveliko: pri\u010Dakovano, da bo ${t.origin??"vrednost"} ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Premajhno: pri\u010Dakovano, da bo ${t.origin} imelo ${o}${t.minimum.toString()} ${a.unit}`:`Premajhno: pri\u010Dakovano, da bo ${t.origin} ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Neveljaven niz: mora se za\u010Deti z "${o.prefix}"`:o.format==="ends_with"?`Neveljaven niz: mora se kon\u010Dati z "${o.suffix}"`:o.format==="includes"?`Neveljaven niz: mora vsebovati "${o.includes}"`:o.format==="regex"?`Neveljaven niz: mora ustrezati vzorcu ${o.pattern}`:`Neveljaven ${i[o.format]??t.format}`}case"not_multiple_of":return`Neveljavno \u0161tevilo: mora biti ve\u010Dkratnik ${t.divisor}`;case"unrecognized_keys":return`Neprepoznan${t.keys.length>1?"i klju\u010Di":" klju\u010D"}: ${l(t.keys,", ")}`;case"invalid_key":return`Neveljaven klju\u010D v ${t.origin}`;case"invalid_union":return"Neveljaven vnos";case"invalid_element":return`Neveljavna vrednost v ${t.origin}`;default:return"Neveljaven vnos"}}};function dc(){return{localeError:Od()}}var Pd=()=>{let e={string:{unit:"tecken",verb:"att ha"},file:{unit:"bytes",verb:"att ha"},array:{unit:"objekt",verb:"att inneh\xE5lla"},set:{unit:"objekt",verb:"att inneh\xE5lla"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"antal";case"object":{if(Array.isArray(t))return"lista";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"regulj\xE4rt uttryck",email:"e-postadress",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-datum och tid",date:"ISO-datum",time:"ISO-tid",duration:"ISO-varaktighet",ipv4:"IPv4-intervall",ipv6:"IPv6-intervall",cidrv4:"IPv4-spektrum",cidrv6:"IPv6-spektrum",base64:"base64-kodad str\xE4ng",base64url:"base64url-kodad str\xE4ng",json_string:"JSON-str\xE4ng",e164:"E.164-nummer",jwt:"JWT",template_literal:"mall-literal"};return t=>{switch(t.code){case"invalid_type":return`Ogiltig inmatning: f\xF6rv\xE4ntat ${t.expected}, fick ${n(t.input)}`;case"invalid_value":return t.values.length===1?`Ogiltig inmatning: f\xF6rv\xE4ntat ${f(t.values[0])}`:`Ogiltigt val: f\xF6rv\xE4ntade en av ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`F\xF6r stor(t): f\xF6rv\xE4ntade ${t.origin??"v\xE4rdet"} att ha ${o}${t.maximum.toString()} ${a.unit??"element"}`:`F\xF6r stor(t): f\xF6rv\xE4ntat ${t.origin??"v\xE4rdet"} att ha ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`F\xF6r lite(t): f\xF6rv\xE4ntade ${t.origin??"v\xE4rdet"} att ha ${o}${t.minimum.toString()} ${a.unit}`:`F\xF6r lite(t): f\xF6rv\xE4ntade ${t.origin??"v\xE4rdet"} att ha ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Ogiltig str\xE4ng: m\xE5ste b\xF6rja med "${o.prefix}"`:o.format==="ends_with"?`Ogiltig str\xE4ng: m\xE5ste sluta med "${o.suffix}"`:o.format==="includes"?`Ogiltig str\xE4ng: m\xE5ste inneh\xE5lla "${o.includes}"`:o.format==="regex"?`Ogiltig str\xE4ng: m\xE5ste matcha m\xF6nstret "${o.pattern}"`:`Ogiltig(t) ${i[o.format]??t.format}`}case"not_multiple_of":return`Ogiltigt tal: m\xE5ste vara en multipel av ${t.divisor}`;case"unrecognized_keys":return`${t.keys.length>1?"Ok\xE4nda nycklar":"Ok\xE4nd nyckel"}: ${l(t.keys,", ")}`;case"invalid_key":return`Ogiltig nyckel i ${t.origin??"v\xE4rdet"}`;case"invalid_union":return"Ogiltig input";case"invalid_element":return`Ogiltigt v\xE4rde i ${t.origin??"v\xE4rdet"}`;default:return"Ogiltig input"}}};function mc(){return{localeError:Pd()}}var Ud=()=>{let e={string:{unit:"\u0B8E\u0BB4\u0BC1\u0BA4\u0BCD\u0BA4\u0BC1\u0B95\u0BCD\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},file:{unit:"\u0BAA\u0BC8\u0B9F\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},array:{unit:"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},set:{unit:"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"\u0B8E\u0BA3\u0BCD \u0B85\u0BB2\u0BCD\u0BB2\u0BBE\u0BA4\u0BA4\u0BC1":"\u0B8E\u0BA3\u0BCD";case"object":{if(Array.isArray(t))return"\u0B85\u0BA3\u0BBF";if(t===null)return"\u0BB5\u0BC6\u0BB1\u0BC1\u0BAE\u0BC8";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1",email:"\u0BAE\u0BBF\u0BA9\u0BCD\u0BA9\u0B9E\u0BCD\u0B9A\u0BB2\u0BCD \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0BA4\u0BC7\u0BA4\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",date:"ISO \u0BA4\u0BC7\u0BA4\u0BBF",time:"ISO \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",duration:"ISO \u0B95\u0BBE\u0BB2 \u0B85\u0BB3\u0BB5\u0BC1",ipv4:"IPv4 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",ipv6:"IPv6 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",cidrv4:"IPv4 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",cidrv6:"IPv6 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",base64:"base64-encoded \u0B9A\u0BB0\u0BAE\u0BCD",base64url:"base64url-encoded \u0B9A\u0BB0\u0BAE\u0BCD",json_string:"JSON \u0B9A\u0BB0\u0BAE\u0BCD",e164:"E.164 \u0B8E\u0BA3\u0BCD",jwt:"JWT",template_literal:"input"};return t=>{switch(t.code){case"invalid_type":return`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${t.expected}, \u0BAA\u0BC6\u0BB1\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${f(t.values[0])}`:`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0BB0\u0BC1\u0BAA\u0BCD\u0BAA\u0BAE\u0BCD: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${l(t.values,"|")} \u0B87\u0BB2\u0BCD \u0B92\u0BA9\u0BCD\u0BB1\u0BC1`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${t.origin??"\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${o}${t.maximum.toString()} ${a.unit??"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD"} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${t.origin??"\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${o}${t.maximum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${t.origin} ${o}${t.minimum.toString()} ${a.unit} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${t.origin} ${o}${t.minimum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${o.prefix}" \u0B87\u0BB2\u0BCD \u0BA4\u0BCA\u0B9F\u0B99\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:o.format==="ends_with"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${o.suffix}" \u0B87\u0BB2\u0BCD \u0BAE\u0BC1\u0B9F\u0BBF\u0BB5\u0B9F\u0BC8\u0BAF \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:o.format==="includes"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${o.includes}" \u0B90 \u0B89\u0BB3\u0BCD\u0BB3\u0B9F\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:o.format==="regex"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: ${o.pattern} \u0BAE\u0BC1\u0BB1\u0BC8\u0BAA\u0BBE\u0B9F\u0BCD\u0B9F\u0BC1\u0B9F\u0BA9\u0BCD \u0BAA\u0BCA\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B8E\u0BA3\u0BCD: ${t.divisor} \u0B87\u0BA9\u0BCD \u0BAA\u0BB2\u0BAE\u0BBE\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;case"unrecognized_keys":return`\u0B85\u0B9F\u0BC8\u0BAF\u0BBE\u0BB3\u0BAE\u0BCD \u0BA4\u0BC6\u0BB0\u0BBF\u0BAF\u0BBE\u0BA4 \u0BB5\u0BBF\u0B9A\u0BC8${t.keys.length>1?"\u0B95\u0BB3\u0BCD":""}: ${l(t.keys,", ")}`;case"invalid_key":return`${t.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0B9A\u0BC8`;case"invalid_union":return"\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1";case"invalid_element":return`${t.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1`;default:return"\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1"}}};function pc(){return{localeError:Ud()}}var Nd=()=>{let e={string:{unit:"\u0E15\u0E31\u0E27\u0E2D\u0E31\u0E01\u0E29\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},file:{unit:"\u0E44\u0E1A\u0E15\u0E4C",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},array:{unit:"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},set:{unit:"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"\u0E44\u0E21\u0E48\u0E43\u0E0A\u0E48\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02 (NaN)":"\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02";case"object":{if(Array.isArray(t))return"\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E23\u0E22\u0E4C (Array)";if(t===null)return"\u0E44\u0E21\u0E48\u0E21\u0E35\u0E04\u0E48\u0E32 (null)";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19",email:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E2D\u0E35\u0E40\u0E21\u0E25",url:"URL",emoji:"\u0E2D\u0E34\u0E42\u0E21\u0E08\u0E34",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",date:"\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E41\u0E1A\u0E1A ISO",time:"\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",duration:"\u0E0A\u0E48\u0E27\u0E07\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",ipv4:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv4",ipv6:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv6",cidrv4:"\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv4",cidrv6:"\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv6",base64:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64",base64url:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64 \u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A URL",json_string:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A JSON",e164:"\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E42\u0E17\u0E23\u0E28\u0E31\u0E1E\u0E17\u0E4C\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28 (E.164)",jwt:"\u0E42\u0E17\u0E40\u0E04\u0E19 JWT",template_literal:"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19"};return t=>{switch(t.code){case"invalid_type":return`\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${t.expected} \u0E41\u0E15\u0E48\u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u0E04\u0E48\u0E32\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${f(t.values[0])}`:`\u0E15\u0E31\u0E27\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E43\u0E19 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"\u0E44\u0E21\u0E48\u0E40\u0E01\u0E34\u0E19":"\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32",a=r(t.origin);return a?`\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${t.origin??"\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${o} ${t.maximum.toString()} ${a.unit??"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23"}`:`\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${t.origin??"\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${o} ${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?"\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E19\u0E49\u0E2D\u0E22":"\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32",a=r(t.origin);return a?`\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${t.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${o} ${t.minimum.toString()} ${a.unit}`:`\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${t.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${o} ${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E02\u0E36\u0E49\u0E19\u0E15\u0E49\u0E19\u0E14\u0E49\u0E27\u0E22 "${o.prefix}"`:o.format==="ends_with"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E25\u0E07\u0E17\u0E49\u0E32\u0E22\u0E14\u0E49\u0E27\u0E22 "${o.suffix}"`:o.format==="includes"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E21\u0E35 "${o.includes}" \u0E2D\u0E22\u0E39\u0E48\u0E43\u0E19\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21`:o.format==="regex"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14 ${o.pattern}`:`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: ${i[o.format]??t.format}`}case"not_multiple_of":return`\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E33\u0E19\u0E27\u0E19\u0E17\u0E35\u0E48\u0E2B\u0E32\u0E23\u0E14\u0E49\u0E27\u0E22 ${t.divisor} \u0E44\u0E14\u0E49\u0E25\u0E07\u0E15\u0E31\u0E27`;case"unrecognized_keys":return`\u0E1E\u0E1A\u0E04\u0E35\u0E22\u0E4C\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E23\u0E39\u0E49\u0E08\u0E31\u0E01: ${l(t.keys,", ")}`;case"invalid_key":return`\u0E04\u0E35\u0E22\u0E4C\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${t.origin}`;case"invalid_union":return"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E44\u0E21\u0E48\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E22\u0E39\u0E40\u0E19\u0E35\u0E22\u0E19\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14\u0E44\u0E27\u0E49";case"invalid_element":return`\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${t.origin}`;default:return"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"}}};function fc(){return{localeError:Nd()}}var Zd=e=>{let r=typeof e;switch(r){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return r},Dd=()=>{let e={string:{unit:"karakter",verb:"olmal\u0131"},file:{unit:"bayt",verb:"olmal\u0131"},array:{unit:"\xF6\u011Fe",verb:"olmal\u0131"},set:{unit:"\xF6\u011Fe",verb:"olmal\u0131"}};function r(i){return e[i]??null}let n={regex:"girdi",email:"e-posta adresi",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO tarih ve saat",date:"ISO tarih",time:"ISO saat",duration:"ISO s\xFCre",ipv4:"IPv4 adresi",ipv6:"IPv6 adresi",cidrv4:"IPv4 aral\u0131\u011F\u0131",cidrv6:"IPv6 aral\u0131\u011F\u0131",base64:"base64 ile \u015Fifrelenmi\u015F metin",base64url:"base64url ile \u015Fifrelenmi\u015F metin",json_string:"JSON dizesi",e164:"E.164 say\u0131s\u0131",jwt:"JWT",template_literal:"\u015Eablon dizesi"};return i=>{switch(i.code){case"invalid_type":return`Ge\xE7ersiz de\u011Fer: beklenen ${i.expected}, al\u0131nan ${Zd(i.input)}`;case"invalid_value":return i.values.length===1?`Ge\xE7ersiz de\u011Fer: beklenen ${f(i.values[0])}`:`Ge\xE7ersiz se\xE7enek: a\u015Fa\u011F\u0131dakilerden biri olmal\u0131: ${l(i.values,"|")}`;case"too_big":{let t=i.inclusive?"<=":"<",o=r(i.origin);return o?`\xC7ok b\xFCy\xFCk: beklenen ${i.origin??"de\u011Fer"} ${t}${i.maximum.toString()} ${o.unit??"\xF6\u011Fe"}`:`\xC7ok b\xFCy\xFCk: beklenen ${i.origin??"de\u011Fer"} ${t}${i.maximum.toString()}`}case"too_small":{let t=i.inclusive?">=":">",o=r(i.origin);return o?`\xC7ok k\xFC\xE7\xFCk: beklenen ${i.origin} ${t}${i.minimum.toString()} ${o.unit}`:`\xC7ok k\xFC\xE7\xFCk: beklenen ${i.origin} ${t}${i.minimum.toString()}`}case"invalid_format":{let t=i;return t.format==="starts_with"?`Ge\xE7ersiz metin: "${t.prefix}" ile ba\u015Flamal\u0131`:t.format==="ends_with"?`Ge\xE7ersiz metin: "${t.suffix}" ile bitmeli`:t.format==="includes"?`Ge\xE7ersiz metin: "${t.includes}" i\xE7ermeli`:t.format==="regex"?`Ge\xE7ersiz metin: ${t.pattern} desenine uymal\u0131`:`Ge\xE7ersiz ${n[t.format]??i.format}`}case"not_multiple_of":return`Ge\xE7ersiz say\u0131: ${i.divisor} ile tam b\xF6l\xFCnebilmeli`;case"unrecognized_keys":return`Tan\u0131nmayan anahtar${i.keys.length>1?"lar":""}: ${l(i.keys,", ")}`;case"invalid_key":return`${i.origin} i\xE7inde ge\xE7ersiz anahtar`;case"invalid_union":return"Ge\xE7ersiz de\u011Fer";case"invalid_element":return`${i.origin} i\xE7inde ge\xE7ersiz de\u011Fer`;default:return"Ge\xE7ersiz de\u011Fer"}}};function gc(){return{localeError:Dd()}}var Td=()=>{let e={string:{unit:"\u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},file:{unit:"\u0431\u0430\u0439\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},array:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},set:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0447\u0438\u0441\u043B\u043E";case"object":{if(Array.isArray(t))return"\u043C\u0430\u0441\u0438\u0432";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456",email:"\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0457 \u043F\u043E\u0448\u0442\u0438",url:"URL",emoji:"\u0435\u043C\u043E\u0434\u0437\u0456",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0434\u0430\u0442\u0430 \u0442\u0430 \u0447\u0430\u0441 ISO",date:"\u0434\u0430\u0442\u0430 ISO",time:"\u0447\u0430\u0441 ISO",duration:"\u0442\u0440\u0438\u0432\u0430\u043B\u0456\u0441\u0442\u044C ISO",ipv4:"\u0430\u0434\u0440\u0435\u0441\u0430 IPv4",ipv6:"\u0430\u0434\u0440\u0435\u0441\u0430 IPv6",cidrv4:"\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv4",cidrv6:"\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv6",base64:"\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64",base64url:"\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64url",json_string:"\u0440\u044F\u0434\u043E\u043A JSON",e164:"\u043D\u043E\u043C\u0435\u0440 E.164",jwt:"JWT",template_literal:"\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"};return t=>{switch(t.code){case"invalid_type":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${t.expected}, \u043E\u0442\u0440\u0438\u043C\u0430\u043D\u043E ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${f(t.values[0])}`:`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0430 \u043E\u043F\u0446\u0456\u044F: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F \u043E\u0434\u043D\u0435 \u0437 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} ${a.verb} ${o}${t.maximum.toString()} ${a.unit??"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432"}`:`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${t.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} \u0431\u0443\u0434\u0435 ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${t.origin} ${a.verb} ${o}${t.minimum.toString()} ${a.unit}`:`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${t.origin} \u0431\u0443\u0434\u0435 ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043F\u043E\u0447\u0438\u043D\u0430\u0442\u0438\u0441\u044F \u0437 "${o.prefix}"`:o.format==="ends_with"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0432\u0430\u0442\u0438\u0441\u044F \u043D\u0430 "${o.suffix}"`:o.format==="includes"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043C\u0456\u0441\u0442\u0438\u0442\u0438 "${o.includes}"`:o.format==="regex"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0430\u0442\u0438 \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${o.pattern}`:`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0447\u0438\u0441\u043B\u043E: \u043F\u043E\u0432\u0438\u043D\u043D\u043E \u0431\u0443\u0442\u0438 \u043A\u0440\u0430\u0442\u043D\u0438\u043C ${t.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u043E\u0437\u043F\u0456\u0437\u043D\u0430\u043D\u0438\u0439 \u043A\u043B\u044E\u0447${t.keys.length>1?"\u0456":""}: ${l(t.keys,", ")}`;case"invalid_key":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u043A\u043B\u044E\u0447 \u0443 ${t.origin}`;case"invalid_union":return"\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456";case"invalid_element":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0443 ${t.origin}`;default:return"\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"}}};function Qt(){return{localeError:Td()}}function vc(){return Qt()}var Ed=()=>{let e={string:{unit:"\u062D\u0631\u0648\u0641",verb:"\u06C1\u0648\u0646\u0627"},file:{unit:"\u0628\u0627\u0626\u0679\u0633",verb:"\u06C1\u0648\u0646\u0627"},array:{unit:"\u0622\u0626\u0679\u0645\u0632",verb:"\u06C1\u0648\u0646\u0627"},set:{unit:"\u0622\u0626\u0679\u0645\u0632",verb:"\u06C1\u0648\u0646\u0627"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"\u0646\u0645\u0628\u0631";case"object":{if(Array.isArray(t))return"\u0622\u0631\u06D2";if(t===null)return"\u0646\u0644";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0627\u0646 \u067E\u0679",email:"\u0627\u06CC \u0645\u06CC\u0644 \u0627\u06CC\u0688\u0631\u06CC\u0633",url:"\u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644",emoji:"\u0627\u06CC\u0645\u0648\u062C\u06CC",uuid:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",uuidv4:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 4",uuidv6:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 6",nanoid:"\u0646\u06CC\u0646\u0648 \u0622\u0626\u06CC \u0688\u06CC",guid:"\u062C\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",cuid:"\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",cuid2:"\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC 2",ulid:"\u06CC\u0648 \u0627\u06CC\u0644 \u0622\u0626\u06CC \u0688\u06CC",xid:"\u0627\u06CC\u06A9\u0633 \u0622\u0626\u06CC \u0688\u06CC",ksuid:"\u06A9\u06D2 \u0627\u06CC\u0633 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",datetime:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0688\u06CC\u0679 \u0679\u0627\u0626\u0645",date:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u062A\u0627\u0631\u06CC\u062E",time:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0648\u0642\u062A",duration:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0645\u062F\u062A",ipv4:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0627\u06CC\u0688\u0631\u06CC\u0633",ipv6:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0627\u06CC\u0688\u0631\u06CC\u0633",cidrv4:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0631\u06CC\u0646\u062C",cidrv6:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0631\u06CC\u0646\u062C",base64:"\u0628\u06CC\u0633 64 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",base64url:"\u0628\u06CC\u0633 64 \u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",json_string:"\u062C\u06D2 \u0627\u06CC\u0633 \u0627\u0648 \u0627\u06CC\u0646 \u0633\u0679\u0631\u0646\u06AF",e164:"\u0627\u06CC 164 \u0646\u0645\u0628\u0631",jwt:"\u062C\u06D2 \u0688\u0628\u0644\u06CC\u0648 \u0679\u06CC",template_literal:"\u0627\u0646 \u067E\u0679"};return t=>{switch(t.code){case"invalid_type":return`\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${t.expected} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627\u060C ${n(t.input)} \u0645\u0648\u0635\u0648\u0644 \u06C1\u0648\u0627`;case"invalid_value":return t.values.length===1?`\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${f(t.values[0])} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`:`\u063A\u0644\u0637 \u0622\u067E\u0634\u0646: ${l(t.values,"|")} \u0645\u06CC\u06BA \u0633\u06D2 \u0627\u06CC\u06A9 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u0628\u06C1\u062A \u0628\u0691\u0627: ${t.origin??"\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u06D2 ${o}${t.maximum.toString()} ${a.unit??"\u0639\u0646\u0627\u0635\u0631"} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`:`\u0628\u06C1\u062A \u0628\u0691\u0627: ${t.origin??"\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u0627 ${o}${t.maximum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${t.origin} \u06A9\u06D2 ${o}${t.minimum.toString()} ${a.unit} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`:`\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${t.origin} \u06A9\u0627 ${o}${t.minimum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${o.prefix}" \u0633\u06D2 \u0634\u0631\u0648\u0639 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:o.format==="ends_with"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${o.suffix}" \u067E\u0631 \u062E\u062A\u0645 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:o.format==="includes"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${o.includes}" \u0634\u0627\u0645\u0644 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:o.format==="regex"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \u067E\u06CC\u0679\u0631\u0646 ${o.pattern} \u0633\u06D2 \u0645\u06CC\u0686 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:`\u063A\u0644\u0637 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u063A\u0644\u0637 \u0646\u0645\u0628\u0631: ${t.divisor} \u06A9\u0627 \u0645\u0636\u0627\u0639\u0641 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;case"unrecognized_keys":return`\u063A\u06CC\u0631 \u062A\u0633\u0644\u06CC\u0645 \u0634\u062F\u06C1 \u06A9\u06CC${t.keys.length>1?"\u0632":""}: ${l(t.keys,"\u060C ")}`;case"invalid_key":return`${t.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u06A9\u06CC`;case"invalid_union":return"\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679";case"invalid_element":return`${t.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u0648\u06CC\u0644\u06CC\u0648`;default:return"\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679"}}};function hc(){return{localeError:Ed()}}var Ad=()=>{let e={string:{unit:"k\xFD t\u1EF1",verb:"c\xF3"},file:{unit:"byte",verb:"c\xF3"},array:{unit:"ph\u1EA7n t\u1EED",verb:"c\xF3"},set:{unit:"ph\u1EA7n t\u1EED",verb:"c\xF3"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"s\u1ED1";case"object":{if(Array.isArray(t))return"m\u1EA3ng";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u0111\u1EA7u v\xE0o",email:"\u0111\u1ECBa ch\u1EC9 email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ng\xE0y gi\u1EDD ISO",date:"ng\xE0y ISO",time:"gi\u1EDD ISO",duration:"kho\u1EA3ng th\u1EDDi gian ISO",ipv4:"\u0111\u1ECBa ch\u1EC9 IPv4",ipv6:"\u0111\u1ECBa ch\u1EC9 IPv6",cidrv4:"d\u1EA3i IPv4",cidrv6:"d\u1EA3i IPv6",base64:"chu\u1ED7i m\xE3 h\xF3a base64",base64url:"chu\u1ED7i m\xE3 h\xF3a base64url",json_string:"chu\u1ED7i JSON",e164:"s\u1ED1 E.164",jwt:"JWT",template_literal:"\u0111\u1EA7u v\xE0o"};return t=>{switch(t.code){case"invalid_type":return`\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${t.expected}, nh\u1EADn \u0111\u01B0\u1EE3c ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${f(t.values[0])}`:`T\xF9y ch\u1ECDn kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i m\u1ED9t trong c\xE1c gi\xE1 tr\u1ECB ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${t.origin??"gi\xE1 tr\u1ECB"} ${a.verb} ${o}${t.maximum.toString()} ${a.unit??"ph\u1EA7n t\u1EED"}`:`Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${t.origin??"gi\xE1 tr\u1ECB"} ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${t.origin} ${a.verb} ${o}${t.minimum.toString()} ${a.unit}`:`Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${t.origin} ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i b\u1EAFt \u0111\u1EA7u b\u1EB1ng "${o.prefix}"`:o.format==="ends_with"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i k\u1EBFt th\xFAc b\u1EB1ng "${o.suffix}"`:o.format==="includes"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i bao g\u1ED3m "${o.includes}"`:o.format==="regex"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i kh\u1EDBp v\u1EDBi m\u1EABu ${o.pattern}`:`${i[o.format]??t.format} kh\xF4ng h\u1EE3p l\u1EC7`}case"not_multiple_of":return`S\u1ED1 kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a ${t.divisor}`;case"unrecognized_keys":return`Kh\xF3a kh\xF4ng \u0111\u01B0\u1EE3c nh\u1EADn d\u1EA1ng: ${l(t.keys,", ")}`;case"invalid_key":return`Kh\xF3a kh\xF4ng h\u1EE3p l\u1EC7 trong ${t.origin}`;case"invalid_union":return"\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7";case"invalid_element":return`Gi\xE1 tr\u1ECB kh\xF4ng h\u1EE3p l\u1EC7 trong ${t.origin}`;default:return"\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7"}}};function $c(){return{localeError:Ad()}}var Ld=()=>{let e={string:{unit:"\u5B57\u7B26",verb:"\u5305\u542B"},file:{unit:"\u5B57\u8282",verb:"\u5305\u542B"},array:{unit:"\u9879",verb:"\u5305\u542B"},set:{unit:"\u9879",verb:"\u5305\u542B"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"\u975E\u6570\u5B57(NaN)":"\u6570\u5B57";case"object":{if(Array.isArray(t))return"\u6570\u7EC4";if(t===null)return"\u7A7A\u503C(null)";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u8F93\u5165",email:"\u7535\u5B50\u90AE\u4EF6",url:"URL",emoji:"\u8868\u60C5\u7B26\u53F7",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO\u65E5\u671F\u65F6\u95F4",date:"ISO\u65E5\u671F",time:"ISO\u65F6\u95F4",duration:"ISO\u65F6\u957F",ipv4:"IPv4\u5730\u5740",ipv6:"IPv6\u5730\u5740",cidrv4:"IPv4\u7F51\u6BB5",cidrv6:"IPv6\u7F51\u6BB5",base64:"base64\u7F16\u7801\u5B57\u7B26\u4E32",base64url:"base64url\u7F16\u7801\u5B57\u7B26\u4E32",json_string:"JSON\u5B57\u7B26\u4E32",e164:"E.164\u53F7\u7801",jwt:"JWT",template_literal:"\u8F93\u5165"};return t=>{switch(t.code){case"invalid_type":return`\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${t.expected}\uFF0C\u5B9E\u9645\u63A5\u6536 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${f(t.values[0])}`:`\u65E0\u6548\u9009\u9879\uFF1A\u671F\u671B\u4EE5\u4E0B\u4E4B\u4E00 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${t.origin??"\u503C"} ${o}${t.maximum.toString()} ${a.unit??"\u4E2A\u5143\u7D20"}`:`\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${t.origin??"\u503C"} ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${t.origin} ${o}${t.minimum.toString()} ${a.unit}`:`\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${t.origin} ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${o.prefix}" \u5F00\u5934`:o.format==="ends_with"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${o.suffix}" \u7ED3\u5C3E`:o.format==="includes"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u5305\u542B "${o.includes}"`:o.format==="regex"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F ${o.pattern}`:`\u65E0\u6548${i[o.format]??t.format}`}case"not_multiple_of":return`\u65E0\u6548\u6570\u5B57\uFF1A\u5FC5\u987B\u662F ${t.divisor} \u7684\u500D\u6570`;case"unrecognized_keys":return`\u51FA\u73B0\u672A\u77E5\u7684\u952E(key): ${l(t.keys,", ")}`;case"invalid_key":return`${t.origin} \u4E2D\u7684\u952E(key)\u65E0\u6548`;case"invalid_union":return"\u65E0\u6548\u8F93\u5165";case"invalid_element":return`${t.origin} \u4E2D\u5305\u542B\u65E0\u6548\u503C(value)`;default:return"\u65E0\u6548\u8F93\u5165"}}};function _c(){return{localeError:Ld()}}var Rd=()=>{let e={string:{unit:"\u5B57\u5143",verb:"\u64C1\u6709"},file:{unit:"\u4F4D\u5143\u7D44",verb:"\u64C1\u6709"},array:{unit:"\u9805\u76EE",verb:"\u64C1\u6709"},set:{unit:"\u9805\u76EE",verb:"\u64C1\u6709"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u8F38\u5165",email:"\u90F5\u4EF6\u5730\u5740",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u65E5\u671F\u6642\u9593",date:"ISO \u65E5\u671F",time:"ISO \u6642\u9593",duration:"ISO \u671F\u9593",ipv4:"IPv4 \u4F4D\u5740",ipv6:"IPv6 \u4F4D\u5740",cidrv4:"IPv4 \u7BC4\u570D",cidrv6:"IPv6 \u7BC4\u570D",base64:"base64 \u7DE8\u78BC\u5B57\u4E32",base64url:"base64url \u7DE8\u78BC\u5B57\u4E32",json_string:"JSON \u5B57\u4E32",e164:"E.164 \u6578\u503C",jwt:"JWT",template_literal:"\u8F38\u5165"};return t=>{switch(t.code){case"invalid_type":return`\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${t.expected}\uFF0C\u4F46\u6536\u5230 ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${f(t.values[0])}`:`\u7121\u6548\u7684\u9078\u9805\uFF1A\u9810\u671F\u70BA\u4EE5\u4E0B\u5176\u4E2D\u4E4B\u4E00 ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${t.origin??"\u503C"} \u61C9\u70BA ${o}${t.maximum.toString()} ${a.unit??"\u500B\u5143\u7D20"}`:`\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${t.origin??"\u503C"} \u61C9\u70BA ${o}${t.maximum.toString()}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${t.origin} \u61C9\u70BA ${o}${t.minimum.toString()} ${a.unit}`:`\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${t.origin} \u61C9\u70BA ${o}${t.minimum.toString()}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${o.prefix}" \u958B\u982D`:o.format==="ends_with"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${o.suffix}" \u7D50\u5C3E`:o.format==="includes"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u5305\u542B "${o.includes}"`:o.format==="regex"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u7B26\u5408\u683C\u5F0F ${o.pattern}`:`\u7121\u6548\u7684 ${i[o.format]??t.format}`}case"not_multiple_of":return`\u7121\u6548\u7684\u6578\u5B57\uFF1A\u5FC5\u9808\u70BA ${t.divisor} \u7684\u500D\u6578`;case"unrecognized_keys":return`\u7121\u6CD5\u8B58\u5225\u7684\u9375\u503C${t.keys.length>1?"\u5011":""}\uFF1A${l(t.keys,"\u3001")}`;case"invalid_key":return`${t.origin} \u4E2D\u6709\u7121\u6548\u7684\u9375\u503C`;case"invalid_union":return"\u7121\u6548\u7684\u8F38\u5165\u503C";case"invalid_element":return`${t.origin} \u4E2D\u6709\u7121\u6548\u7684\u503C`;default:return"\u7121\u6548\u7684\u8F38\u5165\u503C"}}};function bc(){return{localeError:Rd()}}var Cd=()=>{let e={string:{unit:"\xE0mi",verb:"n\xED"},file:{unit:"bytes",verb:"n\xED"},array:{unit:"nkan",verb:"n\xED"},set:{unit:"nkan",verb:"n\xED"}};function r(t){return e[t]??null}let n=t=>{let o=typeof t;switch(o){case"number":return Number.isNaN(t)?"NaN":"n\u1ECD\u0301mb\xE0";case"object":{if(Array.isArray(t))return"akop\u1ECD";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return o},i={regex:"\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9",email:"\xE0d\xEDr\u1EB9\u0301s\xEC \xECm\u1EB9\u0301l\xEC",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\xE0k\xF3k\xF2 ISO",date:"\u1ECDj\u1ECD\u0301 ISO",time:"\xE0k\xF3k\xF2 ISO",duration:"\xE0k\xF3k\xF2 t\xF3 p\xE9 ISO",ipv4:"\xE0d\xEDr\u1EB9\u0301s\xEC IPv4",ipv6:"\xE0d\xEDr\u1EB9\u0301s\xEC IPv6",cidrv4:"\xE0gb\xE8gb\xE8 IPv4",cidrv6:"\xE0gb\xE8gb\xE8 IPv6",base64:"\u1ECD\u0300r\u1ECD\u0300 t\xED a k\u1ECD\u0301 n\xED base64",base64url:"\u1ECD\u0300r\u1ECD\u0300 base64url",json_string:"\u1ECD\u0300r\u1ECD\u0300 JSON",e164:"n\u1ECD\u0301mb\xE0 E.164",jwt:"JWT",template_literal:"\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9"};return t=>{switch(t.code){case"invalid_type":return`\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${t.expected}, \xE0m\u1ECD\u0300 a r\xED ${n(t.input)}`;case"invalid_value":return t.values.length===1?`\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${f(t.values[0])}`:`\xC0\u1E63\xE0y\xE0n a\u1E63\xEC\u1E63e: yan \u1ECD\u0300kan l\xE1ra ${l(t.values,"|")}`;case"too_big":{let o=t.inclusive?"<=":"<",a=r(t.origin);return a?`T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${t.origin??"iye"} ${a.verb} ${o}${t.maximum} ${a.unit}`:`T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 ${o}${t.maximum}`}case"too_small":{let o=t.inclusive?">=":">",a=r(t.origin);return a?`K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${t.origin} ${a.verb} ${o}${t.minimum} ${a.unit}`:`K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 ${o}${t.minimum}`}case"invalid_format":{let o=t;return o.format==="starts_with"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\u1EB9\u0300r\u1EB9\u0300 p\u1EB9\u0300l\xFA "${o.prefix}"`:o.format==="ends_with"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 par\xED p\u1EB9\u0300l\xFA "${o.suffix}"`:o.format==="includes"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 n\xED "${o.includes}"`:o.format==="regex"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\xE1 \xE0p\u1EB9\u1EB9r\u1EB9 mu ${o.pattern}`:`A\u1E63\xEC\u1E63e: ${i[o.format]??t.format}`}case"not_multiple_of":return`N\u1ECD\u0301mb\xE0 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 j\u1EB9\u0301 \xE8y\xE0 p\xEDp\xEDn ti ${t.divisor}`;case"unrecognized_keys":return`B\u1ECDt\xECn\xEC \xE0\xECm\u1ECD\u0300: ${l(t.keys,", ")}`;case"invalid_key":return`B\u1ECDt\xECn\xEC a\u1E63\xEC\u1E63e n\xEDn\xFA ${t.origin}`;case"invalid_union":return"\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";case"invalid_element":return`Iye a\u1E63\xEC\u1E63e n\xEDn\xFA ${t.origin}`;default:return"\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e"}}};function yc(){return{localeError:Cd()}}var si=Symbol("ZodOutput"),li=Symbol("ZodInput"),Se=class{constructor(){this._map=new WeakMap,this._idmap=new Map}add(r,...n){let i=n[0];if(this._map.set(r,i),i&&typeof i=="object"&&"id"in i){if(this._idmap.has(i.id))throw new Error(`ID ${i.id} already exists in the registry`);this._idmap.set(i.id,r)}return this}clear(){return this._map=new WeakMap,this._idmap=new Map,this}remove(r){let n=this._map.get(r);return n&&typeof n=="object"&&"id"in n&&this._idmap.delete(n.id),this._map.delete(r),this}get(r){let n=r._zod.parent;if(n){let i={...this.get(n)??{}};delete i.id;let t={...i,...this._map.get(r)};return Object.keys(t).length?t:void 0}return this._map.get(r)}has(r){return this._map.has(r)}};function er(){return new Se}var H=er();function di(e,r){return new e({type:"string",...g(r)})}function mi(e,r){return new e({type:"string",coerce:!0,...g(r)})}function tr(e,r){return new e({type:"string",format:"email",check:"string_format",abort:!1,...g(r)})}function et(e,r){return new e({type:"string",format:"guid",check:"string_format",abort:!1,...g(r)})}function rr(e,r){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,...g(r)})}function nr(e,r){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v4",...g(r)})}function or(e,r){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v6",...g(r)})}function ir(e,r){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v7",...g(r)})}function tt(e,r){return new e({type:"string",format:"url",check:"string_format",abort:!1,...g(r)})}function ar(e,r){return new e({type:"string",format:"emoji",check:"string_format",abort:!1,...g(r)})}function ur(e,r){return new e({type:"string",format:"nanoid",check:"string_format",abort:!1,...g(r)})}function cr(e,r){return new e({type:"string",format:"cuid",check:"string_format",abort:!1,...g(r)})}function sr(e,r){return new e({type:"string",format:"cuid2",check:"string_format",abort:!1,...g(r)})}function lr(e,r){return new e({type:"string",format:"ulid",check:"string_format",abort:!1,...g(r)})}function dr(e,r){return new e({type:"string",format:"xid",check:"string_format",abort:!1,...g(r)})}function mr(e,r){return new e({type:"string",format:"ksuid",check:"string_format",abort:!1,...g(r)})}function pr(e,r){return new e({type:"string",format:"ipv4",check:"string_format",abort:!1,...g(r)})}function fr(e,r){return new e({type:"string",format:"ipv6",check:"string_format",abort:!1,...g(r)})}function gr(e,r){return new e({type:"string",format:"cidrv4",check:"string_format",abort:!1,...g(r)})}function vr(e,r){return new e({type:"string",format:"cidrv6",check:"string_format",abort:!1,...g(r)})}function hr(e,r){return new e({type:"string",format:"base64",check:"string_format",abort:!1,...g(r)})}function $r(e,r){return new e({type:"string",format:"base64url",check:"string_format",abort:!1,...g(r)})}function _r(e,r){return new e({type:"string",format:"e164",check:"string_format",abort:!1,...g(r)})}function br(e,r){return new e({type:"string",format:"jwt",check:"string_format",abort:!1,...g(r)})}var pi={Any:null,Minute:-1,Second:0,Millisecond:3,Microsecond:6};function fi(e,r){return new e({type:"string",format:"datetime",check:"string_format",offset:!1,local:!1,precision:null,...g(r)})}function gi(e,r){return new e({type:"string",format:"date",check:"string_format",...g(r)})}function vi(e,r){return new e({type:"string",format:"time",check:"string_format",precision:null,...g(r)})}function hi(e,r){return new e({type:"string",format:"duration",check:"string_format",...g(r)})}function $i(e,r){return new e({type:"number",checks:[],...g(r)})}function _i(e,r){return new e({type:"number",coerce:!0,checks:[],...g(r)})}function bi(e,r){return new e({type:"number",check:"number_format",abort:!1,format:"safeint",...g(r)})}function yi(e,r){return new e({type:"number",check:"number_format",abort:!1,format:"float32",...g(r)})}function xi(e,r){return new e({type:"number",check:"number_format",abort:!1,format:"float64",...g(r)})}function ki(e,r){return new e({type:"number",check:"number_format",abort:!1,format:"int32",...g(r)})}function wi(e,r){return new e({type:"number",check:"number_format",abort:!1,format:"uint32",...g(r)})}function zi(e,r){return new e({type:"boolean",...g(r)})}function Ii(e,r){return new e({type:"boolean",coerce:!0,...g(r)})}function Si(e,r){return new e({type:"bigint",...g(r)})}function ji(e,r){return new e({type:"bigint",coerce:!0,...g(r)})}function Oi(e,r){return new e({type:"bigint",check:"bigint_format",abort:!1,format:"int64",...g(r)})}function Pi(e,r){return new e({type:"bigint",check:"bigint_format",abort:!1,format:"uint64",...g(r)})}function Ui(e,r){return new e({type:"symbol",...g(r)})}function Ni(e,r){return new e({type:"undefined",...g(r)})}function Zi(e,r){return new e({type:"null",...g(r)})}function Di(e){return new e({type:"any"})}function Ti(e){return new e({type:"unknown"})}function Ei(e,r){return new e({type:"never",...g(r)})}function Ai(e,r){return new e({type:"void",...g(r)})}function Li(e,r){return new e({type:"date",...g(r)})}function Ri(e,r){return new e({type:"date",coerce:!0,...g(r)})}function Ci(e,r){return new e({type:"nan",...g(r)})}function Q(e,r){return new Ct({check:"less_than",...g(r),value:e,inclusive:!1})}function W(e,r){return new Ct({check:"less_than",...g(r),value:e,inclusive:!0})}function ee(e,r){return new Ft({check:"greater_than",...g(r),value:e,inclusive:!1})}function R(e,r){return new Ft({check:"greater_than",...g(r),value:e,inclusive:!0})}function Fi(e){return ee(0,e)}function Vi(e){return Q(0,e)}function Mi(e){return W(0,e)}function Ji(e){return R(0,e)}function ve(e,r){return new Tn({check:"multiple_of",...g(r),value:e})}function je(e,r){return new Ln({check:"max_size",...g(r),maximum:e})}function he(e,r){return new Rn({check:"min_size",...g(r),minimum:e})}function rt(e,r){return new Cn({check:"size_equals",...g(r),size:e})}function Oe(e,r){return new Fn({check:"max_length",...g(r),maximum:e})}function le(e,r){return new Vn({check:"min_length",...g(r),minimum:e})}function Pe(e,r){return new Mn({check:"length_equals",...g(r),length:e})}function nt(e,r){return new Jn({check:"string_format",format:"regex",...g(r),pattern:e})}function ot(e){return new Bn({check:"string_format",format:"lowercase",...g(e)})}function it(e){return new Wn({check:"string_format",format:"uppercase",...g(e)})}function at(e,r){return new Gn({check:"string_format",format:"includes",...g(r),includes:e})}function ut(e,r){return new Kn({check:"string_format",format:"starts_with",...g(r),prefix:e})}function ct(e,r){return new Xn({check:"string_format",format:"ends_with",...g(r),suffix:e})}function Bi(e,r,n){return new qn({check:"property",property:e,schema:r,...g(n)})}function st(e,r){return new Hn({check:"mime_type",mime:e,...g(r)})}function te(e){return new Yn({check:"overwrite",tx:e})}function lt(e){return te(r=>r.normalize(e))}function dt(){return te(e=>e.trim())}function mt(){return te(e=>e.toLowerCase())}function pt(){return te(e=>e.toUpperCase())}function Wi(e,r,n){return new e({type:"array",element:r,...g(n)})}function Fd(e,r,n){return new e({type:"union",options:r,...g(n)})}function Vd(e,r,n,i){return new e({type:"union",options:n,discriminator:r,...g(i)})}function Md(e,r,n){return new e({type:"intersection",left:r,right:n})}function Jd(e,r,n,i){let t=n instanceof x,o=t?i:n,a=t?n:null;return new e({type:"tuple",items:r,rest:a,...g(o)})}function Bd(e,r,n,i){return new e({type:"record",keyType:r,valueType:n,...g(i)})}function Wd(e,r,n,i){return new e({type:"map",keyType:r,valueType:n,...g(i)})}function Gd(e,r,n){return new e({type:"set",valueType:r,...g(n)})}function Kd(e,r,n){let i=Array.isArray(r)?Object.fromEntries(r.map(t=>[t,t])):r;return new e({type:"enum",entries:i,...g(n)})}function Xd(e,r,n){return new e({type:"enum",entries:r,...g(n)})}function qd(e,r,n){return new e({type:"literal",values:Array.isArray(r)?r:[r],...g(n)})}function Gi(e,r){return new e({type:"file",...g(r)})}function Hd(e,r){return new e({type:"transform",transform:r})}function Yd(e,r){return new e({type:"optional",innerType:r})}function Qd(e,r){return new e({type:"nullable",innerType:r})}function em(e,r,n){return new e({type:"default",innerType:r,get defaultValue(){return typeof n=="function"?n():qr(n)}})}function tm(e,r,n){return new e({type:"nonoptional",innerType:r,...g(n)})}function rm(e,r){return new e({type:"success",innerType:r})}function nm(e,r,n){return new e({type:"catch",innerType:r,catchValue:typeof n=="function"?n:()=>n})}function om(e,r,n){return new e({type:"pipe",in:r,out:n})}function im(e,r){return new e({type:"readonly",innerType:r})}function am(e,r,n){return new e({type:"template_literal",parts:r,...g(n)})}function um(e,r){return new e({type:"lazy",getter:r})}function cm(e,r){return new e({type:"promise",innerType:r})}function Ki(e,r,n){let i=g(n);return i.abort??(i.abort=!0),new e({type:"custom",check:"custom",fn:r,...i})}function Xi(e,r,n){return new e({type:"custom",check:"custom",fn:r,...g(n)})}function qi(e){let r=xc(n=>(n.addIssue=i=>{if(typeof i=="string")n.issues.push(ye(i,n.value,r._zod.def));else{let t=i;t.fatal&&(t.continue=!1),t.code??(t.code="custom"),t.input??(t.input=n.value),t.inst??(t.inst=r),t.continue??(t.continue=!r._zod.def.abort),n.issues.push(ye(t))}},e(n.value,n)));return r}function xc(e,r){let n=new U({check:"custom",...g(r)});return n._zod.check=e,n}function Hi(e,r){let n=g(r),i=n.truthy??["true","1","yes","on","y","enabled"],t=n.falsy??["false","0","no","off","n","disabled"];n.case!=="sensitive"&&(i=i.map($=>typeof $=="string"?$.toLowerCase():$),t=t.map($=>typeof $=="string"?$.toLowerCase():$));let o=new Set(i),a=new Set(t),u=e.Codec??qe,s=e.Boolean??Xe,m=e.String??ge,p=new m({type:"string",error:n.error}),h=new s({type:"boolean",error:n.error}),y=new u({type:"pipe",in:p,out:h,transform:(($,d)=>{let _=$;return n.case!=="sensitive"&&(_=_.toLowerCase()),o.has(_)?!0:a.has(_)?!1:(d.issues.push({code:"invalid_value",expected:"stringbool",values:[...o,...a],input:d.value,inst:y,continue:!1}),{})}),reverseTransform:(($,d)=>$===!0?i[0]||"true":t[0]||"false"),error:n.error});return y}function Ue(e,r,n,i={}){let t=g(i),o={...g(i),check:"string_format",type:"string",format:r,fn:typeof n=="function"?n:u=>n.test(u),...t};return n instanceof RegExp&&(o.pattern=n),new e(o)}var ft=class{constructor(r){this.counter=0,this.metadataRegistry=r?.metadata??H,this.target=r?.target??"draft-2020-12",this.unrepresentable=r?.unrepresentable??"throw",this.override=r?.override??(()=>{}),this.io=r?.io??"output",this.seen=new Map}process(r,n={path:[],schemaPath:[]}){var i;let t=r._zod.def,o={guid:"uuid",url:"uri",datetime:"date-time",json_string:"json-string",regex:""},a=this.seen.get(r);if(a)return a.count++,n.schemaPath.includes(r)&&(a.cycle=n.path),a.schema;let u={schema:{},count:1,cycle:void 0,path:n.path};this.seen.set(r,u);let s=r._zod.toJSONSchema?.();if(s)u.schema=s;else{let h={...n,schemaPath:[...n.schemaPath,r],path:n.path},y=r._zod.parent;if(y)u.ref=y,this.process(y,h),this.seen.get(y).isParent=!0;else{let $=u.schema;switch(t.type){case"string":{let d=$;d.type="string";let{minimum:_,maximum:b,format:I,patterns:z,contentEncoding:S}=r._zod.bag;if(typeof _=="number"&&(d.minLength=_),typeof b=="number"&&(d.maxLength=b),I&&(d.format=o[I]??I,d.format===""&&delete d.format),S&&(d.contentEncoding=S),z&&z.size>0){let P=[...z];P.length===1?d.pattern=P[0].source:P.length>1&&(u.schema.allOf=[...P.map(Y=>({...this.target==="draft-7"||this.target==="draft-4"||this.target==="openapi-3.0"?{type:"string"}:{},pattern:Y.source}))])}break}case"number":{let d=$,{minimum:_,maximum:b,format:I,multipleOf:z,exclusiveMaximum:S,exclusiveMinimum:P}=r._zod.bag;typeof I=="string"&&I.includes("int")?d.type="integer":d.type="number",typeof P=="number"&&(this.target==="draft-4"||this.target==="openapi-3.0"?(d.minimum=P,d.exclusiveMinimum=!0):d.exclusiveMinimum=P),typeof _=="number"&&(d.minimum=_,typeof P=="number"&&this.target!=="draft-4"&&(P>=_?delete d.minimum:delete d.exclusiveMinimum)),typeof S=="number"&&(this.target==="draft-4"||this.target==="openapi-3.0"?(d.maximum=S,d.exclusiveMaximum=!0):d.exclusiveMaximum=S),typeof b=="number"&&(d.maximum=b,typeof S=="number"&&this.target!=="draft-4"&&(S<=b?delete d.maximum:delete d.exclusiveMaximum)),typeof z=="number"&&(d.multipleOf=z);break}case"boolean":{let d=$;d.type="boolean";break}case"bigint":{if(this.unrepresentable==="throw")throw new Error("BigInt cannot be represented in JSON Schema");break}case"symbol":{if(this.unrepresentable==="throw")throw new Error("Symbols cannot be represented in JSON Schema");break}case"null":{this.target==="openapi-3.0"?($.type="string",$.nullable=!0,$.enum=[null]):$.type="null";break}case"any":break;case"unknown":break;case"undefined":{if(this.unrepresentable==="throw")throw new Error("Undefined cannot be represented in JSON Schema");break}case"void":{if(this.unrepresentable==="throw")throw new Error("Void cannot be represented in JSON Schema");break}case"never":{$.not={};break}case"date":{if(this.unrepresentable==="throw")throw new Error("Date cannot be represented in JSON Schema");break}case"array":{let d=$,{minimum:_,maximum:b}=r._zod.bag;typeof _=="number"&&(d.minItems=_),typeof b=="number"&&(d.maxItems=b),d.type="array",d.items=this.process(t.element,{...h,path:[...h.path,"items"]});break}case"object":{let d=$;d.type="object",d.properties={};let _=t.shape;for(let z in _)d.properties[z]=this.process(_[z],{...h,path:[...h.path,"properties",z]});let b=new Set(Object.keys(_)),I=new Set([...b].filter(z=>{let S=t.shape[z]._zod;return this.io==="input"?S.optin===void 0:S.optout===void 0}));I.size>0&&(d.required=Array.from(I)),t.catchall?._zod.def.type==="never"?d.additionalProperties=!1:t.catchall?t.catchall&&(d.additionalProperties=this.process(t.catchall,{...h,path:[...h.path,"additionalProperties"]})):this.io==="output"&&(d.additionalProperties=!1);break}case"union":{let d=$,_=t.options.map((b,I)=>this.process(b,{...h,path:[...h.path,"anyOf",I]}));d.anyOf=_;break}case"intersection":{let d=$,_=this.process(t.left,{...h,path:[...h.path,"allOf",0]}),b=this.process(t.right,{...h,path:[...h.path,"allOf",1]}),I=S=>"allOf"in S&&Object.keys(S).length===1,z=[...I(_)?_.allOf:[_],...I(b)?b.allOf:[b]];d.allOf=z;break}case"tuple":{let d=$;d.type="array";let _=this.target==="draft-2020-12"?"prefixItems":"items",b=this.target==="draft-2020-12"||this.target==="openapi-3.0"?"items":"additionalItems",I=t.items.map((Y,ks)=>this.process(Y,{...h,path:[...h.path,_,ks]})),z=t.rest?this.process(t.rest,{...h,path:[...h.path,b,...this.target==="openapi-3.0"?[t.items.length]:[]]}):null;this.target==="draft-2020-12"?(d.prefixItems=I,z&&(d.items=z)):this.target==="openapi-3.0"?(d.items={anyOf:I},z&&d.items.anyOf.push(z),d.minItems=I.length,z||(d.maxItems=I.length)):(d.items=I,z&&(d.additionalItems=z));let{minimum:S,maximum:P}=r._zod.bag;typeof S=="number"&&(d.minItems=S),typeof P=="number"&&(d.maxItems=P);break}case"record":{let d=$;d.type="object",(this.target==="draft-7"||this.target==="draft-2020-12")&&(d.propertyNames=this.process(t.keyType,{...h,path:[...h.path,"propertyNames"]})),d.additionalProperties=this.process(t.valueType,{...h,path:[...h.path,"additionalProperties"]});break}case"map":{if(this.unrepresentable==="throw")throw new Error("Map cannot be represented in JSON Schema");break}case"set":{if(this.unrepresentable==="throw")throw new Error("Set cannot be represented in JSON Schema");break}case"enum":{let d=$,_=Le(t.entries);_.every(b=>typeof b=="number")&&(d.type="number"),_.every(b=>typeof b=="string")&&(d.type="string"),d.enum=_;break}case"literal":{let d=$,_=[];for(let b of t.values)if(b===void 0){if(this.unrepresentable==="throw")throw new Error("Literal `undefined` cannot be represented in JSON Schema")}else if(typeof b=="bigint"){if(this.unrepresentable==="throw")throw new Error("BigInt literals cannot be represented in JSON Schema");_.push(Number(b))}else _.push(b);if(_.length!==0)if(_.length===1){let b=_[0];d.type=b===null?"null":typeof b,this.target==="draft-4"||this.target==="openapi-3.0"?d.enum=[b]:d.const=b}else _.every(b=>typeof b=="number")&&(d.type="number"),_.every(b=>typeof b=="string")&&(d.type="string"),_.every(b=>typeof b=="boolean")&&(d.type="string"),_.every(b=>b===null)&&(d.type="null"),d.enum=_;break}case"file":{let d=$,_={type:"string",format:"binary",contentEncoding:"binary"},{minimum:b,maximum:I,mime:z}=r._zod.bag;b!==void 0&&(_.minLength=b),I!==void 0&&(_.maxLength=I),z?z.length===1?(_.contentMediaType=z[0],Object.assign(d,_)):d.anyOf=z.map(S=>({..._,contentMediaType:S})):Object.assign(d,_);break}case"transform":{if(this.unrepresentable==="throw")throw new Error("Transforms cannot be represented in JSON Schema");break}case"nullable":{let d=this.process(t.innerType,h);this.target==="openapi-3.0"?(u.ref=t.innerType,$.nullable=!0):$.anyOf=[d,{type:"null"}];break}case"nonoptional":{this.process(t.innerType,h),u.ref=t.innerType;break}case"success":{let d=$;d.type="boolean";break}case"default":{this.process(t.innerType,h),u.ref=t.innerType,$.default=JSON.parse(JSON.stringify(t.defaultValue));break}case"prefault":{this.process(t.innerType,h),u.ref=t.innerType,this.io==="input"&&($._prefault=JSON.parse(JSON.stringify(t.defaultValue)));break}case"catch":{this.process(t.innerType,h),u.ref=t.innerType;let d;try{d=t.catchValue(void 0)}catch{throw new Error("Dynamic catch values are not supported in JSON Schema")}$.default=d;break}case"nan":{if(this.unrepresentable==="throw")throw new Error("NaN cannot be represented in JSON Schema");break}case"template_literal":{let d=$,_=r._zod.pattern;if(!_)throw new Error("Pattern not found in template literal");d.type="string",d.pattern=_.source;break}case"pipe":{let d=this.io==="input"?t.in._zod.def.type==="transform"?t.out:t.in:t.out;this.process(d,h),u.ref=d;break}case"readonly":{this.process(t.innerType,h),u.ref=t.innerType,$.readOnly=!0;break}case"promise":{this.process(t.innerType,h),u.ref=t.innerType;break}case"optional":{this.process(t.innerType,h),u.ref=t.innerType;break}case"lazy":{let d=r._zod.innerType;this.process(d,h),u.ref=d;break}case"custom":{if(this.unrepresentable==="throw")throw new Error("Custom types cannot be represented in JSON Schema");break}case"function":{if(this.unrepresentable==="throw")throw new Error("Function types cannot be represented in JSON Schema");break}default:}}}let m=this.metadataRegistry.get(r);return m&&Object.assign(u.schema,m),this.io==="input"&&Z(r)&&(delete u.schema.examples,delete u.schema.default),this.io==="input"&&u.schema._prefault&&((i=u.schema).default??(i.default=u.schema._prefault)),delete u.schema._prefault,this.seen.get(r).schema}emit(r,n){let i={cycles:n?.cycles??"ref",reused:n?.reused??"inline",external:n?.external??void 0},t=this.seen.get(r);if(!t)throw new Error("Unprocessed schema. This is a bug in Zod.");let o=p=>{let h=this.target==="draft-2020-12"?"$defs":"definitions";if(i.external){let _=i.external.registry.get(p[0])?.id,b=i.external.uri??(z=>z);if(_)return{ref:b(_)};let I=p[1].defId??p[1].schema.id??`schema${this.counter++}`;return p[1].defId=I,{defId:I,ref:`${b("__shared")}#/${h}/${I}`}}if(p[1]===t)return{ref:"#"};let $=`#/${h}/`,d=p[1].schema.id??`__schema${this.counter++}`;return{defId:d,ref:$+d}},a=p=>{if(p[1].schema.$ref)return;let h=p[1],{ref:y,defId:$}=o(p);h.def={...h.schema},$&&(h.defId=$);let d=h.schema;for(let _ in d)delete d[_];d.$ref=y};if(i.cycles==="throw")for(let p of this.seen.entries()){let h=p[1];if(h.cycle)throw new Error(`Cycle detected: #/${h.cycle?.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`)}for(let p of this.seen.entries()){let h=p[1];if(r===p[0]){a(p);continue}if(i.external){let $=i.external.registry.get(p[0])?.id;if(r!==p[0]&&$){a(p);continue}}if(this.metadataRegistry.get(p[0])?.id){a(p);continue}if(h.cycle){a(p);continue}if(h.count>1&&i.reused==="ref"){a(p);continue}}let u=(p,h)=>{let y=this.seen.get(p),$=y.def??y.schema,d={...$};if(y.ref===null)return;let _=y.ref;if(y.ref=null,_){u(_,h);let b=this.seen.get(_).schema;b.$ref&&(h.target==="draft-7"||h.target==="draft-4"||h.target==="openapi-3.0")?($.allOf=$.allOf??[],$.allOf.push(b)):(Object.assign($,b),Object.assign($,d))}y.isParent||this.override({zodSchema:p,jsonSchema:$,path:y.path??[]})};for(let p of[...this.seen.entries()].reverse())u(p[0],{target:this.target});let s={};if(this.target==="draft-2020-12"?s.$schema="https://json-schema.org/draft/2020-12/schema":this.target==="draft-7"?s.$schema="http://json-schema.org/draft-07/schema#":this.target==="draft-4"?s.$schema="http://json-schema.org/draft-04/schema#":this.target==="openapi-3.0"||console.warn(`Invalid target: ${this.target}`),i.external?.uri){let p=i.external.registry.get(r)?.id;if(!p)throw new Error("Schema is missing an `id` property");s.$id=i.external.uri(p)}Object.assign(s,t.def);let m=i.external?.defs??{};for(let p of this.seen.entries()){let h=p[1];h.def&&h.defId&&(m[h.defId]=h.def)}i.external||Object.keys(m).length>0&&(this.target==="draft-2020-12"?s.$defs=m:s.definitions=m);try{return JSON.parse(JSON.stringify(s))}catch{throw new Error("Error converting schema to JSON.")}}};function Yi(e,r){if(e instanceof Se){let i=new ft(r),t={};for(let u of e._idmap.entries()){let[s,m]=u;i.process(m)}let o={},a={registry:e,uri:r?.uri,defs:t};for(let u of e._idmap.entries()){let[s,m]=u;o[s]=i.emit(m,{...r,external:a})}if(Object.keys(t).length>0){let u=i.target==="draft-2020-12"?"$defs":"definitions";o.__shared={[u]:t}}return{schemas:o}}let n=new ft(r);return n.process(e),n.emit(e,r)}function Z(e,r){let n=r??{seen:new Set};if(n.seen.has(e))return!1;n.seen.add(e);let t=e._zod.def;switch(t.type){case"string":case"number":case"bigint":case"boolean":case"date":case"symbol":case"undefined":case"null":case"any":case"unknown":case"never":case"void":case"literal":case"enum":case"nan":case"file":case"template_literal":return!1;case"array":return Z(t.element,n);case"object":{for(let o in t.shape)if(Z(t.shape[o],n))return!0;return!1}case"union":{for(let o of t.options)if(Z(o,n))return!0;return!1}case"intersection":return Z(t.left,n)||Z(t.right,n);case"tuple":{for(let o of t.items)if(Z(o,n))return!0;return!!(t.rest&&Z(t.rest,n))}case"record":return Z(t.keyType,n)||Z(t.valueType,n);case"map":return Z(t.keyType,n)||Z(t.valueType,n);case"set":return Z(t.valueType,n);case"promise":case"optional":case"nonoptional":case"nullable":case"readonly":return Z(t.innerType,n);case"lazy":return Z(t.getter(),n);case"default":return Z(t.innerType,n);case"prefault":return Z(t.innerType,n);case"custom":return!1;case"transform":return!0;case"pipe":return Z(t.in,n)||Z(t.out,n);case"success":return!1;case"catch":return!1;case"function":return!1;default:}throw new Error(`Unknown schema type: ${t.type}`)}var kc={};var zr={};de(zr,{ZodISODate:()=>xr,ZodISODateTime:()=>yr,ZodISODuration:()=>wr,ZodISOTime:()=>kr,date:()=>ea,datetime:()=>Qi,duration:()=>ra,time:()=>ta});var yr=c("ZodISODateTime",(e,r)=>{po.init(e,r),O.init(e,r)});function Qi(e){return fi(yr,e)}var xr=c("ZodISODate",(e,r)=>{fo.init(e,r),O.init(e,r)});function ea(e){return gi(xr,e)}var kr=c("ZodISOTime",(e,r)=>{go.init(e,r),O.init(e,r)});function ta(e){return vi(kr,e)}var wr=c("ZodISODuration",(e,r)=>{vo.init(e,r),O.init(e,r)});function ra(e){return hi(wr,e)}var zc=(e,r)=>{Me.init(e,r),e.name="ZodError",Object.defineProperties(e,{format:{value:n=>Be(e,n)},flatten:{value:n=>Je(e,n)},addIssue:{value:n=>{e.issues.push(n),e.message=JSON.stringify(e.issues,_e,2)}},addIssues:{value:n=>{e.issues.push(...n),e.message=JSON.stringify(e.issues,_e,2)}},isEmpty:{get(){return e.issues.length===0}}})},lm=c("ZodError",zc),C=c("ZodError",zc,{Parent:Error});var na=xe(C),oa=ke(C),ia=we(C),aa=ze(C),ua=Ut(C),ca=Nt(C),sa=Zt(C),la=Dt(C),da=Tt(C),ma=Et(C),pa=At(C),fa=Lt(C);var k=c("ZodType",(e,r)=>(x.init(e,r),e.def=r,e.type=r.type,Object.defineProperty(e,"_def",{value:r}),e.check=(...n)=>e.clone(v.mergeDefs(r,{checks:[...r.checks??[],...n.map(i=>typeof i=="function"?{_zod:{check:i,def:{check:"custom"},onattach:[]}}:i)]})),e.clone=(n,i)=>E(e,n,i),e.brand=()=>e,e.register=((n,i)=>(n.add(e,i),e)),e.parse=(n,i)=>na(e,n,i,{callee:e.parse}),e.safeParse=(n,i)=>ia(e,n,i),e.parseAsync=async(n,i)=>oa(e,n,i,{callee:e.parseAsync}),e.safeParseAsync=async(n,i)=>aa(e,n,i),e.spa=e.safeParseAsync,e.encode=(n,i)=>ua(e,n,i),e.decode=(n,i)=>ca(e,n,i),e.encodeAsync=async(n,i)=>sa(e,n,i),e.decodeAsync=async(n,i)=>la(e,n,i),e.safeEncode=(n,i)=>da(e,n,i),e.safeDecode=(n,i)=>ma(e,n,i),e.safeEncodeAsync=async(n,i)=>pa(e,n,i),e.safeDecodeAsync=async(n,i)=>fa(e,n,i),e.refine=(n,i)=>e.check(ds(n,i)),e.superRefine=n=>e.check(ms(n)),e.overwrite=n=>e.check(te(n)),e.optional=()=>Sr(e),e.nullable=()=>jr(e),e.nullish=()=>Sr(jr(e)),e.nonoptional=n=>Qc(e,n),e.array=()=>Nr(e),e.or=n=>Aa([e,n]),e.and=n=>Rc(e,n),e.transform=n=>Or(e,Ca(n)),e.default=n=>qc(e,n),e.prefault=n=>Yc(e,n),e.catch=n=>rs(e,n),e.pipe=n=>Or(e,n),e.readonly=()=>is(e),e.describe=n=>{let i=e.clone();return H.add(i,{description:n}),i},Object.defineProperty(e,"description",{get(){return H.get(e)?.description},configurable:!0}),e.meta=(...n)=>{if(n.length===0)return H.get(e);let i=e.clone();return H.add(i,n[0]),i},e.isOptional=()=>e.safeParse(void 0).success,e.isNullable=()=>e.safeParse(null).success,e)),ha=c("_ZodString",(e,r)=>{ge.init(e,r),k.init(e,r);let n=e._zod.bag;e.format=n.format??null,e.minLength=n.minimum??null,e.maxLength=n.maximum??null,e.regex=(...i)=>e.check(nt(...i)),e.includes=(...i)=>e.check(at(...i)),e.startsWith=(...i)=>e.check(ut(...i)),e.endsWith=(...i)=>e.check(ct(...i)),e.min=(...i)=>e.check(le(...i)),e.max=(...i)=>e.check(Oe(...i)),e.length=(...i)=>e.check(Pe(...i)),e.nonempty=(...i)=>e.check(le(1,...i)),e.lowercase=i=>e.check(ot(i)),e.uppercase=i=>e.check(it(i)),e.trim=()=>e.check(dt()),e.normalize=(...i)=>e.check(lt(...i)),e.toLowerCase=()=>e.check(mt()),e.toUpperCase=()=>e.check(pt())}),vt=c("ZodString",(e,r)=>{ge.init(e,r),ha.init(e,r),e.email=n=>e.check(tr($a,n)),e.url=n=>e.check(tt(Pr,n)),e.jwt=n=>e.check(br(Za,n)),e.emoji=n=>e.check(ar(_a,n)),e.guid=n=>e.check(et(Ir,n)),e.uuid=n=>e.check(rr(ne,n)),e.uuidv4=n=>e.check(nr(ne,n)),e.uuidv6=n=>e.check(or(ne,n)),e.uuidv7=n=>e.check(ir(ne,n)),e.nanoid=n=>e.check(ur(ba,n)),e.guid=n=>e.check(et(Ir,n)),e.cuid=n=>e.check(cr(ya,n)),e.cuid2=n=>e.check(sr(xa,n)),e.ulid=n=>e.check(lr(ka,n)),e.base64=n=>e.check(hr(Pa,n)),e.base64url=n=>e.check($r(Ua,n)),e.xid=n=>e.check(dr(wa,n)),e.ksuid=n=>e.check(mr(za,n)),e.ipv4=n=>e.check(pr(Ia,n)),e.ipv6=n=>e.check(fr(Sa,n)),e.cidrv4=n=>e.check(gr(ja,n)),e.cidrv6=n=>e.check(vr(Oa,n)),e.e164=n=>e.check(_r(Na,n)),e.datetime=n=>e.check(Qi(n)),e.date=n=>e.check(ea(n)),e.time=n=>e.check(ta(n)),e.duration=n=>e.check(ra(n))});function ga(e){return di(vt,e)}var O=c("ZodStringFormat",(e,r)=>{j.init(e,r),ha.init(e,r)}),$a=c("ZodEmail",(e,r)=>{no.init(e,r),O.init(e,r)});function mm(e){return tr($a,e)}var Ir=c("ZodGUID",(e,r)=>{to.init(e,r),O.init(e,r)});function pm(e){return et(Ir,e)}var ne=c("ZodUUID",(e,r)=>{ro.init(e,r),O.init(e,r)});function fm(e){return rr(ne,e)}function gm(e){return nr(ne,e)}function vm(e){return or(ne,e)}function hm(e){return ir(ne,e)}var Pr=c("ZodURL",(e,r)=>{oo.init(e,r),O.init(e,r)});function $m(e){return tt(Pr,e)}function _m(e){return tt(Pr,{protocol:/^https?$/,hostname:B.domain,...v.normalizeParams(e)})}var _a=c("ZodEmoji",(e,r)=>{io.init(e,r),O.init(e,r)});function bm(e){return ar(_a,e)}var ba=c("ZodNanoID",(e,r)=>{ao.init(e,r),O.init(e,r)});function ym(e){return ur(ba,e)}var ya=c("ZodCUID",(e,r)=>{uo.init(e,r),O.init(e,r)});function xm(e){return cr(ya,e)}var xa=c("ZodCUID2",(e,r)=>{co.init(e,r),O.init(e,r)});function km(e){return sr(xa,e)}var ka=c("ZodULID",(e,r)=>{so.init(e,r),O.init(e,r)});function wm(e){return lr(ka,e)}var wa=c("ZodXID",(e,r)=>{lo.init(e,r),O.init(e,r)});function zm(e){return dr(wa,e)}var za=c("ZodKSUID",(e,r)=>{mo.init(e,r),O.init(e,r)});function Im(e){return mr(za,e)}var Ia=c("ZodIPv4",(e,r)=>{ho.init(e,r),O.init(e,r)});function Sm(e){return pr(Ia,e)}var Sa=c("ZodIPv6",(e,r)=>{$o.init(e,r),O.init(e,r)});function jm(e){return fr(Sa,e)}var ja=c("ZodCIDRv4",(e,r)=>{_o.init(e,r),O.init(e,r)});function Om(e){return gr(ja,e)}var Oa=c("ZodCIDRv6",(e,r)=>{bo.init(e,r),O.init(e,r)});function Pm(e){return vr(Oa,e)}var Pa=c("ZodBase64",(e,r)=>{xo.init(e,r),O.init(e,r)});function Um(e){return hr(Pa,e)}var Ua=c("ZodBase64URL",(e,r)=>{ko.init(e,r),O.init(e,r)});function Nm(e){return $r(Ua,e)}var Na=c("ZodE164",(e,r)=>{wo.init(e,r),O.init(e,r)});function Zm(e){return _r(Na,e)}var Za=c("ZodJWT",(e,r)=>{zo.init(e,r),O.init(e,r)});function Dm(e){return br(Za,e)}var ht=c("ZodCustomStringFormat",(e,r)=>{Io.init(e,r),O.init(e,r)});function Tm(e,r,n={}){return Ue(ht,e,r,n)}function Em(e){return Ue(ht,"hostname",B.hostname,e)}function Am(e){return Ue(ht,"hex",B.hex,e)}function Lm(e,r){let n=r?.enc??"hex",i=`${e}_${n}`,t=B[i];if(!t)throw new Error(`Unrecognized hash format: ${i}`);return Ue(ht,i,t,r)}var $t=c("ZodNumber",(e,r)=>{Gt.init(e,r),k.init(e,r),e.gt=(i,t)=>e.check(ee(i,t)),e.gte=(i,t)=>e.check(R(i,t)),e.min=(i,t)=>e.check(R(i,t)),e.lt=(i,t)=>e.check(Q(i,t)),e.lte=(i,t)=>e.check(W(i,t)),e.max=(i,t)=>e.check(W(i,t)),e.int=i=>e.check(va(i)),e.safe=i=>e.check(va(i)),e.positive=i=>e.check(ee(0,i)),e.nonnegative=i=>e.check(R(0,i)),e.negative=i=>e.check(Q(0,i)),e.nonpositive=i=>e.check(W(0,i)),e.multipleOf=(i,t)=>e.check(ve(i,t)),e.step=(i,t)=>e.check(ve(i,t)),e.finite=()=>e;let n=e._zod.bag;e.minValue=Math.max(n.minimum??Number.NEGATIVE_INFINITY,n.exclusiveMinimum??Number.NEGATIVE_INFINITY)??null,e.maxValue=Math.min(n.maximum??Number.POSITIVE_INFINITY,n.exclusiveMaximum??Number.POSITIVE_INFINITY)??null,e.isInt=(n.format??"").includes("int")||Number.isSafeInteger(n.multipleOf??.5),e.isFinite=!0,e.format=n.format??null});function Ic(e){return $i($t,e)}var Ze=c("ZodNumberFormat",(e,r)=>{So.init(e,r),$t.init(e,r)});function va(e){return bi(Ze,e)}function Rm(e){return yi(Ze,e)}function Cm(e){return xi(Ze,e)}function Fm(e){return ki(Ze,e)}function Vm(e){return wi(Ze,e)}var _t=c("ZodBoolean",(e,r)=>{Xe.init(e,r),k.init(e,r)});function Sc(e){return zi(_t,e)}var bt=c("ZodBigInt",(e,r)=>{Kt.init(e,r),k.init(e,r),e.gte=(i,t)=>e.check(R(i,t)),e.min=(i,t)=>e.check(R(i,t)),e.gt=(i,t)=>e.check(ee(i,t)),e.gte=(i,t)=>e.check(R(i,t)),e.min=(i,t)=>e.check(R(i,t)),e.lt=(i,t)=>e.check(Q(i,t)),e.lte=(i,t)=>e.check(W(i,t)),e.max=(i,t)=>e.check(W(i,t)),e.positive=i=>e.check(ee(BigInt(0),i)),e.negative=i=>e.check(Q(BigInt(0),i)),e.nonpositive=i=>e.check(W(BigInt(0),i)),e.nonnegative=i=>e.check(R(BigInt(0),i)),e.multipleOf=(i,t)=>e.check(ve(i,t));let n=e._zod.bag;e.minValue=n.minimum??null,e.maxValue=n.maximum??null,e.format=n.format??null});function Mm(e){return Si(bt,e)}var Da=c("ZodBigIntFormat",(e,r)=>{jo.init(e,r),bt.init(e,r)});function Jm(e){return Oi(Da,e)}function Bm(e){return Pi(Da,e)}var jc=c("ZodSymbol",(e,r)=>{Oo.init(e,r),k.init(e,r)});function Wm(e){return Ui(jc,e)}var Oc=c("ZodUndefined",(e,r)=>{Po.init(e,r),k.init(e,r)});function Gm(e){return Ni(Oc,e)}var Pc=c("ZodNull",(e,r)=>{Uo.init(e,r),k.init(e,r)});function Uc(e){return Zi(Pc,e)}var Nc=c("ZodAny",(e,r)=>{No.init(e,r),k.init(e,r)});function Km(){return Di(Nc)}var Zc=c("ZodUnknown",(e,r)=>{Zo.init(e,r),k.init(e,r)});function Ne(){return Ti(Zc)}var Dc=c("ZodNever",(e,r)=>{Do.init(e,r),k.init(e,r)});function Ta(e){return Ei(Dc,e)}var Tc=c("ZodVoid",(e,r)=>{To.init(e,r),k.init(e,r)});function Xm(e){return Ai(Tc,e)}var Ur=c("ZodDate",(e,r)=>{Eo.init(e,r),k.init(e,r),e.min=(i,t)=>e.check(R(i,t)),e.max=(i,t)=>e.check(W(i,t));let n=e._zod.bag;e.minDate=n.minimum?new Date(n.minimum):null,e.maxDate=n.maximum?new Date(n.maximum):null});function qm(e){return Li(Ur,e)}var Ec=c("ZodArray",(e,r)=>{Ao.init(e,r),k.init(e,r),e.element=r.element,e.min=(n,i)=>e.check(le(n,i)),e.nonempty=n=>e.check(le(1,n)),e.max=(n,i)=>e.check(Oe(n,i)),e.length=(n,i)=>e.check(Pe(n,i)),e.unwrap=()=>e.element});function Nr(e,r){return Wi(Ec,e,r)}function Hm(e){let r=e._zod.def.shape;return Ra(Object.keys(r))}var Zr=c("ZodObject",(e,r)=>{Lo.init(e,r),k.init(e,r),v.defineLazy(e,"shape",()=>r.shape),e.keyof=()=>Ra(Object.keys(e._zod.def.shape)),e.catchall=n=>e.clone({...e._zod.def,catchall:n}),e.passthrough=()=>e.clone({...e._zod.def,catchall:Ne()}),e.loose=()=>e.clone({...e._zod.def,catchall:Ne()}),e.strict=()=>e.clone({...e._zod.def,catchall:Ta()}),e.strip=()=>e.clone({...e._zod.def,catchall:void 0}),e.extend=n=>v.extend(e,n),e.safeExtend=n=>v.safeExtend(e,n),e.merge=n=>v.merge(e,n),e.pick=n=>v.pick(e,n),e.omit=n=>v.omit(e,n),e.partial=(...n)=>v.partial(Fa,e,n[0]),e.required=(...n)=>v.required(Va,e,n[0])});function Ym(e,r){let n={type:"object",shape:e??{},...v.normalizeParams(r)};return new Zr(n)}function Qm(e,r){return new Zr({type:"object",shape:e,catchall:Ta(),...v.normalizeParams(r)})}function ep(e,r){return new Zr({type:"object",shape:e,catchall:Ne(),...v.normalizeParams(r)})}var Ea=c("ZodUnion",(e,r)=>{Xt.init(e,r),k.init(e,r),e.options=r.options});function Aa(e,r){return new Ea({type:"union",options:e,...v.normalizeParams(r)})}var Ac=c("ZodDiscriminatedUnion",(e,r)=>{Ea.init(e,r),Ro.init(e,r)});function tp(e,r,n){return new Ac({type:"union",options:r,discriminator:e,...v.normalizeParams(n)})}var Lc=c("ZodIntersection",(e,r)=>{Co.init(e,r),k.init(e,r)});function Rc(e,r){return new Lc({type:"intersection",left:e,right:r})}var Cc=c("ZodTuple",(e,r)=>{qt.init(e,r),k.init(e,r),e.rest=n=>e.clone({...e._zod.def,rest:n})});function Fc(e,r,n){let i=r instanceof x,t=i?n:r,o=i?r:null;return new Cc({type:"tuple",items:e,rest:o,...v.normalizeParams(t)})}var La=c("ZodRecord",(e,r)=>{Fo.init(e,r),k.init(e,r),e.keyType=r.keyType,e.valueType=r.valueType});function Vc(e,r,n){return new La({type:"record",keyType:e,valueType:r,...v.normalizeParams(n)})}function rp(e,r,n){let i=E(e);return i._zod.values=void 0,new La({type:"record",keyType:i,valueType:r,...v.normalizeParams(n)})}var Mc=c("ZodMap",(e,r)=>{Vo.init(e,r),k.init(e,r),e.keyType=r.keyType,e.valueType=r.valueType});function np(e,r,n){return new Mc({type:"map",keyType:e,valueType:r,...v.normalizeParams(n)})}var Jc=c("ZodSet",(e,r)=>{Mo.init(e,r),k.init(e,r),e.min=(...n)=>e.check(he(...n)),e.nonempty=n=>e.check(he(1,n)),e.max=(...n)=>e.check(je(...n)),e.size=(...n)=>e.check(rt(...n))});function op(e,r){return new Jc({type:"set",valueType:e,...v.normalizeParams(r)})}var gt=c("ZodEnum",(e,r)=>{Jo.init(e,r),k.init(e,r),e.enum=r.entries,e.options=Object.values(r.entries);let n=new Set(Object.keys(r.entries));e.extract=(i,t)=>{let o={};for(let a of i)if(n.has(a))o[a]=r.entries[a];else throw new Error(`Key ${a} not found in enum`);return new gt({...r,checks:[],...v.normalizeParams(t),entries:o})},e.exclude=(i,t)=>{let o={...r.entries};for(let a of i)if(n.has(a))delete o[a];else throw new Error(`Key ${a} not found in enum`);return new gt({...r,checks:[],...v.normalizeParams(t),entries:o})}});function Ra(e,r){let n=Array.isArray(e)?Object.fromEntries(e.map(i=>[i,i])):e;return new gt({type:"enum",entries:n,...v.normalizeParams(r)})}function ip(e,r){return new gt({type:"enum",entries:e,...v.normalizeParams(r)})}var Bc=c("ZodLiteral",(e,r)=>{Bo.init(e,r),k.init(e,r),e.values=new Set(r.values),Object.defineProperty(e,"value",{get(){if(r.values.length>1)throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");return r.values[0]}})});function ap(e,r){return new Bc({type:"literal",values:Array.isArray(e)?e:[e],...v.normalizeParams(r)})}var Wc=c("ZodFile",(e,r)=>{Wo.init(e,r),k.init(e,r),e.min=(n,i)=>e.check(he(n,i)),e.max=(n,i)=>e.check(je(n,i)),e.mime=(n,i)=>e.check(st(Array.isArray(n)?n:[n],i))});function up(e){return Gi(Wc,e)}var Gc=c("ZodTransform",(e,r)=>{Go.init(e,r),k.init(e,r),e._zod.parse=(n,i)=>{if(i.direction==="backward")throw new oe(e.constructor.name);n.addIssue=o=>{if(typeof o=="string")n.issues.push(v.issue(o,n.value,r));else{let a=o;a.fatal&&(a.continue=!1),a.code??(a.code="custom"),a.input??(a.input=n.value),a.inst??(a.inst=e),n.issues.push(v.issue(a))}};let t=r.transform(n.value,n);return t instanceof Promise?t.then(o=>(n.value=o,n)):(n.value=t,n)}});function Ca(e){return new Gc({type:"transform",transform:e})}var Fa=c("ZodOptional",(e,r)=>{Ko.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function Sr(e){return new Fa({type:"optional",innerType:e})}var Kc=c("ZodNullable",(e,r)=>{Xo.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function jr(e){return new Kc({type:"nullable",innerType:e})}function cp(e){return Sr(jr(e))}var Xc=c("ZodDefault",(e,r)=>{qo.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType,e.removeDefault=e.unwrap});function qc(e,r){return new Xc({type:"default",innerType:e,get defaultValue(){return typeof r=="function"?r():v.shallowClone(r)}})}var Hc=c("ZodPrefault",(e,r)=>{Ho.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function Yc(e,r){return new Hc({type:"prefault",innerType:e,get defaultValue(){return typeof r=="function"?r():v.shallowClone(r)}})}var Va=c("ZodNonOptional",(e,r)=>{Yo.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function Qc(e,r){return new Va({type:"nonoptional",innerType:e,...v.normalizeParams(r)})}var es=c("ZodSuccess",(e,r)=>{Qo.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function sp(e){return new es({type:"success",innerType:e})}var ts=c("ZodCatch",(e,r)=>{ei.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType,e.removeCatch=e.unwrap});function rs(e,r){return new ts({type:"catch",innerType:e,catchValue:typeof r=="function"?r:()=>r})}var ns=c("ZodNaN",(e,r)=>{ti.init(e,r),k.init(e,r)});function lp(e){return Ci(ns,e)}var Ma=c("ZodPipe",(e,r)=>{ri.init(e,r),k.init(e,r),e.in=r.in,e.out=r.out});function Or(e,r){return new Ma({type:"pipe",in:e,out:r})}var Ja=c("ZodCodec",(e,r)=>{Ma.init(e,r),qe.init(e,r)});function dp(e,r,n){return new Ja({type:"pipe",in:e,out:r,transform:n.decode,reverseTransform:n.encode})}var os=c("ZodReadonly",(e,r)=>{ni.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function is(e){return new os({type:"readonly",innerType:e})}var as=c("ZodTemplateLiteral",(e,r)=>{oi.init(e,r),k.init(e,r)});function mp(e,r){return new as({type:"template_literal",parts:e,...v.normalizeParams(r)})}var us=c("ZodLazy",(e,r)=>{ui.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.getter()});function cs(e){return new us({type:"lazy",getter:e})}var ss=c("ZodPromise",(e,r)=>{ai.init(e,r),k.init(e,r),e.unwrap=()=>e._zod.def.innerType});function pp(e){return new ss({type:"promise",innerType:e})}var ls=c("ZodFunction",(e,r)=>{ii.init(e,r),k.init(e,r)});function fp(e){return new ls({type:"function",input:Array.isArray(e?.input)?Fc(e?.input):e?.input??Nr(Ne()),output:e?.output??Ne()})}var Dr=c("ZodCustom",(e,r)=>{ci.init(e,r),k.init(e,r)});function gp(e){let r=new U({check:"custom"});return r._zod.check=e,r}function vp(e,r){return Ki(Dr,e??(()=>!0),r)}function ds(e,r={}){return Xi(Dr,e,r)}function ms(e){return qi(e)}function hp(e,r={error:`Input not instance of ${e.name}`}){let n=new Dr({type:"custom",check:"custom",fn:i=>i instanceof e,abort:!0,...v.normalizeParams(r)});return n._zod.bag.Class=e,n}var $p=(...e)=>Hi({Codec:Ja,Boolean:_t,String:vt},...e);function _p(e){let r=cs(()=>Aa([ga(e),Ic(),Sc(),Uc(),Nr(r),Vc(ga(),r)]));return r}function bp(e,r){return Or(Ca(e),r)}var yp={invalid_type:"invalid_type",too_big:"too_big",too_small:"too_small",invalid_format:"invalid_format",not_multiple_of:"not_multiple_of",unrecognized_keys:"unrecognized_keys",invalid_union:"invalid_union",invalid_key:"invalid_key",invalid_element:"invalid_element",invalid_value:"invalid_value",custom:"custom"};function xp(e){N({customError:e})}function kp(){return N().customError}var Ba;Ba||(Ba={});var Wa={};de(Wa,{bigint:()=>Sp,boolean:()=>Ip,date:()=>jp,number:()=>zp,string:()=>wp});function wp(e){return mi(vt,e)}function zp(e){return _i($t,e)}function Ip(e){return Ii(_t,e)}function Sp(e){return ji(bt,e)}function jp(e){return Ri(Ur,e)}N(Ht());var Tr=V.withTag("pickup"),ps=new X(Tr);async function Ga(){let e=wt(`
    .row:has(.card-flyer) {
      justify-content: center;
    }
    @media (min-width: 1400px) {
      .col-md-five-1:where(:has(.card-flyer), .bttfc-content-dummy) {
        flex-basis: 15% !important;
      }
    }
    @media (min-width: 1600px) {
      .col-md-five-1:where(:has(.card-flyer), .bttfc-content-dummy) {
        flex-basis: 12.5% !important;
      }
    }
    @media (min-width: 2000px) {
      .col-md-five-1:where(:has(.card-flyer), .bttfc-content-dummy) {
        flex-basis: 10% !important;
      }
    }
  `),r=await yt(".row:has(.card-flyer)"),n=[];for(let i=0;i<10;i++){let t=document.createElement("div");t.className="col-md-five-1 bttfc-content-dummy",n.push(t),r.appendChild(t)}return()=>{e();for(let i of n)i.parentElement&&i.parentElement.removeChild(i);Tr.log("Removed better content list style")}}var Op=G.object({content_id:G.number(),content_title:G.string(),thumbnail_url:G.string()}),Pp=G.object({pickup_name:G.string(),content_type:G.number(),total_count:G.number(),content_list:G.array(Op)}),Up=10,fs=50;function Np(){qa("pickup",e=>{let r=new URL(e.url);if(e.method==="GET"&&r.pathname.startsWith("/api/pc/pickup_content"))return async()=>await Zp(r,e)})}async function Zp(e,r){let n=new URLSearchParams(e.search);n.set("number",fs.toString());let i=new Request(`${e.pathname}?${n.toString()}`,r),t=await fetch(i);if(!t.ok)return Tr.warn(`Failed to fetch pickup content: ${t.status} ${t.statusText}`),t;let o=Pp.parse(await t.clone().json()),a=Math.ceil(o.total_count/fs);return Response.json({pickup_name:o.pickup_name,content_type:o.content_type,total_count:a*Up,content_list:o.content_list.map(u=>({content_id:u.content_id,content_title:u.content_title,thumbnail_url:u.thumbnail_url}))},{headers:{"Content-Type":"application/json; charset=utf-8"}})}async function gs(e){if(me(e,"/pickup/[0-9]+"))return Tr.log("Started"),Np(),ps.add(await Ga()),()=>ps.clear()}var Er=V.withTag("root"),vs=new X(Er);async function Dp(){await yt("#top-view div.note")}function Tp(){let e=Er.withTag("addLinks");vs.add(wt(`
      .bttfc-header:hover {
        text-decoration: underline;
        cursor: pointer;
      }
    `));for(let r of eu("div.mb-3:has(> .title-bar):not(:has(> .bttfc-header))")){let n=xt('div.card-flyer[title="\u3082\u3063\u3068\u898B\u308B"]',r);if(!n){e.warn("No '\u3082\u3063\u3068\u898B\u308B' flyer found in header",r);continue}let i=kt("div.title-bar > span.h4",r);i.addEventListener("click",()=>{e.log("Title bar clicked, opening flyer..."),n.click()}),i.classList.add("bttfc-header")}}async function hs(e){if(me(e,"/")||me(e,"/top"))return Er.log("Started"),await Dp().then(()=>{Er.log("Page loaded, executing script..."),Tp()}),()=>vs.clear()}var Ka=V.withTag("watch"),_s="bttfcWatched",$s=new X(Ka),Ep=sessionStorage.setItem.bind(sessionStorage);function Ap(){let e=Ka.withTag("setupTeeWatchData");if(sessionStorage.bttfcHooked){e.warn("SessionStorage is already hooked, skipping.");return}e.log("Setting up watch data interception"),Object.getPrototypeOf(sessionStorage).setItem=new Proxy(Object.getPrototypeOf(sessionStorage).setItem,{apply:(r,n,i)=>{if(n!==sessionStorage)return Reflect.apply(r,n,i);let[t,o]=i;return t==="watched"&&(e.log("Intercepted sessionStorage setItem for watched data"),localStorage.setItem(_s,o)),Reflect.apply(r,n,i)}}),Object.getPrototypeOf(sessionStorage).bttfcHooked=!0}function Lp(){let e=Ka.withTag("loadWatchData"),r=localStorage.getItem(_s);if(!r){e.warn("No watched data found in localStorage");return}e.log("Loading watched data from localStorage"),Ep("watched",r)}async function bs(e){if(me(e,"/contents"))return Lp(),Ap(),$s.add(await Ga()),()=>$s.clear()}var Rp={root:hs,pickup:gs,watch:bs,all:ru},ys;async function xs(e){let r=V.withTag("callPageMains");ys?.(),r.log("Navigation detected, calling scripts for path:",e);let n=Object.fromEntries(await Promise.all(Object.entries(Rp).map(async([i,t])=>[i,await t(e)])));r.log("Page scripts called",Object.entries(n).filter(([,i])=>i).map(([i])=>i)),ys=()=>{r.log("Tearing down page scripts");for(let[i,t]of Object.entries(n))t&&(r.log(`Tearing down ${i}`),t())}}function Cp(){let e=V.withTag("insertNavigationHook"),r=history.pushState,n=(...i)=>(e.log("History pushState called",i),xs(i[2]),r.apply(history,i));history.pushState=n,e.log("Navigation hook inserted")}async function Fp(){V.log("Started"),Xa(V.withTag("xhr-hook")),Cp(),xs(location.pathname)}Fp();})();
//# sourceMappingURL=data:application/json;base64,
