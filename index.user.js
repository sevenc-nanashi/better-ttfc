// ==UserScript==
// @name Better TTFC
// @description 東映特撮ファンクラブのPC版サイトをより便利にするためのユーザースクリプト。
// @version 0.0.1
// @homepage https://github.com/sevenc-nanashi/better-ttfc
// @author Nanashi. <https://sevenc7c.com>
// @match https://pc.tokusatsu-fc.jp/*
// @updateURL https://raw.githubusercontent.com/sevenc-nanashi/better-ttfc/built/index.user.js
// @downloadURL https://raw.githubusercontent.com/sevenc-nanashi/better-ttfc/built/index.user.js
// @sandbox MAIN_WORLD
// @run-at document-body
// ==/UserScript==

"use strict";(()=>{var Nc=Object.defineProperty;var ne=(t,r)=>{for(var i in r)Nc(t,i,{get:r[i],enumerable:!0})};var E={silent:Number.NEGATIVE_INFINITY,fatal:0,error:0,warn:1,log:2,info:3,success:3,fail:3,ready:3,start:3,box:3,debug:4,trace:5,verbose:Number.POSITIVE_INFINITY},hr={silent:{level:-1},fatal:{level:E.fatal},error:{level:E.error},warn:{level:E.warn},log:{level:E.log},info:{level:E.info},success:{level:E.success},fail:{level:E.fail},ready:{level:E.info},start:{level:E.info},box:{level:E.info},debug:{level:E.debug},trace:{level:E.trace},verbose:{level:E.verbose}};function fr(t){if(t===null||typeof t!="object")return!1;let r=Object.getPrototypeOf(t);return r!==null&&r!==Object.prototype&&Object.getPrototypeOf(r)!==null||Symbol.iterator in t?!1:Symbol.toStringTag in t?Object.prototype.toString.call(t)==="[object Module]":!0}function $r(t,r,i=".",o){if(!fr(r))return $r(t,{},i,o);let e=Object.assign({},r);for(let n in t){if(n==="__proto__"||n==="constructor")continue;let a=t[n];a!=null&&(o&&o(e,n,a,i)||(Array.isArray(a)&&Array.isArray(e[n])?e[n]=[...a,...e[n]]:fr(a)&&fr(e[n])?e[n]=$r(a,e[n],(i?`${i}.`:"")+n.toString(),o):e[n]=a))}return e}function Zc(t){return(...r)=>r.reduce((i,o)=>$r(i,o,"",t),{})}var Dc=Zc();function Tc(t){return Object.prototype.toString.call(t)==="[object Object]"}function Ec(t){return!(!Tc(t)||!t.message&&!t.args||t.stack)}var gr=!1,fa=[],D=class t{options;_lastLog;_mockFn;constructor(r={}){let i=r.types||hr;this.options=Dc({...r,defaults:{...r.defaults},level:vr(r.level,i),reporters:[...r.reporters||[]]},{types:hr,throttle:1e3,throttleMin:5,formatOptions:{date:!0,colors:!1,compact:!0}});for(let o in i){let e={type:o,...this.options.defaults,...i[o]};this[o]=this._wrapLogFn(e),this[o].raw=this._wrapLogFn(e,!0)}this.options.mockFn&&this.mockTypes(),this._lastLog={}}get level(){return this.options.level}set level(r){this.options.level=vr(r,this.options.types,this.options.level)}prompt(r,i){if(!this.options.prompt)throw new Error("prompt is not supported!");return this.options.prompt(r,i)}create(r){let i=new t({...this.options,...r});return this._mockFn&&i.mockTypes(this._mockFn),i}withDefaults(r){return this.create({...this.options,defaults:{...this.options.defaults,...r}})}withTag(r){return this.withDefaults({tag:this.options.defaults.tag?this.options.defaults.tag+":"+r:r})}addReporter(r){return this.options.reporters.push(r),this}removeReporter(r){if(r){let i=this.options.reporters.indexOf(r);if(i!==-1)return this.options.reporters.splice(i,1)}else this.options.reporters.splice(0);return this}setReporters(r){return this.options.reporters=Array.isArray(r)?r:[r],this}wrapAll(){this.wrapConsole(),this.wrapStd()}restoreAll(){this.restoreConsole(),this.restoreStd()}wrapConsole(){for(let r in this.options.types)console["__"+r]||(console["__"+r]=console[r]),console[r]=this[r].raw}restoreConsole(){for(let r in this.options.types)console["__"+r]&&(console[r]=console["__"+r],delete console["__"+r])}wrapStd(){this._wrapStream(this.options.stdout,"log"),this._wrapStream(this.options.stderr,"log")}_wrapStream(r,i){r&&(r.__write||(r.__write=r.write),r.write=o=>{this[i].raw(String(o).trim())})}restoreStd(){this._restoreStream(this.options.stdout),this._restoreStream(this.options.stderr)}_restoreStream(r){r&&r.__write&&(r.write=r.__write,delete r.__write)}pauseLogs(){gr=!0}resumeLogs(){gr=!1;let r=fa.splice(0);for(let i of r)i[0]._logFn(i[1],i[2])}mockTypes(r){let i=r||this.options.mockFn;if(this._mockFn=i,typeof i=="function")for(let o in this.options.types)this[o]=i(o,this.options.types[o])||this[o],this[o].raw=this[o]}_wrapLogFn(r,i){return(...o)=>{if(gr){fa.push([this,r,o,i]);return}return this._logFn(r,o,i)}}_logFn(r,i,o){if((r.level||0)>this.level)return!1;let e={date:new Date,args:[],...r,level:vr(r.level,this.options.types)};!o&&i.length===1&&Ec(i[0])?Object.assign(e,i[0]):e.args=[...i],e.message&&(e.args.unshift(e.message),delete e.message),e.additional&&(Array.isArray(e.additional)||(e.additional=e.additional.split(`
`)),e.args.push(`
`+e.additional.join(`
`)),delete e.additional),e.type=typeof e.type=="string"?e.type.toLowerCase():"log",e.tag=typeof e.tag=="string"?e.tag:"";let n=(u=!1)=>{let l=(this._lastLog.count||0)-this.options.throttleMin;if(this._lastLog.object&&l>0){let p=[...this._lastLog.object.args];l>1&&p.push(`(repeated ${l} times)`),this._log({...this._lastLog.object,args:p}),this._lastLog.count=1}u&&(this._lastLog.object=e,this._log(e))};clearTimeout(this._lastLog.timeout);let a=this._lastLog.time&&e.date?e.date.getTime()-this._lastLog.time.getTime():0;if(this._lastLog.time=e.date,a<this.options.throttle)try{let u=JSON.stringify([e.type,e.tag,e.args]),l=this._lastLog.serialized===u;if(this._lastLog.serialized=u,l&&(this._lastLog.count=(this._lastLog.count||0)+1,this._lastLog.count>this.options.throttleMin)){this._lastLog.timeout=setTimeout(n,this.options.throttle);return}}catch{}n(!0)}_log(r){for(let i of this.options.reporters)i.log(r,{options:this.options})}};function vr(t,r={},i=3){return t===void 0?i:typeof t=="number"?t:r[t]&&r[t].level!==void 0?r[t].level:i}D.prototype.add=D.prototype.addReporter;D.prototype.remove=D.prototype.removeReporter;D.prototype.clear=D.prototype.removeReporter;D.prototype.withScope=D.prototype.withTag;D.prototype.mock=D.prototype.mockTypes;D.prototype.pause=D.prototype.pauseLogs;D.prototype.resume=D.prototype.resumeLogs;function ga(t={}){return new D(t)}var _r=class{options;defaultColor;levelColorMap;typeColorMap;constructor(r){this.options={...r},this.defaultColor="#7f8c8d",this.levelColorMap={0:"#c0392b",1:"#f39c12",3:"#00BCD4"},this.typeColorMap={success:"#2ecc71"}}_getLogFn(r){return r<1?console.__error||console.error:r===1?console.__warn||console.warn:console.__log||console.log}log(r){let i=this._getLogFn(r.level),o=r.type==="log"?"":r.type,e=r.tag||"",a=`
      background: ${this.typeColorMap[r.type]||this.levelColorMap[r.level]||this.defaultColor};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `,u=`%c${[e,o].filter(Boolean).join(":")}`;typeof r.args[0]=="string"?i(`${u}%c ${r.args[0]}`,a,"",...r.args.slice(1)):i(u,a,...r.args)}};function Lc(t={}){return ga({reporters:t.reporters||[new _r({})],prompt(i,o={}){return o.type==="confirm"?Promise.resolve(confirm(i)):Promise.resolve(prompt(i))},...t})}var va=Lc();var T=va.withTag("Better TTFC");function me(t,r){return new RegExp(`^${r.replaceAll(".","\\.").replaceAll("*",".*")}(?:\\?.*)?$`).test(t)}function Ac(t,r=document){return Array.from(r.querySelectorAll(t))}function ha(t,r=document){let i=Ac(t,r);if(i.length===0)throw new Error(`No elements found for selector: ${t}`);return i}function yr(t,r=document){return r.querySelector(t)}function $a(t,r=document){let i=yr(t,r);if(!i)throw new Error(`No element found for selector: ${t}`);return i}function _a(t){let r=document.createElement("style");return r.textContent=t,document.head.appendChild(r),r}var mt=T.withTag("root"),dt=null;async function Rc(){let{promise:t,resolve:r}=Promise.withResolvers();return dt=setInterval(()=>{document.querySelector("#top-view div.note")?r():console.warn("Note element not found, retrying...")},100),t}function Cc(){let t=mt.withTag("addLinks");_a(`
    .bttfc-header:hover {
      text-decoration: underline;
      cursor: pointer;
    }
  `);for(let r of ha("div.mb-3:has(> .title-bar):not(:has(> .bttfc-header))")){let i=yr('div.card-flyer[title="\u3082\u3063\u3068\u898B\u308B"]',r);if(!i){t.warn("No '\u3082\u3063\u3068\u898B\u308B' flyer found in header",r);continue}let o=$a("div.title-bar > span.h4",r);o.addEventListener("click",()=>{t.log("Title bar clicked, opening flyer..."),i.click()}),o.classList.add("bttfc-header")}}async function ya(t){if(me(t,"/"))return mt.log("Started"),await Rc(),mt.log("Page loaded, executing script..."),Cc(),()=>{mt.log("Tearing down root script"),dt&&(clearInterval(dt),dt=null)}}var L=T.withTag("xhrHook"),xr=new Map,br="bttfcXhrPatch",J=t=>{let r=t;return r[br]||(r[br]={method:void 0,url:void 0,headers:{},readyState:void 0,status:void 0,statusText:void 0,response:void 0,responseUrl:void 0}),r[br]};function Vc(){let t=XMLHttpRequest;if(t.bttfcHooked){L.warn("XMLHttpRequest is already hooked, skipping.");return}L.log("Hooking XMLHttpRequest"),t.bttfcHooked=!0,de(t.prototype,"readyState",(r,i)=>J(r).readyState??i()),de(t.prototype,"status",(r,i)=>J(r).status??i()),de(t.prototype,"statusText",(r,i)=>J(r).statusText??i()),de(t.prototype,"response",(r,i)=>J(r).response??i()),de(t.prototype,"responseURL",(r,i)=>J(r).responseUrl??i()),de(t.prototype,"responseText",(r,i)=>J(r).response?new TextDecoder().decode(J(r).response):i()),t.prototype.open=new Proxy(t.prototype.open,{apply:(r,i,o)=>{let e=o[0],n=o[1];L.log(`XMLHttpRequest open called with method: ${e}, url: ${n}`);let a=J(i);return a.method=e,a.url=n,a.headers={},Reflect.apply(r,i,o)}}),t.prototype.setRequestHeader=new Proxy(t.prototype.setRequestHeader,{apply:(r,i,o)=>{let e=o[0],n=o[1],a=J(i);return a.headers[e]=n,Reflect.apply(r,i,o)}}),t.prototype.send=new Proxy(t.prototype.send,{apply:async(r,i,o)=>{let e=J(i),n=Fc(e);for(let[a,u]of xr){L.log(`Calling hook "${a}"`);let l=u(n);if(l){L.log(`Hook "${a}" is overriding the request.`),Mc(i,l);return}else L.log(`Hook "${a}" did not return a response.`)}return L.log("No hooks returned a response, proceeding with original send."),Reflect.apply(r,i,o)}})}function de(t,r,i){let o=Object.getOwnPropertyDescriptor(t,r);if(!o?.get)throw new Error(`Property "${String(r)}" does not have a getter.`);Object.defineProperty(t,r,{get(){let e=o.get;if(e)return i(this,e.bind(this));L.warn(`Property "${String(r)}" does not have a getter.`)}})}function Fc(t,r){let i=new URL(t.url||"",location.origin),o=new Headers;for(let[e,n]of Object.entries(t.headers))o.append(e,n);return new Request(i.toString(),{method:t.method,headers:o,body:r??null})}async function Mc(t,r){let i=J(t);i.readyState=1,L.log(`Starting XMLHttpRequest with method: ${i.method}, url: ${i.url}`),t.dispatchEvent(new Event("readystatechange"));try{let o=await r();i.readyState=2,L.log(`XMLHttpRequest received headers with status: ${o.status}`),i.status=o.status,i.statusText=o.statusText,t.dispatchEvent(new Event("loadstart"));let e=new Uint8Array(await o.arrayBuffer());i.readyState=4,i.response=e,i.responseUrl=o.url,L.log(`Hook request completed with status: ${o.status}`),t.dispatchEvent(new Event("load")),t.dispatchEvent(new Event("readystatechange")),t.dispatchEvent(new Event("loadend"))}catch(o){L.error("XMLHttpRequest failed to start:",o),i.readyState=4,t.dispatchEvent(new Event("error")),t.dispatchEvent(new Event("readystatechange"));return}}function ba(t,r){Vc(),xr.has(t)?L.warn(`Hook with name "${t}" already exists, replacing it.`):L.log(`Inserting hook "${t}"`),xr.set(t,r)}var M={};ne(M,{$brand:()=>zr,$input:()=>Ei,$output:()=>Ti,NEVER:()=>kr,TimePrecision:()=>Ri,ZodAny:()=>Mu,ZodArray:()=>Gu,ZodBase64:()=>qo,ZodBase64URL:()=>Ho,ZodBigInt:()=>st,ZodBigIntFormat:()=>ta,ZodBoolean:()=>ct,ZodCIDRv4:()=>Ko,ZodCIDRv6:()=>Xo,ZodCUID:()=>Vo,ZodCUID2:()=>Fo,ZodCatch:()=>dc,ZodCustom:()=>dr,ZodCustomStringFormat:()=>ea,ZodDate:()=>lr,ZodDefault:()=>ac,ZodDiscriminatedUnion:()=>Ku,ZodE164:()=>Yo,ZodEmail:()=>Lo,ZodEmoji:()=>Ro,ZodEnum:()=>ot,ZodError:()=>Tl,ZodFile:()=>ic,ZodFirstPartyTypeKind:()=>da,ZodGUID:()=>or,ZodIPv4:()=>Bo,ZodIPv6:()=>Go,ZodISODate:()=>tr,ZodISODateTime:()=>er,ZodISODuration:()=>nr,ZodISOTime:()=>rr,ZodIntersection:()=>Xu,ZodIssueCode:()=>Vm,ZodJWT:()=>Qo,ZodKSUID:()=>Wo,ZodLazy:()=>$c,ZodLiteral:()=>rc,ZodMap:()=>Qu,ZodNaN:()=>fc,ZodNanoID:()=>Co,ZodNever:()=>Wu,ZodNonOptional:()=>la,ZodNull:()=>Vu,ZodNullable:()=>oc,ZodNumber:()=>ut,ZodNumberFormat:()=>we,ZodObject:()=>mr,ZodOptional:()=>sa,ZodPipe:()=>ma,ZodPrefault:()=>cc,ZodPromise:()=>yc,ZodReadonly:()=>gc,ZodRealError:()=>Ie,ZodRecord:()=>aa,ZodSet:()=>ec,ZodString:()=>at,ZodStringFormat:()=>O,ZodSuccess:()=>mc,ZodSymbol:()=>Ru,ZodTemplateLiteral:()=>hc,ZodTransform:()=>ua,ZodTuple:()=>Hu,ZodType:()=>k,ZodULID:()=>Mo,ZodURL:()=>Ao,ZodUUID:()=>Q,ZodUndefined:()=>Cu,ZodUnion:()=>ia,ZodUnknown:()=>Ju,ZodVoid:()=>Bu,ZodXID:()=>Jo,_ZodString:()=>Eo,_default:()=>uc,any:()=>vm,array:()=>na,base64:()=>tm,base64url:()=>rm,bigint:()=>mm,boolean:()=>Au,catch:()=>pc,check:()=>Tm,cidrv4:()=>Ql,cidrv6:()=>em,clone:()=>A,coerce:()=>pa,config:()=>N,core:()=>Y,cuid:()=>Bl,cuid2:()=>Gl,custom:()=>Em,date:()=>$m,discriminatedUnion:()=>km,e164:()=>nm,email:()=>Ll,emoji:()=>Jl,endsWith:()=>He,enum:()=>tc,file:()=>Pm,flattenError:()=>Ee,float32:()=>um,float64:()=>cm,formatError:()=>Le,function:()=>zo,getErrorMap:()=>Mm,globalRegistry:()=>G,gt:()=>q,gte:()=>R,guid:()=>Al,hostname:()=>am,includes:()=>Xe,instanceof:()=>Lm,int:()=>To,int32:()=>sm,int64:()=>dm,intersection:()=>qu,ipv4:()=>Hl,ipv6:()=>Yl,iso:()=>ir,json:()=>Rm,jwt:()=>im,keyof:()=>_m,ksuid:()=>ql,lazy:()=>_c,length:()=>ze,literal:()=>nc,locales:()=>Me,looseObject:()=>xm,lowercase:()=>Ge,lt:()=>X,lte:()=>F,map:()=>wm,maxLength:()=>ke,maxSize:()=>xe,mime:()=>Ye,minLength:()=>re,minSize:()=>le,multipleOf:()=>se,nan:()=>Nm,nanoid:()=>Wl,nativeEnum:()=>jm,negative:()=>fo,never:()=>ra,nonnegative:()=>vo,nonoptional:()=>lc,nonpositive:()=>go,normalize:()=>Qe,null:()=>Fu,nullable:()=>cr,nullish:()=>Om,number:()=>Lu,object:()=>ym,optional:()=>ur,overwrite:()=>H,parse:()=>Oo,parseAsync:()=>Uo,partialRecord:()=>Im,pipe:()=>sr,positive:()=>po,prefault:()=>sc,preprocess:()=>Cm,prettifyError:()=>Dr,promise:()=>Dm,property:()=>ho,readonly:()=>vc,record:()=>Yu,refine:()=>bc,regex:()=>Be,regexes:()=>K,registry:()=>Ot,safeParse:()=>No,safeParseAsync:()=>Zo,set:()=>Sm,setErrorMap:()=>Fm,size:()=>We,startsWith:()=>qe,strictObject:()=>bm,string:()=>Do,stringFormat:()=>om,stringbool:()=>Am,success:()=>Um,superRefine:()=>xc,symbol:()=>fm,templateLiteral:()=>Zm,toJSONSchema:()=>Io,toLowerCase:()=>tt,toUpperCase:()=>rt,transform:()=>ca,treeifyError:()=>Zr,trim:()=>et,tuple:()=>zm,uint32:()=>lm,uint64:()=>pm,ulid:()=>Kl,undefined:()=>gm,union:()=>oa,unknown:()=>ar,uppercase:()=>Ke,url:()=>Ml,uuid:()=>Rl,uuidv4:()=>Cl,uuidv6:()=>Vl,uuidv7:()=>Fl,void:()=>hm,xid:()=>Xl});var Y={};ne(Y,{$ZodAny:()=>si,$ZodArray:()=>Ce,$ZodAsyncError:()=>W,$ZodBase64:()=>Qn,$ZodBase64URL:()=>ei,$ZodBigInt:()=>St,$ZodBigIntFormat:()=>oi,$ZodBoolean:()=>Re,$ZodCIDRv4:()=>qn,$ZodCIDRv6:()=>Hn,$ZodCUID:()=>Rn,$ZodCUID2:()=>Cn,$ZodCatch:()=>ji,$ZodCheck:()=>U,$ZodCheckBigIntFormat:()=>gn,$ZodCheckEndsWith:()=>Sn,$ZodCheckGreaterThan:()=>kt,$ZodCheckIncludes:()=>In,$ZodCheckLengthEquals:()=>bn,$ZodCheckLessThan:()=>xt,$ZodCheckLowerCase:()=>kn,$ZodCheckMaxLength:()=>_n,$ZodCheckMaxSize:()=>vn,$ZodCheckMimeType:()=>Pn,$ZodCheckMinLength:()=>yn,$ZodCheckMinSize:()=>hn,$ZodCheckMultipleOf:()=>pn,$ZodCheckNumberFormat:()=>fn,$ZodCheckOverwrite:()=>On,$ZodCheckProperty:()=>jn,$ZodCheckRegex:()=>xn,$ZodCheckSizeEquals:()=>$n,$ZodCheckStartsWith:()=>wn,$ZodCheckStringFormat:()=>$e,$ZodCheckUpperCase:()=>zn,$ZodCustom:()=>Di,$ZodCustomStringFormat:()=>ni,$ZodDate:()=>di,$ZodDefault:()=>zi,$ZodDiscriminatedUnion:()=>fi,$ZodE164:()=>ti,$ZodEmail:()=>Tn,$ZodEmoji:()=>Ln,$ZodEnum:()=>_i,$ZodError:()=>Te,$ZodFile:()=>bi,$ZodFunction:()=>Qt,$ZodGUID:()=>Zn,$ZodIPv4:()=>Kn,$ZodIPv6:()=>Xn,$ZodISODate:()=>Wn,$ZodISODateTime:()=>Jn,$ZodISODuration:()=>Gn,$ZodISOTime:()=>Bn,$ZodIntersection:()=>gi,$ZodJWT:()=>ri,$ZodKSUID:()=>Mn,$ZodLazy:()=>Zi,$ZodLiteral:()=>yi,$ZodMap:()=>hi,$ZodNaN:()=>Pi,$ZodNanoID:()=>An,$ZodNever:()=>li,$ZodNonOptional:()=>wi,$ZodNull:()=>ci,$ZodNullable:()=>ki,$ZodNumber:()=>wt,$ZodNumberFormat:()=>ii,$ZodObject:()=>pi,$ZodOptional:()=>xi,$ZodPipe:()=>Fe,$ZodPrefault:()=>Ii,$ZodPromise:()=>Ni,$ZodReadonly:()=>Oi,$ZodRealError:()=>he,$ZodRecord:()=>vi,$ZodRegistry:()=>ye,$ZodSet:()=>$i,$ZodString:()=>ue,$ZodStringFormat:()=>j,$ZodSuccess:()=>Si,$ZodSymbol:()=>ai,$ZodTemplateLiteral:()=>Ui,$ZodTransform:()=>Ve,$ZodTuple:()=>ce,$ZodType:()=>x,$ZodULID:()=>Vn,$ZodURL:()=>En,$ZodUUID:()=>Dn,$ZodUndefined:()=>ui,$ZodUnion:()=>jt,$ZodUnknown:()=>_e,$ZodVoid:()=>mi,$ZodXID:()=>Fn,$brand:()=>zr,$constructor:()=>c,$input:()=>Ei,$output:()=>Ti,Doc:()=>Ae,JSONSchema:()=>Du,JSONSchemaGenerator:()=>it,NEVER:()=>kr,TimePrecision:()=>Ri,_any:()=>ao,_array:()=>nt,_base64:()=>Kt,_base64url:()=>Xt,_bigint:()=>Qi,_boolean:()=>Hi,_catch:()=>jl,_check:()=>Zu,_cidrv4:()=>Bt,_cidrv6:()=>Gt,_coercedBigint:()=>eo,_coercedBoolean:()=>Yi,_coercedDate:()=>lo,_coercedNumber:()=>Wi,_coercedString:()=>Ai,_cuid:()=>Rt,_cuid2:()=>Ct,_custom:()=>yo,_date:()=>so,_default:()=>Il,_discriminatedUnion:()=>fl,_e164:()=>qt,_email:()=>Ut,_emoji:()=>Lt,_endsWith:()=>He,_enum:()=>_l,_file:()=>_o,_float32:()=>Gi,_float64:()=>Ki,_gt:()=>q,_gte:()=>R,_guid:()=>Je,_includes:()=>Xe,_int:()=>Bi,_int32:()=>Xi,_int64:()=>to,_intersection:()=>gl,_ipv4:()=>Jt,_ipv6:()=>Wt,_isoDate:()=>Vi,_isoDateTime:()=>Ci,_isoDuration:()=>Mi,_isoTime:()=>Fi,_jwt:()=>Ht,_ksuid:()=>Mt,_lazy:()=>Nl,_length:()=>ze,_literal:()=>bl,_lowercase:()=>Ge,_lt:()=>X,_lte:()=>F,_map:()=>hl,_max:()=>F,_maxLength:()=>ke,_maxSize:()=>xe,_mime:()=>Ye,_min:()=>R,_minLength:()=>re,_minSize:()=>le,_multipleOf:()=>se,_nan:()=>mo,_nanoid:()=>At,_nativeEnum:()=>yl,_negative:()=>fo,_never:()=>uo,_nonnegative:()=>vo,_nonoptional:()=>wl,_nonpositive:()=>go,_normalize:()=>Qe,_null:()=>oo,_nullable:()=>zl,_number:()=>Ji,_optional:()=>kl,_overwrite:()=>H,_parse:()=>gt,_parseAsync:()=>ht,_pipe:()=>Pl,_positive:()=>po,_promise:()=>Zl,_property:()=>ho,_readonly:()=>Ol,_record:()=>vl,_refine:()=>bo,_regex:()=>Be,_safeParse:()=>_t,_safeParseAsync:()=>yt,_set:()=>$l,_size:()=>We,_startsWith:()=>qe,_string:()=>Li,_stringFormat:()=>Yt,_stringbool:()=>ko,_success:()=>Sl,_superRefine:()=>xo,_symbol:()=>no,_templateLiteral:()=>Ul,_toLowerCase:()=>tt,_toUpperCase:()=>rt,_transform:()=>xl,_trim:()=>et,_tuple:()=>$o,_uint32:()=>qi,_uint64:()=>ro,_ulid:()=>Vt,_undefined:()=>io,_union:()=>pl,_unknown:()=>be,_uppercase:()=>Ke,_url:()=>Et,_uuid:()=>Nt,_uuidv4:()=>Zt,_uuidv6:()=>Dt,_uuidv7:()=>Tt,_void:()=>co,_xid:()=>Ft,clone:()=>A,config:()=>N,flattenError:()=>Ee,formatError:()=>Le,function:()=>zo,globalConfig:()=>Se,globalRegistry:()=>G,isValidBase64:()=>Yn,isValidBase64URL:()=>Va,isValidJWT:()=>Fa,locales:()=>Me,parse:()=>vt,parseAsync:()=>$t,prettifyError:()=>Dr,regexes:()=>K,registry:()=>Ot,safeParse:()=>Tr,safeParseAsync:()=>Er,toDotPath:()=>za,toJSONSchema:()=>Io,treeifyError:()=>Zr,util:()=>v,version:()=>Un});var kr=Object.freeze({status:"aborted"});function c(t,r,i){function o(u,l){var p;Object.defineProperty(u,"_zod",{value:u._zod??{},enumerable:!1}),(p=u._zod).traits??(p.traits=new Set),u._zod.traits.add(t),r(u,l);for(let h in a.prototype)h in u||Object.defineProperty(u,h,{value:a.prototype[h].bind(u)});u._zod.constr=a,u._zod.def=l}let e=i?.Parent??Object;class n extends e{}Object.defineProperty(n,"name",{value:t});function a(u){var l;let p=i?.Parent?new n:this;o(p,u),(l=p._zod).deferred??(l.deferred=[]);for(let h of p._zod.deferred)h();return p}return Object.defineProperty(a,"init",{value:o}),Object.defineProperty(a,Symbol.hasInstance,{value:u=>i?.Parent&&u instanceof i.Parent?!0:u?._zod?.traits?.has(t)}),Object.defineProperty(a,"name",{value:t}),a}var zr=Symbol("zod_brand"),W=class extends Error{constructor(){super("Encountered Promise during synchronous parse. Use .parseAsync() instead.")}},Se={};function N(t){return t&&Object.assign(Se,t),Se}var v={};ne(v,{BIGINT_FORMAT_RANGES:()=>Nr,Class:()=>wr,NUMBER_FORMAT_RANGES:()=>Ur,aborted:()=>oe,allowsEval:()=>jr,assert:()=>Kc,assertEqual:()=>Jc,assertIs:()=>Bc,assertNever:()=>Gc,assertNotEqual:()=>Wc,assignProp:()=>ie,cached:()=>Oe,captureStackTrace:()=>ft,cleanEnum:()=>cs,cleanRegex:()=>Ue,clone:()=>A,cloneDef:()=>Xc,createTransparentProxy:()=>ts,defineLazy:()=>w,esc:()=>pt,escapeRegex:()=>B,extend:()=>is,finalizeIssue:()=>V,floatSafeRemainder:()=>Sr,getElementAtPath:()=>qc,getEnumValues:()=>Pe,getLengthableOrigin:()=>De,getParsedType:()=>es,getSizableOrigin:()=>Ze,isObject:()=>pe,isPlainObject:()=>ge,issue:()=>ve,joinValues:()=>s,jsonStringifyReplacer:()=>fe,merge:()=>os,mergeDefs:()=>te,normalizeParams:()=>f,nullish:()=>ee,numKeys:()=>Qc,omit:()=>ns,optionalKeys:()=>Or,partial:()=>as,pick:()=>rs,prefixIssues:()=>C,primitiveTypes:()=>Pr,promiseAllObject:()=>Hc,propertyKeyTypes:()=>Ne,randomString:()=>Yc,required:()=>us,stringifyPrimitive:()=>g,unwrapMessage:()=>je});function Jc(t){return t}function Wc(t){return t}function Bc(t){}function Gc(t){throw new Error}function Kc(t){}function Pe(t){let r=Object.values(t).filter(o=>typeof o=="number");return Object.entries(t).filter(([o,e])=>r.indexOf(+o)===-1).map(([o,e])=>e)}function s(t,r="|"){return t.map(i=>g(i)).join(r)}function fe(t,r){return typeof r=="bigint"?r.toString():r}function Oe(t){return{get value(){{let i=t();return Object.defineProperty(this,"value",{value:i}),i}throw new Error("cached value already set")}}}function ee(t){return t==null}function Ue(t){let r=t.startsWith("^")?1:0,i=t.endsWith("$")?t.length-1:t.length;return t.slice(r,i)}function Sr(t,r){let i=(t.toString().split(".")[1]||"").length,o=r.toString(),e=(o.split(".")[1]||"").length;if(e===0&&/\d?e-\d?/.test(o)){let l=o.match(/\d?e-(\d?)/);l?.[1]&&(e=Number.parseInt(l[1]))}let n=i>e?i:e,a=Number.parseInt(t.toFixed(n).replace(".","")),u=Number.parseInt(r.toFixed(n).replace(".",""));return a%u/10**n}var xa=Symbol("evaluating");function w(t,r,i){let o;Object.defineProperty(t,r,{get(){if(o!==xa)return o===void 0&&(o=xa,o=i()),o},set(e){Object.defineProperty(t,r,{value:e})},configurable:!0})}function ie(t,r,i){Object.defineProperty(t,r,{value:i,writable:!0,enumerable:!0,configurable:!0})}function te(...t){let r={};for(let i of t){let o=Object.getOwnPropertyDescriptors(i);Object.assign(r,o)}return Object.defineProperties({},r)}function Xc(t){return te(t._zod.def)}function qc(t,r){return r?r.reduce((i,o)=>i?.[o],t):t}function Hc(t){let r=Object.keys(t),i=r.map(o=>t[o]);return Promise.all(i).then(o=>{let e={};for(let n=0;n<r.length;n++)e[r[n]]=o[n];return e})}function Yc(t=10){let r="abcdefghijklmnopqrstuvwxyz",i="";for(let o=0;o<t;o++)i+=r[Math.floor(Math.random()*r.length)];return i}function pt(t){return JSON.stringify(t)}var ft="captureStackTrace"in Error?Error.captureStackTrace:(...t)=>{};function pe(t){return typeof t=="object"&&t!==null&&!Array.isArray(t)}var jr=Oe(()=>{if(typeof navigator<"u"&&navigator?.userAgent?.includes("Cloudflare"))return!1;try{let t=Function;return new t(""),!0}catch{return!1}});function ge(t){if(pe(t)===!1)return!1;let r=t.constructor;if(r===void 0)return!0;let i=r.prototype;return!(pe(i)===!1||Object.prototype.hasOwnProperty.call(i,"isPrototypeOf")===!1)}function Qc(t){let r=0;for(let i in t)Object.prototype.hasOwnProperty.call(t,i)&&r++;return r}var es=t=>{let r=typeof t;switch(r){case"undefined":return"undefined";case"string":return"string";case"number":return Number.isNaN(t)?"nan":"number";case"boolean":return"boolean";case"function":return"function";case"bigint":return"bigint";case"symbol":return"symbol";case"object":return Array.isArray(t)?"array":t===null?"null":t.then&&typeof t.then=="function"&&t.catch&&typeof t.catch=="function"?"promise":typeof Map<"u"&&t instanceof Map?"map":typeof Set<"u"&&t instanceof Set?"set":typeof Date<"u"&&t instanceof Date?"date":typeof File<"u"&&t instanceof File?"file":"object";default:throw new Error(`Unknown data type: ${r}`)}},Ne=new Set(["string","number","symbol"]),Pr=new Set(["string","number","bigint","boolean","symbol","undefined"]);function B(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function A(t,r,i){let o=new t._zod.constr(r??t._zod.def);return(!r||i?.parent)&&(o._zod.parent=t),o}function f(t){let r=t;if(!r)return{};if(typeof r=="string")return{error:()=>r};if(r?.message!==void 0){if(r?.error!==void 0)throw new Error("Cannot specify both `message` and `error` params");r.error=r.message}return delete r.message,typeof r.error=="string"?{...r,error:()=>r.error}:r}function ts(t){let r;return new Proxy({},{get(i,o,e){return r??(r=t()),Reflect.get(r,o,e)},set(i,o,e,n){return r??(r=t()),Reflect.set(r,o,e,n)},has(i,o){return r??(r=t()),Reflect.has(r,o)},deleteProperty(i,o){return r??(r=t()),Reflect.deleteProperty(r,o)},ownKeys(i){return r??(r=t()),Reflect.ownKeys(r)},getOwnPropertyDescriptor(i,o){return r??(r=t()),Reflect.getOwnPropertyDescriptor(r,o)},defineProperty(i,o,e){return r??(r=t()),Reflect.defineProperty(r,o,e)}})}function g(t){return typeof t=="bigint"?t.toString()+"n":typeof t=="string"?`"${t}"`:`${t}`}function Or(t){return Object.keys(t).filter(r=>t[r]._zod.optin==="optional"&&t[r]._zod.optout==="optional")}var Ur={safeint:[Number.MIN_SAFE_INTEGER,Number.MAX_SAFE_INTEGER],int32:[-2147483648,2147483647],uint32:[0,4294967295],float32:[-34028234663852886e22,34028234663852886e22],float64:[-Number.MAX_VALUE,Number.MAX_VALUE]},Nr={int64:[BigInt("-9223372036854775808"),BigInt("9223372036854775807")],uint64:[BigInt(0),BigInt("18446744073709551615")]};function rs(t,r){let i=t._zod.def,o=te(t._zod.def,{get shape(){let e={};for(let n in r){if(!(n in i.shape))throw new Error(`Unrecognized key: "${n}"`);r[n]&&(e[n]=i.shape[n])}return ie(this,"shape",e),e},checks:[]});return A(t,o)}function ns(t,r){let i=t._zod.def,o=te(t._zod.def,{get shape(){let e={...t._zod.def.shape};for(let n in r){if(!(n in i.shape))throw new Error(`Unrecognized key: "${n}"`);r[n]&&delete e[n]}return ie(this,"shape",e),e},checks:[]});return A(t,o)}function is(t,r){if(!ge(r))throw new Error("Invalid input to extend: expected a plain object");let i=te(t._zod.def,{get shape(){let o={...t._zod.def.shape,...r};return ie(this,"shape",o),o},checks:[]});return A(t,i)}function os(t,r){let i=te(t._zod.def,{get shape(){let o={...t._zod.def.shape,...r._zod.def.shape};return ie(this,"shape",o),o},get catchall(){return r._zod.def.catchall},checks:[]});return A(t,i)}function as(t,r,i){let o=te(r._zod.def,{get shape(){let e=r._zod.def.shape,n={...e};if(i)for(let a in i){if(!(a in e))throw new Error(`Unrecognized key: "${a}"`);i[a]&&(n[a]=t?new t({type:"optional",innerType:e[a]}):e[a])}else for(let a in e)n[a]=t?new t({type:"optional",innerType:e[a]}):e[a];return ie(this,"shape",n),n},checks:[]});return A(r,o)}function us(t,r,i){let o=te(r._zod.def,{get shape(){let e=r._zod.def.shape,n={...e};if(i)for(let a in i){if(!(a in n))throw new Error(`Unrecognized key: "${a}"`);i[a]&&(n[a]=new t({type:"nonoptional",innerType:e[a]}))}else for(let a in e)n[a]=new t({type:"nonoptional",innerType:e[a]});return ie(this,"shape",n),n},checks:[]});return A(r,o)}function oe(t,r=0){for(let i=r;i<t.issues.length;i++)if(t.issues[i]?.continue!==!0)return!0;return!1}function C(t,r){return r.map(i=>{var o;return(o=i).path??(o.path=[]),i.path.unshift(t),i})}function je(t){return typeof t=="string"?t:t?.message}function V(t,r,i){let o={...t,path:t.path??[]};if(!t.message){let e=je(t.inst?._zod.def?.error?.(t))??je(r?.error?.(t))??je(i.customError?.(t))??je(i.localeError?.(t))??"Invalid input";o.message=e}return delete o.inst,delete o.continue,r?.reportInput||delete o.input,o}function Ze(t){return t instanceof Set?"set":t instanceof Map?"map":t instanceof File?"file":"unknown"}function De(t){return Array.isArray(t)?"array":typeof t=="string"?"string":"unknown"}function ve(...t){let[r,i,o]=t;return typeof r=="string"?{message:r,code:"custom",input:i,inst:o}:{...r}}function cs(t){return Object.entries(t).filter(([r,i])=>Number.isNaN(Number.parseInt(r,10))).map(r=>r[1])}var wr=class{constructor(...r){}};var ka=(t,r)=>{t.name="$ZodError",Object.defineProperty(t,"_zod",{value:t._zod,enumerable:!1}),Object.defineProperty(t,"issues",{value:r,enumerable:!1}),t.message=JSON.stringify(r,fe,2),Object.defineProperty(t,"toString",{value:()=>t.message,enumerable:!1})},Te=c("$ZodError",ka),he=c("$ZodError",ka,{Parent:Error});function Ee(t,r=i=>i.message){let i={},o=[];for(let e of t.issues)e.path.length>0?(i[e.path[0]]=i[e.path[0]]||[],i[e.path[0]].push(r(e))):o.push(r(e));return{formErrors:o,fieldErrors:i}}function Le(t,r){let i=r||function(n){return n.message},o={_errors:[]},e=n=>{for(let a of n.issues)if(a.code==="invalid_union"&&a.errors.length)a.errors.map(u=>e({issues:u}));else if(a.code==="invalid_key")e({issues:a.issues});else if(a.code==="invalid_element")e({issues:a.issues});else if(a.path.length===0)o._errors.push(i(a));else{let u=o,l=0;for(;l<a.path.length;){let p=a.path[l];l===a.path.length-1?(u[p]=u[p]||{_errors:[]},u[p]._errors.push(i(a))):u[p]=u[p]||{_errors:[]},u=u[p],l++}}};return e(t),o}function Zr(t,r){let i=r||function(n){return n.message},o={errors:[]},e=(n,a=[])=>{var u,l;for(let p of n.issues)if(p.code==="invalid_union"&&p.errors.length)p.errors.map(h=>e({issues:h},p.path));else if(p.code==="invalid_key")e({issues:p.issues},p.path);else if(p.code==="invalid_element")e({issues:p.issues},p.path);else{let h=[...a,...p.path];if(h.length===0){o.errors.push(i(p));continue}let d=o,b=0;for(;b<h.length;){let $=h[b],m=b===h.length-1;typeof $=="string"?(d.properties??(d.properties={}),(u=d.properties)[$]??(u[$]={errors:[]}),d=d.properties[$]):(d.items??(d.items=[]),(l=d.items)[$]??(l[$]={errors:[]}),d=d.items[$]),m&&d.errors.push(i(p)),b++}}};return e(t),o}function za(t){let r=[],i=t.map(o=>typeof o=="object"?o.key:o);for(let o of i)typeof o=="number"?r.push(`[${o}]`):typeof o=="symbol"?r.push(`[${JSON.stringify(String(o))}]`):/[^\w$]/.test(o)?r.push(`[${JSON.stringify(o)}]`):(r.length&&r.push("."),r.push(o));return r.join("")}function Dr(t){let r=[],i=[...t.issues].sort((o,e)=>(o.path??[]).length-(e.path??[]).length);for(let o of i)r.push(`\u2716 ${o.message}`),o.path?.length&&r.push(`  \u2192 at ${za(o.path)}`);return r.join(`
`)}var gt=t=>(r,i,o,e)=>{let n=o?Object.assign(o,{async:!1}):{async:!1},a=r._zod.run({value:i,issues:[]},n);if(a instanceof Promise)throw new W;if(a.issues.length){let u=new(e?.Err??t)(a.issues.map(l=>V(l,n,N())));throw ft(u,e?.callee),u}return a.value},vt=gt(he),ht=t=>async(r,i,o,e)=>{let n=o?Object.assign(o,{async:!0}):{async:!0},a=r._zod.run({value:i,issues:[]},n);if(a instanceof Promise&&(a=await a),a.issues.length){let u=new(e?.Err??t)(a.issues.map(l=>V(l,n,N())));throw ft(u,e?.callee),u}return a.value},$t=ht(he),_t=t=>(r,i,o)=>{let e=o?{...o,async:!1}:{async:!1},n=r._zod.run({value:i,issues:[]},e);if(n instanceof Promise)throw new W;return n.issues.length?{success:!1,error:new(t??Te)(n.issues.map(a=>V(a,e,N())))}:{success:!0,data:n.value}},Tr=_t(he),yt=t=>async(r,i,o)=>{let e=o?Object.assign(o,{async:!0}):{async:!0},n=r._zod.run({value:i,issues:[]},e);return n instanceof Promise&&(n=await n),n.issues.length?{success:!1,error:new t(n.issues.map(a=>V(a,e,N())))}:{success:!0,data:n.value}},Er=yt(he);var K={};ne(K,{base64:()=>Hr,base64url:()=>bt,bigint:()=>on,boolean:()=>cn,browserEmail:()=>$s,cidrv4:()=>Xr,cidrv6:()=>qr,cuid:()=>Lr,cuid2:()=>Ar,date:()=>en,datetime:()=>rn,domain:()=>ys,duration:()=>Mr,e164:()=>Qr,email:()=>Wr,emoji:()=>Br,extendedDuration:()=>ls,guid:()=>Jr,hostname:()=>Yr,html5Email:()=>fs,idnEmail:()=>hs,integer:()=>an,ipv4:()=>Gr,ipv6:()=>Kr,ksuid:()=>Vr,lowercase:()=>mn,nanoid:()=>Fr,null:()=>sn,number:()=>un,rfc5322Email:()=>gs,string:()=>nn,time:()=>tn,ulid:()=>Rr,undefined:()=>ln,unicodeEmail:()=>vs,uppercase:()=>dn,uuid:()=>ae,uuid4:()=>ms,uuid6:()=>ds,uuid7:()=>ps,xid:()=>Cr});var Lr=/^[cC][^\s-]{8,}$/,Ar=/^[0-9a-z]+$/,Rr=/^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/,Cr=/^[0-9a-vA-V]{20}$/,Vr=/^[A-Za-z0-9]{27}$/,Fr=/^[a-zA-Z0-9_-]{21}$/,Mr=/^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/,ls=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Jr=/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/,ae=t=>t?new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${t}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`):/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$/,ms=ae(4),ds=ae(6),ps=ae(7),Wr=/^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/,fs=/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,gs=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,vs=/^[^\s@"]{1,64}@[^\s@]{1,255}$/u,hs=/^[^\s@"]{1,64}@[^\s@]{1,255}$/u,$s=/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,_s="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";function Br(){return new RegExp(_s,"u")}var Gr=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,Kr=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/,Xr=/^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/,qr=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Hr=/^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/,bt=/^[A-Za-z0-9_-]*$/,Yr=/^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/,ys=/^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/,Qr=/^\+(?:[0-9]){6,14}[0-9]$/,Ia="(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))",en=new RegExp(`^${Ia}$`);function wa(t){let r="(?:[01]\\d|2[0-3]):[0-5]\\d";return typeof t.precision=="number"?t.precision===-1?`${r}`:t.precision===0?`${r}:[0-5]\\d`:`${r}:[0-5]\\d\\.\\d{${t.precision}}`:`${r}(?::[0-5]\\d(?:\\.\\d+)?)?`}function tn(t){return new RegExp(`^${wa(t)}$`)}function rn(t){let r=wa({precision:t.precision}),i=["Z"];t.local&&i.push(""),t.offset&&i.push("([+-](?:[01]\\d|2[0-3]):[0-5]\\d)");let o=`${r}(?:${i.join("|")})`;return new RegExp(`^${Ia}T(?:${o})$`)}var nn=t=>{let r=t?`[\\s\\S]{${t?.minimum??0},${t?.maximum??""}}`:"[\\s\\S]*";return new RegExp(`^${r}$`)},on=/^\d+n?$/,an=/^\d+$/,un=/^-?\d+(?:\.\d+)?/i,cn=/true|false/i,sn=/null/i;var ln=/undefined/i;var mn=/^[^A-Z]*$/,dn=/^[^a-z]*$/;var U=c("$ZodCheck",(t,r)=>{var i;t._zod??(t._zod={}),t._zod.def=r,(i=t._zod).onattach??(i.onattach=[])}),ja={number:"number",bigint:"bigint",object:"date"},xt=c("$ZodCheckLessThan",(t,r)=>{U.init(t,r);let i=ja[typeof r.value];t._zod.onattach.push(o=>{let e=o._zod.bag,n=(r.inclusive?e.maximum:e.exclusiveMaximum)??Number.POSITIVE_INFINITY;r.value<n&&(r.inclusive?e.maximum=r.value:e.exclusiveMaximum=r.value)}),t._zod.check=o=>{(r.inclusive?o.value<=r.value:o.value<r.value)||o.issues.push({origin:i,code:"too_big",maximum:r.value,input:o.value,inclusive:r.inclusive,inst:t,continue:!r.abort})}}),kt=c("$ZodCheckGreaterThan",(t,r)=>{U.init(t,r);let i=ja[typeof r.value];t._zod.onattach.push(o=>{let e=o._zod.bag,n=(r.inclusive?e.minimum:e.exclusiveMinimum)??Number.NEGATIVE_INFINITY;r.value>n&&(r.inclusive?e.minimum=r.value:e.exclusiveMinimum=r.value)}),t._zod.check=o=>{(r.inclusive?o.value>=r.value:o.value>r.value)||o.issues.push({origin:i,code:"too_small",minimum:r.value,input:o.value,inclusive:r.inclusive,inst:t,continue:!r.abort})}}),pn=c("$ZodCheckMultipleOf",(t,r)=>{U.init(t,r),t._zod.onattach.push(i=>{var o;(o=i._zod.bag).multipleOf??(o.multipleOf=r.value)}),t._zod.check=i=>{if(typeof i.value!=typeof r.value)throw new Error("Cannot mix number and bigint in multiple_of check.");(typeof i.value=="bigint"?i.value%r.value===BigInt(0):Sr(i.value,r.value)===0)||i.issues.push({origin:typeof i.value,code:"not_multiple_of",divisor:r.value,input:i.value,inst:t,continue:!r.abort})}}),fn=c("$ZodCheckNumberFormat",(t,r)=>{U.init(t,r),r.format=r.format||"float64";let i=r.format?.includes("int"),o=i?"int":"number",[e,n]=Ur[r.format];t._zod.onattach.push(a=>{let u=a._zod.bag;u.format=r.format,u.minimum=e,u.maximum=n,i&&(u.pattern=an)}),t._zod.check=a=>{let u=a.value;if(i){if(!Number.isInteger(u)){a.issues.push({expected:o,format:r.format,code:"invalid_type",continue:!1,input:u,inst:t});return}if(!Number.isSafeInteger(u)){u>0?a.issues.push({input:u,code:"too_big",maximum:Number.MAX_SAFE_INTEGER,note:"Integers must be within the safe integer range.",inst:t,origin:o,continue:!r.abort}):a.issues.push({input:u,code:"too_small",minimum:Number.MIN_SAFE_INTEGER,note:"Integers must be within the safe integer range.",inst:t,origin:o,continue:!r.abort});return}}u<e&&a.issues.push({origin:"number",input:u,code:"too_small",minimum:e,inclusive:!0,inst:t,continue:!r.abort}),u>n&&a.issues.push({origin:"number",input:u,code:"too_big",maximum:n,inst:t})}}),gn=c("$ZodCheckBigIntFormat",(t,r)=>{U.init(t,r);let[i,o]=Nr[r.format];t._zod.onattach.push(e=>{let n=e._zod.bag;n.format=r.format,n.minimum=i,n.maximum=o}),t._zod.check=e=>{let n=e.value;n<i&&e.issues.push({origin:"bigint",input:n,code:"too_small",minimum:i,inclusive:!0,inst:t,continue:!r.abort}),n>o&&e.issues.push({origin:"bigint",input:n,code:"too_big",maximum:o,inst:t})}}),vn=c("$ZodCheckMaxSize",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.size!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag.maximum??Number.POSITIVE_INFINITY;r.maximum<e&&(o._zod.bag.maximum=r.maximum)}),t._zod.check=o=>{let e=o.value;e.size<=r.maximum||o.issues.push({origin:Ze(e),code:"too_big",maximum:r.maximum,input:e,inst:t,continue:!r.abort})}}),hn=c("$ZodCheckMinSize",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.size!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag.minimum??Number.NEGATIVE_INFINITY;r.minimum>e&&(o._zod.bag.minimum=r.minimum)}),t._zod.check=o=>{let e=o.value;e.size>=r.minimum||o.issues.push({origin:Ze(e),code:"too_small",minimum:r.minimum,input:e,inst:t,continue:!r.abort})}}),$n=c("$ZodCheckSizeEquals",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.size!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag;e.minimum=r.size,e.maximum=r.size,e.size=r.size}),t._zod.check=o=>{let e=o.value,n=e.size;if(n===r.size)return;let a=n>r.size;o.issues.push({origin:Ze(e),...a?{code:"too_big",maximum:r.size}:{code:"too_small",minimum:r.size},inclusive:!0,exact:!0,input:o.value,inst:t,continue:!r.abort})}}),_n=c("$ZodCheckMaxLength",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.length!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag.maximum??Number.POSITIVE_INFINITY;r.maximum<e&&(o._zod.bag.maximum=r.maximum)}),t._zod.check=o=>{let e=o.value;if(e.length<=r.maximum)return;let a=De(e);o.issues.push({origin:a,code:"too_big",maximum:r.maximum,inclusive:!0,input:e,inst:t,continue:!r.abort})}}),yn=c("$ZodCheckMinLength",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.length!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag.minimum??Number.NEGATIVE_INFINITY;r.minimum>e&&(o._zod.bag.minimum=r.minimum)}),t._zod.check=o=>{let e=o.value;if(e.length>=r.minimum)return;let a=De(e);o.issues.push({origin:a,code:"too_small",minimum:r.minimum,inclusive:!0,input:e,inst:t,continue:!r.abort})}}),bn=c("$ZodCheckLengthEquals",(t,r)=>{var i;U.init(t,r),(i=t._zod.def).when??(i.when=o=>{let e=o.value;return!ee(e)&&e.length!==void 0}),t._zod.onattach.push(o=>{let e=o._zod.bag;e.minimum=r.length,e.maximum=r.length,e.length=r.length}),t._zod.check=o=>{let e=o.value,n=e.length;if(n===r.length)return;let a=De(e),u=n>r.length;o.issues.push({origin:a,...u?{code:"too_big",maximum:r.length}:{code:"too_small",minimum:r.length},inclusive:!0,exact:!0,input:o.value,inst:t,continue:!r.abort})}}),$e=c("$ZodCheckStringFormat",(t,r)=>{var i,o;U.init(t,r),t._zod.onattach.push(e=>{let n=e._zod.bag;n.format=r.format,r.pattern&&(n.patterns??(n.patterns=new Set),n.patterns.add(r.pattern))}),r.pattern?(i=t._zod).check??(i.check=e=>{r.pattern.lastIndex=0,!r.pattern.test(e.value)&&e.issues.push({origin:"string",code:"invalid_format",format:r.format,input:e.value,...r.pattern?{pattern:r.pattern.toString()}:{},inst:t,continue:!r.abort})}):(o=t._zod).check??(o.check=()=>{})}),xn=c("$ZodCheckRegex",(t,r)=>{$e.init(t,r),t._zod.check=i=>{r.pattern.lastIndex=0,!r.pattern.test(i.value)&&i.issues.push({origin:"string",code:"invalid_format",format:"regex",input:i.value,pattern:r.pattern.toString(),inst:t,continue:!r.abort})}}),kn=c("$ZodCheckLowerCase",(t,r)=>{r.pattern??(r.pattern=mn),$e.init(t,r)}),zn=c("$ZodCheckUpperCase",(t,r)=>{r.pattern??(r.pattern=dn),$e.init(t,r)}),In=c("$ZodCheckIncludes",(t,r)=>{U.init(t,r);let i=B(r.includes),o=new RegExp(typeof r.position=="number"?`^.{${r.position}}${i}`:i);r.pattern=o,t._zod.onattach.push(e=>{let n=e._zod.bag;n.patterns??(n.patterns=new Set),n.patterns.add(o)}),t._zod.check=e=>{e.value.includes(r.includes,r.position)||e.issues.push({origin:"string",code:"invalid_format",format:"includes",includes:r.includes,input:e.value,inst:t,continue:!r.abort})}}),wn=c("$ZodCheckStartsWith",(t,r)=>{U.init(t,r);let i=new RegExp(`^${B(r.prefix)}.*`);r.pattern??(r.pattern=i),t._zod.onattach.push(o=>{let e=o._zod.bag;e.patterns??(e.patterns=new Set),e.patterns.add(i)}),t._zod.check=o=>{o.value.startsWith(r.prefix)||o.issues.push({origin:"string",code:"invalid_format",format:"starts_with",prefix:r.prefix,input:o.value,inst:t,continue:!r.abort})}}),Sn=c("$ZodCheckEndsWith",(t,r)=>{U.init(t,r);let i=new RegExp(`.*${B(r.suffix)}$`);r.pattern??(r.pattern=i),t._zod.onattach.push(o=>{let e=o._zod.bag;e.patterns??(e.patterns=new Set),e.patterns.add(i)}),t._zod.check=o=>{o.value.endsWith(r.suffix)||o.issues.push({origin:"string",code:"invalid_format",format:"ends_with",suffix:r.suffix,input:o.value,inst:t,continue:!r.abort})}});function Sa(t,r,i){t.issues.length&&r.issues.push(...C(i,t.issues))}var jn=c("$ZodCheckProperty",(t,r)=>{U.init(t,r),t._zod.check=i=>{let o=r.schema._zod.run({value:i.value[r.property],issues:[]},{});if(o instanceof Promise)return o.then(e=>Sa(e,i,r.property));Sa(o,i,r.property)}}),Pn=c("$ZodCheckMimeType",(t,r)=>{U.init(t,r);let i=new Set(r.mime);t._zod.onattach.push(o=>{o._zod.bag.mime=r.mime}),t._zod.check=o=>{i.has(o.value.type)||o.issues.push({code:"invalid_value",values:r.mime,input:o.value.type,inst:t,continue:!r.abort})}}),On=c("$ZodCheckOverwrite",(t,r)=>{U.init(t,r),t._zod.check=i=>{i.value=r.tx(i.value)}});var Ae=class{constructor(r=[]){this.content=[],this.indent=0,this&&(this.args=r)}indented(r){this.indent+=1,r(this),this.indent-=1}write(r){if(typeof r=="function"){r(this,{execution:"sync"}),r(this,{execution:"async"});return}let o=r.split(`
`).filter(a=>a),e=Math.min(...o.map(a=>a.length-a.trimStart().length)),n=o.map(a=>a.slice(e)).map(a=>" ".repeat(this.indent*2)+a);for(let a of n)this.content.push(a)}compile(){let r=Function,i=this?.args,e=[...(this?.content??[""]).map(n=>`  ${n}`)];return new r(...i,e.join(`
`))}};var Un={major:4,minor:0,patch:14};var x=c("$ZodType",(t,r)=>{var i;t??(t={}),t._zod.def=r,t._zod.bag=t._zod.bag||{},t._zod.version=Un;let o=[...t._zod.def.checks??[]];t._zod.traits.has("$ZodCheck")&&o.unshift(t);for(let e of o)for(let n of e._zod.onattach)n(t);if(o.length===0)(i=t._zod).deferred??(i.deferred=[]),t._zod.deferred?.push(()=>{t._zod.run=t._zod.parse});else{let e=(n,a,u)=>{let l=oe(n),p;for(let h of a){if(h._zod.def.when){if(!h._zod.def.when(n))continue}else if(l)continue;let d=n.issues.length,b=h._zod.check(n);if(b instanceof Promise&&u?.async===!1)throw new W;if(p||b instanceof Promise)p=(p??Promise.resolve()).then(async()=>{await b,n.issues.length!==d&&(l||(l=oe(n,d)))});else{if(n.issues.length===d)continue;l||(l=oe(n,d))}}return p?p.then(()=>n):n};t._zod.run=(n,a)=>{let u=t._zod.parse(n,a);if(u instanceof Promise){if(a.async===!1)throw new W;return u.then(l=>e(l,o,a))}return e(u,o,a)}}t["~standard"]={validate:e=>{try{let n=Tr(t,e);return n.success?{value:n.data}:{issues:n.error?.issues}}catch{return Er(t,e).then(a=>a.success?{value:a.data}:{issues:a.error?.issues})}},vendor:"zod",version:1}}),ue=c("$ZodString",(t,r)=>{x.init(t,r),t._zod.pattern=[...t?._zod.bag?.patterns??[]].pop()??nn(t._zod.bag),t._zod.parse=(i,o)=>{if(r.coerce)try{i.value=String(i.value)}catch{}return typeof i.value=="string"||i.issues.push({expected:"string",code:"invalid_type",input:i.value,inst:t}),i}}),j=c("$ZodStringFormat",(t,r)=>{$e.init(t,r),ue.init(t,r)}),Zn=c("$ZodGUID",(t,r)=>{r.pattern??(r.pattern=Jr),j.init(t,r)}),Dn=c("$ZodUUID",(t,r)=>{if(r.version){let o={v1:1,v2:2,v3:3,v4:4,v5:5,v6:6,v7:7,v8:8}[r.version];if(o===void 0)throw new Error(`Invalid UUID version: "${r.version}"`);r.pattern??(r.pattern=ae(o))}else r.pattern??(r.pattern=ae());j.init(t,r)}),Tn=c("$ZodEmail",(t,r)=>{r.pattern??(r.pattern=Wr),j.init(t,r)}),En=c("$ZodURL",(t,r)=>{j.init(t,r),t._zod.check=i=>{try{let o=i.value.trim(),e=new URL(o);r.hostname&&(r.hostname.lastIndex=0,r.hostname.test(e.hostname)||i.issues.push({code:"invalid_format",format:"url",note:"Invalid hostname",pattern:Yr.source,input:i.value,inst:t,continue:!r.abort})),r.protocol&&(r.protocol.lastIndex=0,r.protocol.test(e.protocol.endsWith(":")?e.protocol.slice(0,-1):e.protocol)||i.issues.push({code:"invalid_format",format:"url",note:"Invalid protocol",pattern:r.protocol.source,input:i.value,inst:t,continue:!r.abort})),r.normalize?i.value=e.href:i.value=o;return}catch{i.issues.push({code:"invalid_format",format:"url",input:i.value,inst:t,continue:!r.abort})}}}),Ln=c("$ZodEmoji",(t,r)=>{r.pattern??(r.pattern=Br()),j.init(t,r)}),An=c("$ZodNanoID",(t,r)=>{r.pattern??(r.pattern=Fr),j.init(t,r)}),Rn=c("$ZodCUID",(t,r)=>{r.pattern??(r.pattern=Lr),j.init(t,r)}),Cn=c("$ZodCUID2",(t,r)=>{r.pattern??(r.pattern=Ar),j.init(t,r)}),Vn=c("$ZodULID",(t,r)=>{r.pattern??(r.pattern=Rr),j.init(t,r)}),Fn=c("$ZodXID",(t,r)=>{r.pattern??(r.pattern=Cr),j.init(t,r)}),Mn=c("$ZodKSUID",(t,r)=>{r.pattern??(r.pattern=Vr),j.init(t,r)}),Jn=c("$ZodISODateTime",(t,r)=>{r.pattern??(r.pattern=rn(r)),j.init(t,r)}),Wn=c("$ZodISODate",(t,r)=>{r.pattern??(r.pattern=en),j.init(t,r)}),Bn=c("$ZodISOTime",(t,r)=>{r.pattern??(r.pattern=tn(r)),j.init(t,r)}),Gn=c("$ZodISODuration",(t,r)=>{r.pattern??(r.pattern=Mr),j.init(t,r)}),Kn=c("$ZodIPv4",(t,r)=>{r.pattern??(r.pattern=Gr),j.init(t,r),t._zod.onattach.push(i=>{let o=i._zod.bag;o.format="ipv4"})}),Xn=c("$ZodIPv6",(t,r)=>{r.pattern??(r.pattern=Kr),j.init(t,r),t._zod.onattach.push(i=>{let o=i._zod.bag;o.format="ipv6"}),t._zod.check=i=>{try{new URL(`http://[${i.value}]`)}catch{i.issues.push({code:"invalid_format",format:"ipv6",input:i.value,inst:t,continue:!r.abort})}}}),qn=c("$ZodCIDRv4",(t,r)=>{r.pattern??(r.pattern=Xr),j.init(t,r)}),Hn=c("$ZodCIDRv6",(t,r)=>{r.pattern??(r.pattern=qr),j.init(t,r),t._zod.check=i=>{let[o,e]=i.value.split("/");try{if(!e)throw new Error;let n=Number(e);if(`${n}`!==e)throw new Error;if(n<0||n>128)throw new Error;new URL(`http://[${o}]`)}catch{i.issues.push({code:"invalid_format",format:"cidrv6",input:i.value,inst:t,continue:!r.abort})}}});function Yn(t){if(t==="")return!0;if(t.length%4!==0)return!1;try{return atob(t),!0}catch{return!1}}var Qn=c("$ZodBase64",(t,r)=>{r.pattern??(r.pattern=Hr),j.init(t,r),t._zod.onattach.push(i=>{i._zod.bag.contentEncoding="base64"}),t._zod.check=i=>{Yn(i.value)||i.issues.push({code:"invalid_format",format:"base64",input:i.value,inst:t,continue:!r.abort})}});function Va(t){if(!bt.test(t))return!1;let r=t.replace(/[-_]/g,o=>o==="-"?"+":"/"),i=r.padEnd(Math.ceil(r.length/4)*4,"=");return Yn(i)}var ei=c("$ZodBase64URL",(t,r)=>{r.pattern??(r.pattern=bt),j.init(t,r),t._zod.onattach.push(i=>{i._zod.bag.contentEncoding="base64url"}),t._zod.check=i=>{Va(i.value)||i.issues.push({code:"invalid_format",format:"base64url",input:i.value,inst:t,continue:!r.abort})}}),ti=c("$ZodE164",(t,r)=>{r.pattern??(r.pattern=Qr),j.init(t,r)});function Fa(t,r=null){try{let i=t.split(".");if(i.length!==3)return!1;let[o]=i;if(!o)return!1;let e=JSON.parse(atob(o));return!("typ"in e&&e?.typ!=="JWT"||!e.alg||r&&(!("alg"in e)||e.alg!==r))}catch{return!1}}var ri=c("$ZodJWT",(t,r)=>{j.init(t,r),t._zod.check=i=>{Fa(i.value,r.alg)||i.issues.push({code:"invalid_format",format:"jwt",input:i.value,inst:t,continue:!r.abort})}}),ni=c("$ZodCustomStringFormat",(t,r)=>{j.init(t,r),t._zod.check=i=>{r.fn(i.value)||i.issues.push({code:"invalid_format",format:r.format,input:i.value,inst:t,continue:!r.abort})}}),wt=c("$ZodNumber",(t,r)=>{x.init(t,r),t._zod.pattern=t._zod.bag.pattern??un,t._zod.parse=(i,o)=>{if(r.coerce)try{i.value=Number(i.value)}catch{}let e=i.value;if(typeof e=="number"&&!Number.isNaN(e)&&Number.isFinite(e))return i;let n=typeof e=="number"?Number.isNaN(e)?"NaN":Number.isFinite(e)?void 0:"Infinity":void 0;return i.issues.push({expected:"number",code:"invalid_type",input:e,inst:t,...n?{received:n}:{}}),i}}),ii=c("$ZodNumber",(t,r)=>{fn.init(t,r),wt.init(t,r)}),Re=c("$ZodBoolean",(t,r)=>{x.init(t,r),t._zod.pattern=cn,t._zod.parse=(i,o)=>{if(r.coerce)try{i.value=!!i.value}catch{}let e=i.value;return typeof e=="boolean"||i.issues.push({expected:"boolean",code:"invalid_type",input:e,inst:t}),i}}),St=c("$ZodBigInt",(t,r)=>{x.init(t,r),t._zod.pattern=on,t._zod.parse=(i,o)=>{if(r.coerce)try{i.value=BigInt(i.value)}catch{}return typeof i.value=="bigint"||i.issues.push({expected:"bigint",code:"invalid_type",input:i.value,inst:t}),i}}),oi=c("$ZodBigInt",(t,r)=>{gn.init(t,r),St.init(t,r)}),ai=c("$ZodSymbol",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;return typeof e=="symbol"||i.issues.push({expected:"symbol",code:"invalid_type",input:e,inst:t}),i}}),ui=c("$ZodUndefined",(t,r)=>{x.init(t,r),t._zod.pattern=ln,t._zod.values=new Set([void 0]),t._zod.optin="optional",t._zod.optout="optional",t._zod.parse=(i,o)=>{let e=i.value;return typeof e>"u"||i.issues.push({expected:"undefined",code:"invalid_type",input:e,inst:t}),i}}),ci=c("$ZodNull",(t,r)=>{x.init(t,r),t._zod.pattern=sn,t._zod.values=new Set([null]),t._zod.parse=(i,o)=>{let e=i.value;return e===null||i.issues.push({expected:"null",code:"invalid_type",input:e,inst:t}),i}}),si=c("$ZodAny",(t,r)=>{x.init(t,r),t._zod.parse=i=>i}),_e=c("$ZodUnknown",(t,r)=>{x.init(t,r),t._zod.parse=i=>i}),li=c("$ZodNever",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>(i.issues.push({expected:"never",code:"invalid_type",input:i.value,inst:t}),i)}),mi=c("$ZodVoid",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;return typeof e>"u"||i.issues.push({expected:"void",code:"invalid_type",input:e,inst:t}),i}}),di=c("$ZodDate",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{if(r.coerce)try{i.value=new Date(i.value)}catch{}let e=i.value,n=e instanceof Date;return n&&!Number.isNaN(e.getTime())||i.issues.push({expected:"date",code:"invalid_type",input:e,...n?{received:"Invalid Date"}:{},inst:t}),i}});function Oa(t,r,i){t.issues.length&&r.issues.push(...C(i,t.issues)),r.value[i]=t.value}var Ce=c("$ZodArray",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;if(!Array.isArray(e))return i.issues.push({expected:"array",code:"invalid_type",input:e,inst:t}),i;i.value=Array(e.length);let n=[];for(let a=0;a<e.length;a++){let u=e[a],l=r.element._zod.run({value:u,issues:[]},o);l instanceof Promise?n.push(l.then(p=>Oa(p,i,a))):Oa(l,i,a)}return n.length?Promise.all(n).then(()=>i):i}});function zt(t,r,i,o){t.issues.length&&r.issues.push(...C(i,t.issues)),t.value===void 0?i in o&&(r.value[i]=void 0):r.value[i]=t.value}var pi=c("$ZodObject",(t,r)=>{x.init(t,r);let i=Oe(()=>{let d=Object.keys(r.shape);for(let $ of d)if(!(r.shape[$]instanceof x))throw new Error(`Invalid element at key "${$}": expected a Zod schema`);let b=Or(r.shape);return{shape:r.shape,keys:d,keySet:new Set(d),numKeys:d.length,optionalKeys:new Set(b)}});w(t._zod,"propValues",()=>{let d=r.shape,b={};for(let $ in d){let m=d[$]._zod;if(m.values){b[$]??(b[$]=new Set);for(let _ of m.values)b[$].add(_)}}return b});let o=d=>{let b=new Ae(["shape","payload","ctx"]),$=i.value,m=z=>{let I=pt(z);return`shape[${I}]._zod.run({ value: input[${I}], issues: [] }, ctx)`};b.write("const input = payload.value;");let _=Object.create(null),y=0;for(let z of $.keys)_[z]=`key_${y++}`;b.write("const newResult = {}");for(let z of $.keys){let I=_[z],P=pt(z);b.write(`const ${I} = ${m(z)};`),b.write(`
        if (${I}.issues.length) {
          payload.issues = payload.issues.concat(${I}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${P}, ...iss.path] : [${P}]
          })));
        }
        
        if (${I}.value === undefined) {
          if (${P} in input) {
            newResult[${P}] = undefined;
          }
        } else {
          newResult[${P}] = ${I}.value;
        }
      `)}b.write("payload.value = newResult;"),b.write("return payload;");let S=b.compile();return(z,I)=>S(d,z,I)},e,n=pe,a=!Se.jitless,l=a&&jr.value,p=r.catchall,h;t._zod.parse=(d,b)=>{h??(h=i.value);let $=d.value;if(!n($))return d.issues.push({expected:"object",code:"invalid_type",input:$,inst:t}),d;let m=[];if(a&&l&&b?.async===!1&&b.jitless!==!0)e||(e=o(r.shape)),d=e(d,b);else{d.value={};let I=h.shape;for(let P of h.keys){let pr=I[P]._zod.run({value:$[P],issues:[]},b);pr instanceof Promise?m.push(pr.then(Uc=>zt(Uc,d,P,$))):zt(pr,d,P,$)}}if(!p)return m.length?Promise.all(m).then(()=>d):d;let _=[],y=h.keySet,S=p._zod,z=S.def.type;for(let I of Object.keys($)){if(y.has(I))continue;if(z==="never"){_.push(I);continue}let P=S.run({value:$[I],issues:[]},b);P instanceof Promise?m.push(P.then(lt=>zt(lt,d,I,$))):zt(P,d,I,$)}return _.length&&d.issues.push({code:"unrecognized_keys",keys:_,input:$,inst:t}),m.length?Promise.all(m).then(()=>d):d}});function Ua(t,r,i,o){for(let n of t)if(n.issues.length===0)return r.value=n.value,r;let e=t.filter(n=>!oe(n));return e.length===1?(r.value=e[0].value,e[0]):(r.issues.push({code:"invalid_union",input:r.value,inst:i,errors:t.map(n=>n.issues.map(a=>V(a,o,N())))}),r)}var jt=c("$ZodUnion",(t,r)=>{x.init(t,r),w(t._zod,"optin",()=>r.options.some(e=>e._zod.optin==="optional")?"optional":void 0),w(t._zod,"optout",()=>r.options.some(e=>e._zod.optout==="optional")?"optional":void 0),w(t._zod,"values",()=>{if(r.options.every(e=>e._zod.values))return new Set(r.options.flatMap(e=>Array.from(e._zod.values)))}),w(t._zod,"pattern",()=>{if(r.options.every(e=>e._zod.pattern)){let e=r.options.map(n=>n._zod.pattern);return new RegExp(`^(${e.map(n=>Ue(n.source)).join("|")})$`)}});let i=r.options.length===1,o=r.options[0]._zod.run;t._zod.parse=(e,n)=>{if(i)return o(e,n);let a=!1,u=[];for(let l of r.options){let p=l._zod.run({value:e.value,issues:[]},n);if(p instanceof Promise)u.push(p),a=!0;else{if(p.issues.length===0)return p;u.push(p)}}return a?Promise.all(u).then(l=>Ua(l,e,t,n)):Ua(u,e,t,n)}}),fi=c("$ZodDiscriminatedUnion",(t,r)=>{jt.init(t,r);let i=t._zod.parse;w(t._zod,"propValues",()=>{let e={};for(let n of r.options){let a=n._zod.propValues;if(!a||Object.keys(a).length===0)throw new Error(`Invalid discriminated union option at index "${r.options.indexOf(n)}"`);for(let[u,l]of Object.entries(a)){e[u]||(e[u]=new Set);for(let p of l)e[u].add(p)}}return e});let o=Oe(()=>{let e=r.options,n=new Map;for(let a of e){let u=a._zod.propValues?.[r.discriminator];if(!u||u.size===0)throw new Error(`Invalid discriminated union option at index "${r.options.indexOf(a)}"`);for(let l of u){if(n.has(l))throw new Error(`Duplicate discriminator value "${String(l)}"`);n.set(l,a)}}return n});t._zod.parse=(e,n)=>{let a=e.value;if(!pe(a))return e.issues.push({code:"invalid_type",expected:"object",input:a,inst:t}),e;let u=o.value.get(a?.[r.discriminator]);return u?u._zod.run(e,n):r.unionFallback?i(e,n):(e.issues.push({code:"invalid_union",errors:[],note:"No matching discriminator",discriminator:r.discriminator,input:a,path:[r.discriminator],inst:t}),e)}}),gi=c("$ZodIntersection",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value,n=r.left._zod.run({value:e,issues:[]},o),a=r.right._zod.run({value:e,issues:[]},o);return n instanceof Promise||a instanceof Promise?Promise.all([n,a]).then(([l,p])=>Na(i,l,p)):Na(i,n,a)}});function Nn(t,r){if(t===r)return{valid:!0,data:t};if(t instanceof Date&&r instanceof Date&&+t==+r)return{valid:!0,data:t};if(ge(t)&&ge(r)){let i=Object.keys(r),o=Object.keys(t).filter(n=>i.indexOf(n)!==-1),e={...t,...r};for(let n of o){let a=Nn(t[n],r[n]);if(!a.valid)return{valid:!1,mergeErrorPath:[n,...a.mergeErrorPath]};e[n]=a.data}return{valid:!0,data:e}}if(Array.isArray(t)&&Array.isArray(r)){if(t.length!==r.length)return{valid:!1,mergeErrorPath:[]};let i=[];for(let o=0;o<t.length;o++){let e=t[o],n=r[o],a=Nn(e,n);if(!a.valid)return{valid:!1,mergeErrorPath:[o,...a.mergeErrorPath]};i.push(a.data)}return{valid:!0,data:i}}return{valid:!1,mergeErrorPath:[]}}function Na(t,r,i){if(r.issues.length&&t.issues.push(...r.issues),i.issues.length&&t.issues.push(...i.issues),oe(t))return t;let o=Nn(r.value,i.value);if(!o.valid)throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(o.mergeErrorPath)}`);return t.value=o.data,t}var ce=c("$ZodTuple",(t,r)=>{x.init(t,r);let i=r.items,o=i.length-[...i].reverse().findIndex(e=>e._zod.optin!=="optional");t._zod.parse=(e,n)=>{let a=e.value;if(!Array.isArray(a))return e.issues.push({input:a,inst:t,expected:"tuple",code:"invalid_type"}),e;e.value=[];let u=[];if(!r.rest){let p=a.length>i.length,h=a.length<o-1;if(p||h)return e.issues.push({...p?{code:"too_big",maximum:i.length}:{code:"too_small",minimum:i.length},input:a,inst:t,origin:"array"}),e}let l=-1;for(let p of i){if(l++,l>=a.length&&l>=o)continue;let h=p._zod.run({value:a[l],issues:[]},n);h instanceof Promise?u.push(h.then(d=>It(d,e,l))):It(h,e,l)}if(r.rest){let p=a.slice(i.length);for(let h of p){l++;let d=r.rest._zod.run({value:h,issues:[]},n);d instanceof Promise?u.push(d.then(b=>It(b,e,l))):It(d,e,l)}}return u.length?Promise.all(u).then(()=>e):e}});function It(t,r,i){t.issues.length&&r.issues.push(...C(i,t.issues)),r.value[i]=t.value}var vi=c("$ZodRecord",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;if(!ge(e))return i.issues.push({expected:"record",code:"invalid_type",input:e,inst:t}),i;let n=[];if(r.keyType._zod.values){let a=r.keyType._zod.values;i.value={};for(let l of a)if(typeof l=="string"||typeof l=="number"||typeof l=="symbol"){let p=r.valueType._zod.run({value:e[l],issues:[]},o);p instanceof Promise?n.push(p.then(h=>{h.issues.length&&i.issues.push(...C(l,h.issues)),i.value[l]=h.value})):(p.issues.length&&i.issues.push(...C(l,p.issues)),i.value[l]=p.value)}let u;for(let l in e)a.has(l)||(u=u??[],u.push(l));u&&u.length>0&&i.issues.push({code:"unrecognized_keys",input:e,inst:t,keys:u})}else{i.value={};for(let a of Reflect.ownKeys(e)){if(a==="__proto__")continue;let u=r.keyType._zod.run({value:a,issues:[]},o);if(u instanceof Promise)throw new Error("Async schemas not supported in object keys currently");if(u.issues.length){i.issues.push({code:"invalid_key",origin:"record",issues:u.issues.map(p=>V(p,o,N())),input:a,path:[a],inst:t}),i.value[u.value]=u.value;continue}let l=r.valueType._zod.run({value:e[a],issues:[]},o);l instanceof Promise?n.push(l.then(p=>{p.issues.length&&i.issues.push(...C(a,p.issues)),i.value[u.value]=p.value})):(l.issues.length&&i.issues.push(...C(a,l.issues)),i.value[u.value]=l.value)}}return n.length?Promise.all(n).then(()=>i):i}}),hi=c("$ZodMap",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;if(!(e instanceof Map))return i.issues.push({expected:"map",code:"invalid_type",input:e,inst:t}),i;let n=[];i.value=new Map;for(let[a,u]of e){let l=r.keyType._zod.run({value:a,issues:[]},o),p=r.valueType._zod.run({value:u,issues:[]},o);l instanceof Promise||p instanceof Promise?n.push(Promise.all([l,p]).then(([h,d])=>{Za(h,d,i,a,e,t,o)})):Za(l,p,i,a,e,t,o)}return n.length?Promise.all(n).then(()=>i):i}});function Za(t,r,i,o,e,n,a){t.issues.length&&(Ne.has(typeof o)?i.issues.push(...C(o,t.issues)):i.issues.push({code:"invalid_key",origin:"map",input:e,inst:n,issues:t.issues.map(u=>V(u,a,N()))})),r.issues.length&&(Ne.has(typeof o)?i.issues.push(...C(o,r.issues)):i.issues.push({origin:"map",code:"invalid_element",input:e,inst:n,key:o,issues:r.issues.map(u=>V(u,a,N()))})),i.value.set(t.value,r.value)}var $i=c("$ZodSet",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;if(!(e instanceof Set))return i.issues.push({input:e,inst:t,expected:"set",code:"invalid_type"}),i;let n=[];i.value=new Set;for(let a of e){let u=r.valueType._zod.run({value:a,issues:[]},o);u instanceof Promise?n.push(u.then(l=>Da(l,i))):Da(u,i)}return n.length?Promise.all(n).then(()=>i):i}});function Da(t,r){t.issues.length&&r.issues.push(...t.issues),r.value.add(t.value)}var _i=c("$ZodEnum",(t,r)=>{x.init(t,r);let i=Pe(r.entries),o=new Set(i);t._zod.values=o,t._zod.pattern=new RegExp(`^(${i.filter(e=>Ne.has(typeof e)).map(e=>typeof e=="string"?B(e):e.toString()).join("|")})$`),t._zod.parse=(e,n)=>{let a=e.value;return o.has(a)||e.issues.push({code:"invalid_value",values:i,input:a,inst:t}),e}}),yi=c("$ZodLiteral",(t,r)=>{if(x.init(t,r),r.values.length===0)throw new Error("Cannot create literal schema with no valid values");t._zod.values=new Set(r.values),t._zod.pattern=new RegExp(`^(${r.values.map(i=>typeof i=="string"?B(i):i?B(i.toString()):String(i)).join("|")})$`),t._zod.parse=(i,o)=>{let e=i.value;return t._zod.values.has(e)||i.issues.push({code:"invalid_value",values:r.values,input:e,inst:t}),i}}),bi=c("$ZodFile",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=i.value;return e instanceof File||i.issues.push({expected:"file",code:"invalid_type",input:e,inst:t}),i}}),Ve=c("$ZodTransform",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=r.transform(i.value,i);if(o.async)return(e instanceof Promise?e:Promise.resolve(e)).then(a=>(i.value=a,i));if(e instanceof Promise)throw new W;return i.value=e,i}});function Ta(t,r){return t.issues.length&&r===void 0?{issues:[],value:void 0}:t}var xi=c("$ZodOptional",(t,r)=>{x.init(t,r),t._zod.optin="optional",t._zod.optout="optional",w(t._zod,"values",()=>r.innerType._zod.values?new Set([...r.innerType._zod.values,void 0]):void 0),w(t._zod,"pattern",()=>{let i=r.innerType._zod.pattern;return i?new RegExp(`^(${Ue(i.source)})?$`):void 0}),t._zod.parse=(i,o)=>{if(r.innerType._zod.optin==="optional"){let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(n=>Ta(n,i.value)):Ta(e,i.value)}return i.value===void 0?i:r.innerType._zod.run(i,o)}}),ki=c("$ZodNullable",(t,r)=>{x.init(t,r),w(t._zod,"optin",()=>r.innerType._zod.optin),w(t._zod,"optout",()=>r.innerType._zod.optout),w(t._zod,"pattern",()=>{let i=r.innerType._zod.pattern;return i?new RegExp(`^(${Ue(i.source)}|null)$`):void 0}),w(t._zod,"values",()=>r.innerType._zod.values?new Set([...r.innerType._zod.values,null]):void 0),t._zod.parse=(i,o)=>i.value===null?i:r.innerType._zod.run(i,o)}),zi=c("$ZodDefault",(t,r)=>{x.init(t,r),t._zod.optin="optional",w(t._zod,"values",()=>r.innerType._zod.values),t._zod.parse=(i,o)=>{if(i.value===void 0)return i.value=r.defaultValue,i;let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(n=>Ea(n,r)):Ea(e,r)}});function Ea(t,r){return t.value===void 0&&(t.value=r.defaultValue),t}var Ii=c("$ZodPrefault",(t,r)=>{x.init(t,r),t._zod.optin="optional",w(t._zod,"values",()=>r.innerType._zod.values),t._zod.parse=(i,o)=>(i.value===void 0&&(i.value=r.defaultValue),r.innerType._zod.run(i,o))}),wi=c("$ZodNonOptional",(t,r)=>{x.init(t,r),w(t._zod,"values",()=>{let i=r.innerType._zod.values;return i?new Set([...i].filter(o=>o!==void 0)):void 0}),t._zod.parse=(i,o)=>{let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(n=>La(n,t)):La(e,t)}});function La(t,r){return!t.issues.length&&t.value===void 0&&t.issues.push({code:"invalid_type",expected:"nonoptional",input:t.value,inst:r}),t}var Si=c("$ZodSuccess",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>{let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(n=>(i.value=n.issues.length===0,i)):(i.value=e.issues.length===0,i)}}),ji=c("$ZodCatch",(t,r)=>{x.init(t,r),w(t._zod,"optin",()=>r.innerType._zod.optin),w(t._zod,"optout",()=>r.innerType._zod.optout),w(t._zod,"values",()=>r.innerType._zod.values),t._zod.parse=(i,o)=>{let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(n=>(i.value=n.value,n.issues.length&&(i.value=r.catchValue({...i,error:{issues:n.issues.map(a=>V(a,o,N()))},input:i.value}),i.issues=[]),i)):(i.value=e.value,e.issues.length&&(i.value=r.catchValue({...i,error:{issues:e.issues.map(n=>V(n,o,N()))},input:i.value}),i.issues=[]),i)}}),Pi=c("$ZodNaN",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>((typeof i.value!="number"||!Number.isNaN(i.value))&&i.issues.push({input:i.value,inst:t,expected:"nan",code:"invalid_type"}),i)}),Fe=c("$ZodPipe",(t,r)=>{x.init(t,r),w(t._zod,"values",()=>r.in._zod.values),w(t._zod,"optin",()=>r.in._zod.optin),w(t._zod,"optout",()=>r.out._zod.optout),w(t._zod,"propValues",()=>r.in._zod.propValues),t._zod.parse=(i,o)=>{let e=r.in._zod.run(i,o);return e instanceof Promise?e.then(n=>Aa(n,r,o)):Aa(e,r,o)}});function Aa(t,r,i){return t.issues.length?t:r.out._zod.run({value:t.value,issues:t.issues},i)}var Oi=c("$ZodReadonly",(t,r)=>{x.init(t,r),w(t._zod,"propValues",()=>r.innerType._zod.propValues),w(t._zod,"values",()=>r.innerType._zod.values),w(t._zod,"optin",()=>r.innerType._zod.optin),w(t._zod,"optout",()=>r.innerType._zod.optout),t._zod.parse=(i,o)=>{let e=r.innerType._zod.run(i,o);return e instanceof Promise?e.then(Ra):Ra(e)}});function Ra(t){return t.value=Object.freeze(t.value),t}var Ui=c("$ZodTemplateLiteral",(t,r)=>{x.init(t,r);let i=[];for(let o of r.parts)if(o instanceof x){if(!o._zod.pattern)throw new Error(`Invalid template literal part, no pattern found: ${[...o._zod.traits].shift()}`);let e=o._zod.pattern instanceof RegExp?o._zod.pattern.source:o._zod.pattern;if(!e)throw new Error(`Invalid template literal part: ${o._zod.traits}`);let n=e.startsWith("^")?1:0,a=e.endsWith("$")?e.length-1:e.length;i.push(e.slice(n,a))}else if(o===null||Pr.has(typeof o))i.push(B(`${o}`));else throw new Error(`Invalid template literal part: ${o}`);t._zod.pattern=new RegExp(`^${i.join("")}$`),t._zod.parse=(o,e)=>typeof o.value!="string"?(o.issues.push({input:o.value,inst:t,expected:"template_literal",code:"invalid_type"}),o):(t._zod.pattern.lastIndex=0,t._zod.pattern.test(o.value)||o.issues.push({input:o.value,inst:t,code:"invalid_format",format:r.format??"template_literal",pattern:t._zod.pattern.source}),o)}),Ni=c("$ZodPromise",(t,r)=>{x.init(t,r),t._zod.parse=(i,o)=>Promise.resolve(i.value).then(e=>r.innerType._zod.run({value:e,issues:[]},o))}),Zi=c("$ZodLazy",(t,r)=>{x.init(t,r),w(t._zod,"innerType",()=>r.getter()),w(t._zod,"pattern",()=>t._zod.innerType._zod.pattern),w(t._zod,"propValues",()=>t._zod.innerType._zod.propValues),w(t._zod,"optin",()=>t._zod.innerType._zod.optin??void 0),w(t._zod,"optout",()=>t._zod.innerType._zod.optout??void 0),t._zod.parse=(i,o)=>t._zod.innerType._zod.run(i,o)}),Di=c("$ZodCustom",(t,r)=>{U.init(t,r),x.init(t,r),t._zod.parse=(i,o)=>i,t._zod.check=i=>{let o=i.value,e=r.fn(o);if(e instanceof Promise)return e.then(n=>Ca(n,i,o,t));Ca(e,i,o,t)}});function Ca(t,r,i,o){if(!t){let e={code:"custom",input:i,inst:o,path:[...o._zod.def.path??[]],continue:!o._zod.def.abort};o._zod.def.params&&(e.params=o._zod.def.params),r.issues.push(ve(e))}}var Me={};ne(Me,{ar:()=>Ja,az:()=>Wa,be:()=>Ga,ca:()=>Ka,cs:()=>Xa,da:()=>qa,de:()=>Ha,en:()=>Pt,eo:()=>Ya,es:()=>Qa,fa:()=>eu,fi:()=>tu,fr:()=>ru,frCA:()=>nu,he:()=>iu,hu:()=>ou,id:()=>au,is:()=>uu,it:()=>cu,ja:()=>su,kh:()=>lu,ko:()=>mu,mk:()=>du,ms:()=>pu,nl:()=>fu,no:()=>gu,ota:()=>vu,pl:()=>$u,ps:()=>hu,pt:()=>_u,ru:()=>bu,sl:()=>xu,sv:()=>ku,ta:()=>zu,th:()=>Iu,tr:()=>wu,ua:()=>Su,ur:()=>ju,vi:()=>Pu,yo:()=>Nu,zhCN:()=>Ou,zhTW:()=>Uu});var bs=()=>{let t={string:{unit:"\u062D\u0631\u0641",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},file:{unit:"\u0628\u0627\u064A\u062A",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},array:{unit:"\u0639\u0646\u0635\u0631",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"},set:{unit:"\u0639\u0646\u0635\u0631",verb:"\u0623\u0646 \u064A\u062D\u0648\u064A"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0645\u062F\u062E\u0644",email:"\u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A",url:"\u0631\u0627\u0628\u0637",emoji:"\u0625\u064A\u0645\u0648\u062C\u064A",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u062A\u0627\u0631\u064A\u062E \u0648\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",date:"\u062A\u0627\u0631\u064A\u062E \u0628\u0645\u0639\u064A\u0627\u0631 ISO",time:"\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",duration:"\u0645\u062F\u0629 \u0628\u0645\u0639\u064A\u0627\u0631 ISO",ipv4:"\u0639\u0646\u0648\u0627\u0646 IPv4",ipv6:"\u0639\u0646\u0648\u0627\u0646 IPv6",cidrv4:"\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv4",cidrv6:"\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv6",base64:"\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64-encoded",base64url:"\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64url-encoded",json_string:"\u0646\u064E\u0635 \u0639\u0644\u0649 \u0647\u064A\u0626\u0629 JSON",e164:"\u0631\u0642\u0645 \u0647\u0627\u062A\u0641 \u0628\u0645\u0639\u064A\u0627\u0631 E.164",jwt:"JWT",template_literal:"\u0645\u062F\u062E\u0644"};return e=>{switch(e.code){case"invalid_type":return`\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${e.expected}\u060C \u0648\u0644\u0643\u0646 \u062A\u0645 \u0625\u062F\u062E\u0627\u0644 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${g(e.values[0])}`:`\u0627\u062E\u062A\u064A\u0627\u0631 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062A\u0648\u0642\u0639 \u0627\u0646\u062A\u0642\u0627\u0621 \u0623\u062D\u062F \u0647\u0630\u0647 \u0627\u0644\u062E\u064A\u0627\u0631\u0627\u062A: ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?` \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${e.origin??"\u0627\u0644\u0642\u064A\u0645\u0629"} ${n} ${e.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631"}`:`\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${e.origin??"\u0627\u0644\u0642\u064A\u0645\u0629"} ${n} ${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${e.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${n} ${e.minimum.toString()} ${a.unit}`:`\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${e.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${n} ${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0628\u062F\u0623 \u0628\u0640 "${e.prefix}"`:n.format==="ends_with"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0646\u062A\u0647\u064A \u0628\u0640 "${n.suffix}"`:n.format==="includes"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u062A\u0636\u0645\u0651\u064E\u0646 "${n.includes}"`:n.format==="regex"?`\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0637\u0627\u0628\u0642 \u0627\u0644\u0646\u0645\u0637 ${n.pattern}`:`${o[n.format]??e.format} \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644`}case"not_multiple_of":return`\u0631\u0642\u0645 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0645\u0646 \u0645\u0636\u0627\u0639\u0641\u0627\u062A ${e.divisor}`;case"unrecognized_keys":return`\u0645\u0639\u0631\u0641${e.keys.length>1?"\u0627\u062A":""} \u063A\u0631\u064A\u0628${e.keys.length>1?"\u0629":""}: ${s(e.keys,"\u060C ")}`;case"invalid_key":return`\u0645\u0639\u0631\u0641 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${e.origin}`;case"invalid_union":return"\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";case"invalid_element":return`\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${e.origin}`;default:return"\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644"}}};function Ja(){return{localeError:bs()}}var xs=()=>{let t={string:{unit:"simvol",verb:"olmal\u0131d\u0131r"},file:{unit:"bayt",verb:"olmal\u0131d\u0131r"},array:{unit:"element",verb:"olmal\u0131d\u0131r"},set:{unit:"element",verb:"olmal\u0131d\u0131r"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"input",email:"email address",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datetime",date:"ISO date",time:"ISO time",duration:"ISO duration",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded string",base64url:"base64url-encoded string",json_string:"JSON string",e164:"E.164 number",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${e.expected}, daxil olan ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${g(e.values[0])}`:`Yanl\u0131\u015F se\xE7im: a\u015Fa\u011F\u0131dak\u0131lardan biri olmal\u0131d\u0131r: ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${e.origin??"d\u0259y\u0259r"} ${n}${e.maximum.toString()} ${a.unit??"element"}`:`\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${e.origin??"d\u0259y\u0259r"} ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${e.origin} ${n}${e.minimum.toString()} ${a.unit}`:`\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${e.origin} ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Yanl\u0131\u015F m\u0259tn: "${n.prefix}" il\u0259 ba\u015Flamal\u0131d\u0131r`:n.format==="ends_with"?`Yanl\u0131\u015F m\u0259tn: "${n.suffix}" il\u0259 bitm\u0259lidir`:n.format==="includes"?`Yanl\u0131\u015F m\u0259tn: "${n.includes}" daxil olmal\u0131d\u0131r`:n.format==="regex"?`Yanl\u0131\u015F m\u0259tn: ${n.pattern} \u015Fablonuna uy\u011Fun olmal\u0131d\u0131r`:`Yanl\u0131\u015F ${o[n.format]??e.format}`}case"not_multiple_of":return`Yanl\u0131\u015F \u0259d\u0259d: ${e.divisor} il\u0259 b\xF6l\xFCn\u0259 bil\u0259n olmal\u0131d\u0131r`;case"unrecognized_keys":return`Tan\u0131nmayan a\xE7ar${e.keys.length>1?"lar":""}: ${s(e.keys,", ")}`;case"invalid_key":return`${e.origin} daxilind\u0259 yanl\u0131\u015F a\xE7ar`;case"invalid_union":return"Yanl\u0131\u015F d\u0259y\u0259r";case"invalid_element":return`${e.origin} daxilind\u0259 yanl\u0131\u015F d\u0259y\u0259r`;default:return"Yanl\u0131\u015F d\u0259y\u0259r"}}};function Wa(){return{localeError:xs()}}function Ba(t,r,i,o){let e=Math.abs(t),n=e%10,a=e%100;return a>=11&&a<=19?o:n===1?r:n>=2&&n<=4?i:o}var ks=()=>{let t={string:{unit:{one:"\u0441\u0456\u043C\u0432\u0430\u043B",few:"\u0441\u0456\u043C\u0432\u0430\u043B\u044B",many:"\u0441\u0456\u043C\u0432\u0430\u043B\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},array:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},set:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"},file:{unit:{one:"\u0431\u0430\u0439\u0442",few:"\u0431\u0430\u0439\u0442\u044B",many:"\u0431\u0430\u0439\u0442\u0430\u045E"},verb:"\u043C\u0435\u0446\u044C"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u043B\u0456\u043A";case"object":{if(Array.isArray(e))return"\u043C\u0430\u0441\u0456\u045E";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0443\u0432\u043E\u0434",email:"email \u0430\u0434\u0440\u0430\u0441",url:"URL",emoji:"\u044D\u043C\u043E\u0434\u0437\u0456",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0430 \u0456 \u0447\u0430\u0441",date:"ISO \u0434\u0430\u0442\u0430",time:"ISO \u0447\u0430\u0441",duration:"ISO \u043F\u0440\u0430\u0446\u044F\u0433\u043B\u0430\u0441\u0446\u044C",ipv4:"IPv4 \u0430\u0434\u0440\u0430\u0441",ipv6:"IPv6 \u0430\u0434\u0440\u0430\u0441",cidrv4:"IPv4 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",cidrv6:"IPv6 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",base64:"\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64",base64url:"\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64url",json_string:"JSON \u0440\u0430\u0434\u043E\u043A",e164:"\u043D\u0443\u043C\u0430\u0440 E.164",jwt:"JWT",template_literal:"\u0443\u0432\u043E\u0434"};return e=>{switch(e.code){case"invalid_type":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u045E\u0441\u044F ${e.expected}, \u0430\u0442\u0440\u044B\u043C\u0430\u043D\u0430 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F ${g(e.values[0])}`:`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0432\u0430\u0440\u044B\u044F\u043D\u0442: \u0447\u0430\u043A\u0430\u045E\u0441\u044F \u0430\u0434\u0437\u0456\u043D \u0437 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);if(a){let u=Number(e.maximum),l=Ba(u,a.unit.one,a.unit.few,a.unit.many);return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${a.verb} ${n}${e.maximum.toString()} ${l}`}return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);if(a){let u=Number(e.minimum),l=Ba(u,a.unit.one,a.unit.few,a.unit.many);return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${e.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${a.verb} ${n}${e.minimum.toString()} ${l}`}return`\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${e.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u043F\u0430\u0447\u044B\u043D\u0430\u0446\u0446\u0430 \u0437 "${n.prefix}"`:n.format==="ends_with"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0446\u0446\u0430 \u043D\u0430 "${n.suffix}"`:n.format==="includes"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u043C\u044F\u0448\u0447\u0430\u0446\u044C "${n.includes}"`:n.format==="regex"?`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0430\u0434\u043F\u0430\u0432\u044F\u0434\u0430\u0446\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${n.pattern}`:`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B ${o[n.format]??e.format}`}case"not_multiple_of":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043B\u0456\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0431\u044B\u0446\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${e.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u0430\u0441\u043F\u0430\u0437\u043D\u0430\u043D\u044B ${e.keys.length>1?"\u043A\u043B\u044E\u0447\u044B":"\u043A\u043B\u044E\u0447"}: ${s(e.keys,", ")}`;case"invalid_key":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043A\u043B\u044E\u0447 \u0443 ${e.origin}`;case"invalid_union":return"\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434";case"invalid_element":return`\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u0430\u0435 \u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u045E ${e.origin}`;default:return"\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434"}}};function Ga(){return{localeError:ks()}}var zs=()=>{let t={string:{unit:"car\xE0cters",verb:"contenir"},file:{unit:"bytes",verb:"contenir"},array:{unit:"elements",verb:"contenir"},set:{unit:"elements",verb:"contenir"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"entrada",email:"adre\xE7a electr\xF2nica",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data i hora ISO",date:"data ISO",time:"hora ISO",duration:"durada ISO",ipv4:"adre\xE7a IPv4",ipv6:"adre\xE7a IPv6",cidrv4:"rang IPv4",cidrv6:"rang IPv6",base64:"cadena codificada en base64",base64url:"cadena codificada en base64url",json_string:"cadena JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return e=>{switch(e.code){case"invalid_type":return`Tipus inv\xE0lid: s'esperava ${e.expected}, s'ha rebut ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Valor inv\xE0lid: s'esperava ${g(e.values[0])}`:`Opci\xF3 inv\xE0lida: s'esperava una de ${s(e.values," o ")}`;case"too_big":{let n=e.inclusive?"com a m\xE0xim":"menys de",a=r(e.origin);return a?`Massa gran: s'esperava que ${e.origin??"el valor"} contingu\xE9s ${n} ${e.maximum.toString()} ${a.unit??"elements"}`:`Massa gran: s'esperava que ${e.origin??"el valor"} fos ${n} ${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?"com a m\xEDnim":"m\xE9s de",a=r(e.origin);return a?`Massa petit: s'esperava que ${e.origin} contingu\xE9s ${n} ${e.minimum.toString()} ${a.unit}`:`Massa petit: s'esperava que ${e.origin} fos ${n} ${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Format inv\xE0lid: ha de comen\xE7ar amb "${n.prefix}"`:n.format==="ends_with"?`Format inv\xE0lid: ha d'acabar amb "${n.suffix}"`:n.format==="includes"?`Format inv\xE0lid: ha d'incloure "${n.includes}"`:n.format==="regex"?`Format inv\xE0lid: ha de coincidir amb el patr\xF3 ${n.pattern}`:`Format inv\xE0lid per a ${o[n.format]??e.format}`}case"not_multiple_of":return`N\xFAmero inv\xE0lid: ha de ser m\xFAltiple de ${e.divisor}`;case"unrecognized_keys":return`Clau${e.keys.length>1?"s":""} no reconeguda${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Clau inv\xE0lida a ${e.origin}`;case"invalid_union":return"Entrada inv\xE0lida";case"invalid_element":return`Element inv\xE0lid a ${e.origin}`;default:return"Entrada inv\xE0lida"}}};function Ka(){return{localeError:zs()}}var Is=()=>{let t={string:{unit:"znak\u016F",verb:"m\xEDt"},file:{unit:"bajt\u016F",verb:"m\xEDt"},array:{unit:"prvk\u016F",verb:"m\xEDt"},set:{unit:"prvk\u016F",verb:"m\xEDt"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u010D\xEDslo";case"string":return"\u0159et\u011Bzec";case"boolean":return"boolean";case"bigint":return"bigint";case"function":return"funkce";case"symbol":return"symbol";case"undefined":return"undefined";case"object":{if(Array.isArray(e))return"pole";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"regul\xE1rn\xED v\xFDraz",email:"e-mailov\xE1 adresa",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"datum a \u010Das ve form\xE1tu ISO",date:"datum ve form\xE1tu ISO",time:"\u010Das ve form\xE1tu ISO",duration:"doba trv\xE1n\xED ISO",ipv4:"IPv4 adresa",ipv6:"IPv6 adresa",cidrv4:"rozsah IPv4",cidrv6:"rozsah IPv6",base64:"\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64",base64url:"\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64url",json_string:"\u0159et\u011Bzec ve form\xE1tu JSON",e164:"\u010D\xEDslo E.164",jwt:"JWT",template_literal:"vstup"};return e=>{switch(e.code){case"invalid_type":return`Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${e.expected}, obdr\u017Eeno ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${g(e.values[0])}`:`Neplatn\xE1 mo\u017Enost: o\u010Dek\xE1v\xE1na jedna z hodnot ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${e.origin??"hodnota"} mus\xED m\xEDt ${n}${e.maximum.toString()} ${a.unit??"prvk\u016F"}`:`Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${e.origin??"hodnota"} mus\xED b\xFDt ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${e.origin??"hodnota"} mus\xED m\xEDt ${n}${e.minimum.toString()} ${a.unit??"prvk\u016F"}`:`Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${e.origin??"hodnota"} mus\xED b\xFDt ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED za\u010D\xEDnat na "${n.prefix}"`:n.format==="ends_with"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED kon\u010Dit na "${n.suffix}"`:n.format==="includes"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED obsahovat "${n.includes}"`:n.format==="regex"?`Neplatn\xFD \u0159et\u011Bzec: mus\xED odpov\xEDdat vzoru ${n.pattern}`:`Neplatn\xFD form\xE1t ${o[n.format]??e.format}`}case"not_multiple_of":return`Neplatn\xE9 \u010D\xEDslo: mus\xED b\xFDt n\xE1sobkem ${e.divisor}`;case"unrecognized_keys":return`Nezn\xE1m\xE9 kl\xED\u010De: ${s(e.keys,", ")}`;case"invalid_key":return`Neplatn\xFD kl\xED\u010D v ${e.origin}`;case"invalid_union":return"Neplatn\xFD vstup";case"invalid_element":return`Neplatn\xE1 hodnota v ${e.origin}`;default:return"Neplatn\xFD vstup"}}};function Xa(){return{localeError:Is()}}var ws=()=>{let t={string:{unit:"tegn",verb:"havde"},file:{unit:"bytes",verb:"havde"},array:{unit:"elementer",verb:"indeholdt"},set:{unit:"elementer",verb:"indeholdt"}},r={string:"streng",number:"tal",boolean:"boolean",array:"liste",object:"objekt",set:"s\xE6t",file:"fil"};function i(a){return t[a]??null}function o(a){return r[a]??a}let e=a=>{let u=typeof a;switch(u){case"number":return Number.isNaN(a)?"NaN":"tal";case"object":return Array.isArray(a)?"liste":a===null?"null":Object.getPrototypeOf(a)!==Object.prototype&&a.constructor?a.constructor.name:"objekt"}return u},n={regex:"input",email:"e-mailadresse",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dato- og klokkesl\xE6t",date:"ISO-dato",time:"ISO-klokkesl\xE6t",duration:"ISO-varighed",ipv4:"IPv4-omr\xE5de",ipv6:"IPv6-omr\xE5de",cidrv4:"IPv4-spektrum",cidrv6:"IPv6-spektrum",base64:"base64-kodet streng",base64url:"base64url-kodet streng",json_string:"JSON-streng",e164:"E.164-nummer",jwt:"JWT",template_literal:"input"};return a=>{switch(a.code){case"invalid_type":return`Ugyldigt input: forventede ${o(a.expected)}, fik ${o(e(a.input))}`;case"invalid_value":return a.values.length===1?`Ugyldig v\xE6rdi: forventede ${g(a.values[0])}`:`Ugyldigt valg: forventede en af f\xF8lgende ${s(a.values,"|")}`;case"too_big":{let u=a.inclusive?"<=":"<",l=i(a.origin),p=o(a.origin);return l?`For stor: forventede ${p??"value"} ${l.verb} ${u} ${a.maximum.toString()} ${l.unit??"elementer"}`:`For stor: forventede ${p??"value"} havde ${u} ${a.maximum.toString()}`}case"too_small":{let u=a.inclusive?">=":">",l=i(a.origin),p=o(a.origin);return l?`For lille: forventede ${p} ${l.verb} ${u} ${a.minimum.toString()} ${l.unit}`:`For lille: forventede ${p} havde ${u} ${a.minimum.toString()}`}case"invalid_format":{let u=a;return u.format==="starts_with"?`Ugyldig streng: skal starte med "${u.prefix}"`:u.format==="ends_with"?`Ugyldig streng: skal ende med "${u.suffix}"`:u.format==="includes"?`Ugyldig streng: skal indeholde "${u.includes}"`:u.format==="regex"?`Ugyldig streng: skal matche m\xF8nsteret ${u.pattern}`:`Ugyldig ${n[u.format]??a.format}`}case"not_multiple_of":return`Ugyldigt tal: skal v\xE6re deleligt med ${a.divisor}`;case"unrecognized_keys":return`${a.keys.length>1?"Ukendte n\xF8gler":"Ukendt n\xF8gle"}: ${s(a.keys,", ")}`;case"invalid_key":return`Ugyldig n\xF8gle i ${a.origin}`;case"invalid_union":return"Ugyldigt input: matcher ingen af de tilladte typer";case"invalid_element":return`Ugyldig v\xE6rdi i ${a.origin}`;default:return"Ugyldigt input"}}};function qa(){return{localeError:ws()}}var Ss=()=>{let t={string:{unit:"Zeichen",verb:"zu haben"},file:{unit:"Bytes",verb:"zu haben"},array:{unit:"Elemente",verb:"zu haben"},set:{unit:"Elemente",verb:"zu haben"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"Zahl";case"object":{if(Array.isArray(e))return"Array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"Eingabe",email:"E-Mail-Adresse",url:"URL",emoji:"Emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-Datum und -Uhrzeit",date:"ISO-Datum",time:"ISO-Uhrzeit",duration:"ISO-Dauer",ipv4:"IPv4-Adresse",ipv6:"IPv6-Adresse",cidrv4:"IPv4-Bereich",cidrv6:"IPv6-Bereich",base64:"Base64-codierter String",base64url:"Base64-URL-codierter String",json_string:"JSON-String",e164:"E.164-Nummer",jwt:"JWT",template_literal:"Eingabe"};return e=>{switch(e.code){case"invalid_type":return`Ung\xFCltige Eingabe: erwartet ${e.expected}, erhalten ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Ung\xFCltige Eingabe: erwartet ${g(e.values[0])}`:`Ung\xFCltige Option: erwartet eine von ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Zu gro\xDF: erwartet, dass ${e.origin??"Wert"} ${n}${e.maximum.toString()} ${a.unit??"Elemente"} hat`:`Zu gro\xDF: erwartet, dass ${e.origin??"Wert"} ${n}${e.maximum.toString()} ist`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Zu klein: erwartet, dass ${e.origin} ${n}${e.minimum.toString()} ${a.unit} hat`:`Zu klein: erwartet, dass ${e.origin} ${n}${e.minimum.toString()} ist`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Ung\xFCltiger String: muss mit "${n.prefix}" beginnen`:n.format==="ends_with"?`Ung\xFCltiger String: muss mit "${n.suffix}" enden`:n.format==="includes"?`Ung\xFCltiger String: muss "${n.includes}" enthalten`:n.format==="regex"?`Ung\xFCltiger String: muss dem Muster ${n.pattern} entsprechen`:`Ung\xFCltig: ${o[n.format]??e.format}`}case"not_multiple_of":return`Ung\xFCltige Zahl: muss ein Vielfaches von ${e.divisor} sein`;case"unrecognized_keys":return`${e.keys.length>1?"Unbekannte Schl\xFCssel":"Unbekannter Schl\xFCssel"}: ${s(e.keys,", ")}`;case"invalid_key":return`Ung\xFCltiger Schl\xFCssel in ${e.origin}`;case"invalid_union":return"Ung\xFCltige Eingabe";case"invalid_element":return`Ung\xFCltiger Wert in ${e.origin}`;default:return"Ung\xFCltige Eingabe"}}};function Ha(){return{localeError:Ss()}}var js=t=>{let r=typeof t;switch(r){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return r},Ps=()=>{let t={string:{unit:"characters",verb:"to have"},file:{unit:"bytes",verb:"to have"},array:{unit:"items",verb:"to have"},set:{unit:"items",verb:"to have"}};function r(o){return t[o]??null}let i={regex:"input",email:"email address",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datetime",date:"ISO date",time:"ISO time",duration:"ISO duration",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded string",base64url:"base64url-encoded string",json_string:"JSON string",e164:"E.164 number",jwt:"JWT",template_literal:"input"};return o=>{switch(o.code){case"invalid_type":return`Invalid input: expected ${o.expected}, received ${js(o.input)}`;case"invalid_value":return o.values.length===1?`Invalid input: expected ${g(o.values[0])}`:`Invalid option: expected one of ${s(o.values,"|")}`;case"too_big":{let e=o.inclusive?"<=":"<",n=r(o.origin);return n?`Too big: expected ${o.origin??"value"} to have ${e}${o.maximum.toString()} ${n.unit??"elements"}`:`Too big: expected ${o.origin??"value"} to be ${e}${o.maximum.toString()}`}case"too_small":{let e=o.inclusive?">=":">",n=r(o.origin);return n?`Too small: expected ${o.origin} to have ${e}${o.minimum.toString()} ${n.unit}`:`Too small: expected ${o.origin} to be ${e}${o.minimum.toString()}`}case"invalid_format":{let e=o;return e.format==="starts_with"?`Invalid string: must start with "${e.prefix}"`:e.format==="ends_with"?`Invalid string: must end with "${e.suffix}"`:e.format==="includes"?`Invalid string: must include "${e.includes}"`:e.format==="regex"?`Invalid string: must match pattern ${e.pattern}`:`Invalid ${i[e.format]??o.format}`}case"not_multiple_of":return`Invalid number: must be a multiple of ${o.divisor}`;case"unrecognized_keys":return`Unrecognized key${o.keys.length>1?"s":""}: ${s(o.keys,", ")}`;case"invalid_key":return`Invalid key in ${o.origin}`;case"invalid_union":return"Invalid input";case"invalid_element":return`Invalid value in ${o.origin}`;default:return"Invalid input"}}};function Pt(){return{localeError:Ps()}}var Os=t=>{let r=typeof t;switch(r){case"number":return Number.isNaN(t)?"NaN":"nombro";case"object":{if(Array.isArray(t))return"tabelo";if(t===null)return"senvalora";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return r},Us=()=>{let t={string:{unit:"karaktrojn",verb:"havi"},file:{unit:"bajtojn",verb:"havi"},array:{unit:"elementojn",verb:"havi"},set:{unit:"elementojn",verb:"havi"}};function r(o){return t[o]??null}let i={regex:"enigo",email:"retadreso",url:"URL",emoji:"emo\u011Dio",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-datotempo",date:"ISO-dato",time:"ISO-tempo",duration:"ISO-da\u016Dro",ipv4:"IPv4-adreso",ipv6:"IPv6-adreso",cidrv4:"IPv4-rango",cidrv6:"IPv6-rango",base64:"64-ume kodita karaktraro",base64url:"URL-64-ume kodita karaktraro",json_string:"JSON-karaktraro",e164:"E.164-nombro",jwt:"JWT",template_literal:"enigo"};return o=>{switch(o.code){case"invalid_type":return`Nevalida enigo: atendi\u011Dis ${o.expected}, ricevi\u011Dis ${Os(o.input)}`;case"invalid_value":return o.values.length===1?`Nevalida enigo: atendi\u011Dis ${g(o.values[0])}`:`Nevalida opcio: atendi\u011Dis unu el ${s(o.values,"|")}`;case"too_big":{let e=o.inclusive?"<=":"<",n=r(o.origin);return n?`Tro granda: atendi\u011Dis ke ${o.origin??"valoro"} havu ${e}${o.maximum.toString()} ${n.unit??"elementojn"}`:`Tro granda: atendi\u011Dis ke ${o.origin??"valoro"} havu ${e}${o.maximum.toString()}`}case"too_small":{let e=o.inclusive?">=":">",n=r(o.origin);return n?`Tro malgranda: atendi\u011Dis ke ${o.origin} havu ${e}${o.minimum.toString()} ${n.unit}`:`Tro malgranda: atendi\u011Dis ke ${o.origin} estu ${e}${o.minimum.toString()}`}case"invalid_format":{let e=o;return e.format==="starts_with"?`Nevalida karaktraro: devas komenci\u011Di per "${e.prefix}"`:e.format==="ends_with"?`Nevalida karaktraro: devas fini\u011Di per "${e.suffix}"`:e.format==="includes"?`Nevalida karaktraro: devas inkluzivi "${e.includes}"`:e.format==="regex"?`Nevalida karaktraro: devas kongrui kun la modelo ${e.pattern}`:`Nevalida ${i[e.format]??o.format}`}case"not_multiple_of":return`Nevalida nombro: devas esti oblo de ${o.divisor}`;case"unrecognized_keys":return`Nekonata${o.keys.length>1?"j":""} \u015Dlosilo${o.keys.length>1?"j":""}: ${s(o.keys,", ")}`;case"invalid_key":return`Nevalida \u015Dlosilo en ${o.origin}`;case"invalid_union":return"Nevalida enigo";case"invalid_element":return`Nevalida valoro en ${o.origin}`;default:return"Nevalida enigo"}}};function Ya(){return{localeError:Us()}}var Ns=()=>{let t={string:{unit:"caracteres",verb:"tener"},file:{unit:"bytes",verb:"tener"},array:{unit:"elementos",verb:"tener"},set:{unit:"elementos",verb:"tener"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"n\xFAmero";case"object":{if(Array.isArray(e))return"arreglo";if(e===null)return"nulo";if(Object.getPrototypeOf(e)!==Object.prototype)return e.constructor.name}}return n},o={regex:"entrada",email:"direcci\xF3n de correo electr\xF3nico",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"fecha y hora ISO",date:"fecha ISO",time:"hora ISO",duration:"duraci\xF3n ISO",ipv4:"direcci\xF3n IPv4",ipv6:"direcci\xF3n IPv6",cidrv4:"rango IPv4",cidrv6:"rango IPv6",base64:"cadena codificada en base64",base64url:"URL codificada en base64",json_string:"cadena JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return e=>{switch(e.code){case"invalid_type":return`Entrada inv\xE1lida: se esperaba ${e.expected}, recibido ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Entrada inv\xE1lida: se esperaba ${g(e.values[0])}`:`Opci\xF3n inv\xE1lida: se esperaba una de ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Demasiado grande: se esperaba que ${e.origin??"valor"} tuviera ${n}${e.maximum.toString()} ${a.unit??"elementos"}`:`Demasiado grande: se esperaba que ${e.origin??"valor"} fuera ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Demasiado peque\xF1o: se esperaba que ${e.origin} tuviera ${n}${e.minimum.toString()} ${a.unit}`:`Demasiado peque\xF1o: se esperaba que ${e.origin} fuera ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Cadena inv\xE1lida: debe comenzar con "${n.prefix}"`:n.format==="ends_with"?`Cadena inv\xE1lida: debe terminar en "${n.suffix}"`:n.format==="includes"?`Cadena inv\xE1lida: debe incluir "${n.includes}"`:n.format==="regex"?`Cadena inv\xE1lida: debe coincidir con el patr\xF3n ${n.pattern}`:`Inv\xE1lido ${o[n.format]??e.format}`}case"not_multiple_of":return`N\xFAmero inv\xE1lido: debe ser m\xFAltiplo de ${e.divisor}`;case"unrecognized_keys":return`Llave${e.keys.length>1?"s":""} desconocida${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Llave inv\xE1lida en ${e.origin}`;case"invalid_union":return"Entrada inv\xE1lida";case"invalid_element":return`Valor inv\xE1lido en ${e.origin}`;default:return"Entrada inv\xE1lida"}}};function Qa(){return{localeError:Ns()}}var Zs=()=>{let t={string:{unit:"\u06A9\u0627\u0631\u0627\u06A9\u062A\u0631",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},file:{unit:"\u0628\u0627\u06CC\u062A",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},array:{unit:"\u0622\u06CC\u062A\u0645",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"},set:{unit:"\u0622\u06CC\u062A\u0645",verb:"\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0639\u062F\u062F";case"object":{if(Array.isArray(e))return"\u0622\u0631\u0627\u06CC\u0647";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0648\u0631\u0648\u062F\u06CC",email:"\u0622\u062F\u0631\u0633 \u0627\u06CC\u0645\u06CC\u0644",url:"URL",emoji:"\u0627\u06CC\u0645\u0648\u062C\u06CC",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u062A\u0627\u0631\u06CC\u062E \u0648 \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",date:"\u062A\u0627\u0631\u06CC\u062E \u0627\u06CC\u0632\u0648",time:"\u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",duration:"\u0645\u062F\u062A \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",ipv4:"IPv4 \u0622\u062F\u0631\u0633",ipv6:"IPv6 \u0622\u062F\u0631\u0633",cidrv4:"IPv4 \u062F\u0627\u0645\u0646\u0647",cidrv6:"IPv6 \u062F\u0627\u0645\u0646\u0647",base64:"base64-encoded \u0631\u0634\u062A\u0647",base64url:"base64url-encoded \u0631\u0634\u062A\u0647",json_string:"JSON \u0631\u0634\u062A\u0647",e164:"E.164 \u0639\u062F\u062F",jwt:"JWT",template_literal:"\u0648\u0631\u0648\u062F\u06CC"};return e=>{switch(e.code){case"invalid_type":return`\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${e.expected} \u0645\u06CC\u200C\u0628\u0648\u062F\u060C ${i(e.input)} \u062F\u0631\u06CC\u0627\u0641\u062A \u0634\u062F`;case"invalid_value":return e.values.length===1?`\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${g(e.values[0])} \u0645\u06CC\u200C\u0628\u0648\u062F`:`\u06AF\u0632\u06CC\u0646\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A \u06CC\u06A9\u06CC \u0627\u0632 ${s(e.values,"|")} \u0645\u06CC\u200C\u0628\u0648\u062F`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${e.origin??"\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${n}${e.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631"} \u0628\u0627\u0634\u062F`:`\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${e.origin??"\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${n}${e.maximum.toString()} \u0628\u0627\u0634\u062F`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${e.origin} \u0628\u0627\u06CC\u062F ${n}${e.minimum.toString()} ${a.unit} \u0628\u0627\u0634\u062F`:`\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${e.origin} \u0628\u0627\u06CC\u062F ${n}${e.minimum.toString()} \u0628\u0627\u0634\u062F`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${n.prefix}" \u0634\u0631\u0648\u0639 \u0634\u0648\u062F`:n.format==="ends_with"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${n.suffix}" \u062A\u0645\u0627\u0645 \u0634\u0648\u062F`:n.format==="includes"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0634\u0627\u0645\u0644 "${n.includes}" \u0628\u0627\u0634\u062F`:n.format==="regex"?`\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \u0627\u0644\u06AF\u0648\u06CC ${n.pattern} \u0645\u0637\u0627\u0628\u0642\u062A \u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F`:`${o[n.format]??e.format} \u0646\u0627\u0645\u0639\u062A\u0628\u0631`}case"not_multiple_of":return`\u0639\u062F\u062F \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0645\u0636\u0631\u0628 ${e.divisor} \u0628\u0627\u0634\u062F`;case"unrecognized_keys":return`\u06A9\u0644\u06CC\u062F${e.keys.length>1?"\u0647\u0627\u06CC":""} \u0646\u0627\u0634\u0646\u0627\u0633: ${s(e.keys,", ")}`;case"invalid_key":return`\u06A9\u0644\u06CC\u062F \u0646\u0627\u0634\u0646\u0627\u0633 \u062F\u0631 ${e.origin}`;case"invalid_union":return"\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631";case"invalid_element":return`\u0645\u0642\u062F\u0627\u0631 \u0646\u0627\u0645\u0639\u062A\u0628\u0631 \u062F\u0631 ${e.origin}`;default:return"\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631"}}};function eu(){return{localeError:Zs()}}var Ds=()=>{let t={string:{unit:"merkki\xE4",subject:"merkkijonon"},file:{unit:"tavua",subject:"tiedoston"},array:{unit:"alkiota",subject:"listan"},set:{unit:"alkiota",subject:"joukon"},number:{unit:"",subject:"luvun"},bigint:{unit:"",subject:"suuren kokonaisluvun"},int:{unit:"",subject:"kokonaisluvun"},date:{unit:"",subject:"p\xE4iv\xE4m\xE4\xE4r\xE4n"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"s\xE4\xE4nn\xF6llinen lauseke",email:"s\xE4hk\xF6postiosoite",url:"URL-osoite",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-aikaleima",date:"ISO-p\xE4iv\xE4m\xE4\xE4r\xE4",time:"ISO-aika",duration:"ISO-kesto",ipv4:"IPv4-osoite",ipv6:"IPv6-osoite",cidrv4:"IPv4-alue",cidrv6:"IPv6-alue",base64:"base64-koodattu merkkijono",base64url:"base64url-koodattu merkkijono",json_string:"JSON-merkkijono",e164:"E.164-luku",jwt:"JWT",template_literal:"templaattimerkkijono"};return e=>{switch(e.code){case"invalid_type":return`Virheellinen tyyppi: odotettiin ${e.expected}, oli ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Virheellinen sy\xF6te: t\xE4ytyy olla ${g(e.values[0])}`:`Virheellinen valinta: t\xE4ytyy olla yksi seuraavista: ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Liian suuri: ${a.subject} t\xE4ytyy olla ${n}${e.maximum.toString()} ${a.unit}`.trim():`Liian suuri: arvon t\xE4ytyy olla ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Liian pieni: ${a.subject} t\xE4ytyy olla ${n}${e.minimum.toString()} ${a.unit}`.trim():`Liian pieni: arvon t\xE4ytyy olla ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Virheellinen sy\xF6te: t\xE4ytyy alkaa "${n.prefix}"`:n.format==="ends_with"?`Virheellinen sy\xF6te: t\xE4ytyy loppua "${n.suffix}"`:n.format==="includes"?`Virheellinen sy\xF6te: t\xE4ytyy sis\xE4lt\xE4\xE4 "${n.includes}"`:n.format==="regex"?`Virheellinen sy\xF6te: t\xE4ytyy vastata s\xE4\xE4nn\xF6llist\xE4 lauseketta ${n.pattern}`:`Virheellinen ${o[n.format]??e.format}`}case"not_multiple_of":return`Virheellinen luku: t\xE4ytyy olla luvun ${e.divisor} monikerta`;case"unrecognized_keys":return`${e.keys.length>1?"Tuntemattomat avaimet":"Tuntematon avain"}: ${s(e.keys,", ")}`;case"invalid_key":return"Virheellinen avain tietueessa";case"invalid_union":return"Virheellinen unioni";case"invalid_element":return"Virheellinen arvo joukossa";default:return"Virheellinen sy\xF6te"}}};function tu(){return{localeError:Ds()}}var Ts=()=>{let t={string:{unit:"caract\xE8res",verb:"avoir"},file:{unit:"octets",verb:"avoir"},array:{unit:"\xE9l\xE9ments",verb:"avoir"},set:{unit:"\xE9l\xE9ments",verb:"avoir"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"nombre";case"object":{if(Array.isArray(e))return"tableau";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"entr\xE9e",email:"adresse e-mail",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"date et heure ISO",date:"date ISO",time:"heure ISO",duration:"dur\xE9e ISO",ipv4:"adresse IPv4",ipv6:"adresse IPv6",cidrv4:"plage IPv4",cidrv6:"plage IPv6",base64:"cha\xEEne encod\xE9e en base64",base64url:"cha\xEEne encod\xE9e en base64url",json_string:"cha\xEEne JSON",e164:"num\xE9ro E.164",jwt:"JWT",template_literal:"entr\xE9e"};return e=>{switch(e.code){case"invalid_type":return`Entr\xE9e invalide : ${e.expected} attendu, ${i(e.input)} re\xE7u`;case"invalid_value":return e.values.length===1?`Entr\xE9e invalide : ${g(e.values[0])} attendu`:`Option invalide : une valeur parmi ${s(e.values,"|")} attendue`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Trop grand : ${e.origin??"valeur"} doit ${a.verb} ${n}${e.maximum.toString()} ${a.unit??"\xE9l\xE9ment(s)"}`:`Trop grand : ${e.origin??"valeur"} doit \xEAtre ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Trop petit : ${e.origin} doit ${a.verb} ${n}${e.minimum.toString()} ${a.unit}`:`Trop petit : ${e.origin} doit \xEAtre ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Cha\xEEne invalide : doit commencer par "${n.prefix}"`:n.format==="ends_with"?`Cha\xEEne invalide : doit se terminer par "${n.suffix}"`:n.format==="includes"?`Cha\xEEne invalide : doit inclure "${n.includes}"`:n.format==="regex"?`Cha\xEEne invalide : doit correspondre au mod\xE8le ${n.pattern}`:`${o[n.format]??e.format} invalide`}case"not_multiple_of":return`Nombre invalide : doit \xEAtre un multiple de ${e.divisor}`;case"unrecognized_keys":return`Cl\xE9${e.keys.length>1?"s":""} non reconnue${e.keys.length>1?"s":""} : ${s(e.keys,", ")}`;case"invalid_key":return`Cl\xE9 invalide dans ${e.origin}`;case"invalid_union":return"Entr\xE9e invalide";case"invalid_element":return`Valeur invalide dans ${e.origin}`;default:return"Entr\xE9e invalide"}}};function ru(){return{localeError:Ts()}}var Es=()=>{let t={string:{unit:"caract\xE8res",verb:"avoir"},file:{unit:"octets",verb:"avoir"},array:{unit:"\xE9l\xE9ments",verb:"avoir"},set:{unit:"\xE9l\xE9ments",verb:"avoir"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"entr\xE9e",email:"adresse courriel",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"date-heure ISO",date:"date ISO",time:"heure ISO",duration:"dur\xE9e ISO",ipv4:"adresse IPv4",ipv6:"adresse IPv6",cidrv4:"plage IPv4",cidrv6:"plage IPv6",base64:"cha\xEEne encod\xE9e en base64",base64url:"cha\xEEne encod\xE9e en base64url",json_string:"cha\xEEne JSON",e164:"num\xE9ro E.164",jwt:"JWT",template_literal:"entr\xE9e"};return e=>{switch(e.code){case"invalid_type":return`Entr\xE9e invalide : attendu ${e.expected}, re\xE7u ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Entr\xE9e invalide : attendu ${g(e.values[0])}`:`Option invalide : attendu l'une des valeurs suivantes ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"\u2264":"<",a=r(e.origin);return a?`Trop grand : attendu que ${e.origin??"la valeur"} ait ${n}${e.maximum.toString()} ${a.unit}`:`Trop grand : attendu que ${e.origin??"la valeur"} soit ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?"\u2265":">",a=r(e.origin);return a?`Trop petit : attendu que ${e.origin} ait ${n}${e.minimum.toString()} ${a.unit}`:`Trop petit : attendu que ${e.origin} soit ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Cha\xEEne invalide : doit commencer par "${n.prefix}"`:n.format==="ends_with"?`Cha\xEEne invalide : doit se terminer par "${n.suffix}"`:n.format==="includes"?`Cha\xEEne invalide : doit inclure "${n.includes}"`:n.format==="regex"?`Cha\xEEne invalide : doit correspondre au motif ${n.pattern}`:`${o[n.format]??e.format} invalide`}case"not_multiple_of":return`Nombre invalide : doit \xEAtre un multiple de ${e.divisor}`;case"unrecognized_keys":return`Cl\xE9${e.keys.length>1?"s":""} non reconnue${e.keys.length>1?"s":""} : ${s(e.keys,", ")}`;case"invalid_key":return`Cl\xE9 invalide dans ${e.origin}`;case"invalid_union":return"Entr\xE9e invalide";case"invalid_element":return`Valeur invalide dans ${e.origin}`;default:return"Entr\xE9e invalide"}}};function nu(){return{localeError:Es()}}var Ls=()=>{let t={string:{unit:"\u05D0\u05D5\u05EA\u05D9\u05D5\u05EA",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},file:{unit:"\u05D1\u05D9\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},array:{unit:"\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"},set:{unit:"\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD",verb:"\u05DC\u05DB\u05DC\u05D5\u05DC"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u05E7\u05DC\u05D8",email:"\u05DB\u05EA\u05D5\u05D1\u05EA \u05D0\u05D9\u05DE\u05D9\u05D9\u05DC",url:"\u05DB\u05EA\u05D5\u05D1\u05EA \u05E8\u05E9\u05EA",emoji:"\u05D0\u05D9\u05DE\u05D5\u05D2'\u05D9",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u05EA\u05D0\u05E8\u05D9\u05DA \u05D5\u05D6\u05DE\u05DF ISO",date:"\u05EA\u05D0\u05E8\u05D9\u05DA ISO",time:"\u05D6\u05DE\u05DF ISO",duration:"\u05DE\u05E9\u05DA \u05D6\u05DE\u05DF ISO",ipv4:"\u05DB\u05EA\u05D5\u05D1\u05EA IPv4",ipv6:"\u05DB\u05EA\u05D5\u05D1\u05EA IPv6",cidrv4:"\u05D8\u05D5\u05D5\u05D7 IPv4",cidrv6:"\u05D8\u05D5\u05D5\u05D7 IPv6",base64:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64",base64url:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64 \u05DC\u05DB\u05EA\u05D5\u05D1\u05D5\u05EA \u05E8\u05E9\u05EA",json_string:"\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA JSON",e164:"\u05DE\u05E1\u05E4\u05E8 E.164",jwt:"JWT",template_literal:"\u05E7\u05DC\u05D8"};return e=>{switch(e.code){case"invalid_type":return`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${e.expected}, \u05D4\u05EA\u05E7\u05D1\u05DC ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${g(e.values[0])}`:`\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA \u05D0\u05D7\u05EA \u05DE\u05D4\u05D0\u05E4\u05E9\u05E8\u05D5\u05D9\u05D5\u05EA  ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${e.origin??"value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${n}${e.maximum.toString()} ${a.unit??"elements"}`:`\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${e.origin??"value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${e.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${n}${e.minimum.toString()} ${a.unit}`:`\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${e.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D7\u05D9\u05DC \u05D1"${n.prefix}"`:n.format==="ends_with"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1 "${n.suffix}"`:n.format==="includes"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05DB\u05DC\u05D5\u05DC "${n.includes}"`:n.format==="regex"?`\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D0\u05D9\u05DD \u05DC\u05EA\u05D1\u05E0\u05D9\u05EA ${n.pattern}`:`${o[n.format]??e.format} \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`}case"not_multiple_of":return`\u05DE\u05E1\u05E4\u05E8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05D7\u05D9\u05D9\u05D1 \u05DC\u05D4\u05D9\u05D5\u05EA \u05DE\u05DB\u05E4\u05DC\u05D4 \u05E9\u05DC ${e.divisor}`;case"unrecognized_keys":return`\u05DE\u05E4\u05EA\u05D7${e.keys.length>1?"\u05D5\u05EA":""} \u05DC\u05D0 \u05DE\u05D6\u05D5\u05D4${e.keys.length>1?"\u05D9\u05DD":"\u05D4"}: ${s(e.keys,", ")}`;case"invalid_key":return`\u05DE\u05E4\u05EA\u05D7 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${e.origin}`;case"invalid_union":return"\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF";case"invalid_element":return`\u05E2\u05E8\u05DA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${e.origin}`;default:return"\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF"}}};function iu(){return{localeError:Ls()}}var As=()=>{let t={string:{unit:"karakter",verb:"legyen"},file:{unit:"byte",verb:"legyen"},array:{unit:"elem",verb:"legyen"},set:{unit:"elem",verb:"legyen"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"sz\xE1m";case"object":{if(Array.isArray(e))return"t\xF6mb";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"bemenet",email:"email c\xEDm",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO id\u0151b\xE9lyeg",date:"ISO d\xE1tum",time:"ISO id\u0151",duration:"ISO id\u0151intervallum",ipv4:"IPv4 c\xEDm",ipv6:"IPv6 c\xEDm",cidrv4:"IPv4 tartom\xE1ny",cidrv6:"IPv6 tartom\xE1ny",base64:"base64-k\xF3dolt string",base64url:"base64url-k\xF3dolt string",json_string:"JSON string",e164:"E.164 sz\xE1m",jwt:"JWT",template_literal:"bemenet"};return e=>{switch(e.code){case"invalid_type":return`\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${e.expected}, a kapott \xE9rt\xE9k ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${g(e.values[0])}`:`\xC9rv\xE9nytelen opci\xF3: valamelyik \xE9rt\xE9k v\xE1rt ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`T\xFAl nagy: ${e.origin??"\xE9rt\xE9k"} m\xE9rete t\xFAl nagy ${n}${e.maximum.toString()} ${a.unit??"elem"}`:`T\xFAl nagy: a bemeneti \xE9rt\xE9k ${e.origin??"\xE9rt\xE9k"} t\xFAl nagy: ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${e.origin} m\xE9rete t\xFAl kicsi ${n}${e.minimum.toString()} ${a.unit}`:`T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${e.origin} t\xFAl kicsi ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\xC9rv\xE9nytelen string: "${n.prefix}" \xE9rt\xE9kkel kell kezd\u0151dnie`:n.format==="ends_with"?`\xC9rv\xE9nytelen string: "${n.suffix}" \xE9rt\xE9kkel kell v\xE9gz\u0151dnie`:n.format==="includes"?`\xC9rv\xE9nytelen string: "${n.includes}" \xE9rt\xE9ket kell tartalmaznia`:n.format==="regex"?`\xC9rv\xE9nytelen string: ${n.pattern} mint\xE1nak kell megfelelnie`:`\xC9rv\xE9nytelen ${o[n.format]??e.format}`}case"not_multiple_of":return`\xC9rv\xE9nytelen sz\xE1m: ${e.divisor} t\xF6bbsz\xF6r\xF6s\xE9nek kell lennie`;case"unrecognized_keys":return`Ismeretlen kulcs${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`\xC9rv\xE9nytelen kulcs ${e.origin}`;case"invalid_union":return"\xC9rv\xE9nytelen bemenet";case"invalid_element":return`\xC9rv\xE9nytelen \xE9rt\xE9k: ${e.origin}`;default:return"\xC9rv\xE9nytelen bemenet"}}};function ou(){return{localeError:As()}}var Rs=()=>{let t={string:{unit:"karakter",verb:"memiliki"},file:{unit:"byte",verb:"memiliki"},array:{unit:"item",verb:"memiliki"},set:{unit:"item",verb:"memiliki"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"input",email:"alamat email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"tanggal dan waktu format ISO",date:"tanggal format ISO",time:"jam format ISO",duration:"durasi format ISO",ipv4:"alamat IPv4",ipv6:"alamat IPv6",cidrv4:"rentang alamat IPv4",cidrv6:"rentang alamat IPv6",base64:"string dengan enkode base64",base64url:"string dengan enkode base64url",json_string:"string JSON",e164:"angka E.164",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`Input tidak valid: diharapkan ${e.expected}, diterima ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Input tidak valid: diharapkan ${g(e.values[0])}`:`Pilihan tidak valid: diharapkan salah satu dari ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Terlalu besar: diharapkan ${e.origin??"value"} memiliki ${n}${e.maximum.toString()} ${a.unit??"elemen"}`:`Terlalu besar: diharapkan ${e.origin??"value"} menjadi ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Terlalu kecil: diharapkan ${e.origin} memiliki ${n}${e.minimum.toString()} ${a.unit}`:`Terlalu kecil: diharapkan ${e.origin} menjadi ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`String tidak valid: harus dimulai dengan "${n.prefix}"`:n.format==="ends_with"?`String tidak valid: harus berakhir dengan "${n.suffix}"`:n.format==="includes"?`String tidak valid: harus menyertakan "${n.includes}"`:n.format==="regex"?`String tidak valid: harus sesuai pola ${n.pattern}`:`${o[n.format]??e.format} tidak valid`}case"not_multiple_of":return`Angka tidak valid: harus kelipatan dari ${e.divisor}`;case"unrecognized_keys":return`Kunci tidak dikenali ${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Kunci tidak valid di ${e.origin}`;case"invalid_union":return"Input tidak valid";case"invalid_element":return`Nilai tidak valid di ${e.origin}`;default:return"Input tidak valid"}}};function au(){return{localeError:Rs()}}var Cs=t=>{let r=typeof t;switch(r){case"number":return Number.isNaN(t)?"NaN":"n\xFAmer";case"object":{if(Array.isArray(t))return"fylki";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return r},Vs=()=>{let t={string:{unit:"stafi",verb:"a\xF0 hafa"},file:{unit:"b\xE6ti",verb:"a\xF0 hafa"},array:{unit:"hluti",verb:"a\xF0 hafa"},set:{unit:"hluti",verb:"a\xF0 hafa"}};function r(o){return t[o]??null}let i={regex:"gildi",email:"netfang",url:"vefsl\xF3\xF0",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dagsetning og t\xEDmi",date:"ISO dagsetning",time:"ISO t\xEDmi",duration:"ISO t\xEDmalengd",ipv4:"IPv4 address",ipv6:"IPv6 address",cidrv4:"IPv4 range",cidrv6:"IPv6 range",base64:"base64-encoded strengur",base64url:"base64url-encoded strengur",json_string:"JSON strengur",e164:"E.164 t\xF6lugildi",jwt:"JWT",template_literal:"gildi"};return o=>{switch(o.code){case"invalid_type":return`Rangt gildi: \xDE\xFA sl\xF3st inn ${Cs(o.input)} \xFEar sem \xE1 a\xF0 vera ${o.expected}`;case"invalid_value":return o.values.length===1?`Rangt gildi: gert r\xE1\xF0 fyrir ${g(o.values[0])}`:`\xD3gilt val: m\xE1 vera eitt af eftirfarandi ${s(o.values,"|")}`;case"too_big":{let e=o.inclusive?"<=":"<",n=r(o.origin);return n?`Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${o.origin??"gildi"} hafi ${e}${o.maximum.toString()} ${n.unit??"hluti"}`:`Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${o.origin??"gildi"} s\xE9 ${e}${o.maximum.toString()}`}case"too_small":{let e=o.inclusive?">=":">",n=r(o.origin);return n?`Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${o.origin} hafi ${e}${o.minimum.toString()} ${n.unit}`:`Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${o.origin} s\xE9 ${e}${o.minimum.toString()}`}case"invalid_format":{let e=o;return e.format==="starts_with"?`\xD3gildur strengur: ver\xF0ur a\xF0 byrja \xE1 "${e.prefix}"`:e.format==="ends_with"?`\xD3gildur strengur: ver\xF0ur a\xF0 enda \xE1 "${e.suffix}"`:e.format==="includes"?`\xD3gildur strengur: ver\xF0ur a\xF0 innihalda "${e.includes}"`:e.format==="regex"?`\xD3gildur strengur: ver\xF0ur a\xF0 fylgja mynstri ${e.pattern}`:`Rangt ${i[e.format]??o.format}`}case"not_multiple_of":return`R\xF6ng tala: ver\xF0ur a\xF0 vera margfeldi af ${o.divisor}`;case"unrecognized_keys":return`\xD3\xFEekkt ${o.keys.length>1?"ir lyklar":"ur lykill"}: ${s(o.keys,", ")}`;case"invalid_key":return`Rangur lykill \xED ${o.origin}`;case"invalid_union":return"Rangt gildi";case"invalid_element":return`Rangt gildi \xED ${o.origin}`;default:return"Rangt gildi"}}};function uu(){return{localeError:Vs()}}var Fs=()=>{let t={string:{unit:"caratteri",verb:"avere"},file:{unit:"byte",verb:"avere"},array:{unit:"elementi",verb:"avere"},set:{unit:"elementi",verb:"avere"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"numero";case"object":{if(Array.isArray(e))return"vettore";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"input",email:"indirizzo email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data e ora ISO",date:"data ISO",time:"ora ISO",duration:"durata ISO",ipv4:"indirizzo IPv4",ipv6:"indirizzo IPv6",cidrv4:"intervallo IPv4",cidrv6:"intervallo IPv6",base64:"stringa codificata in base64",base64url:"URL codificata in base64",json_string:"stringa JSON",e164:"numero E.164",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`Input non valido: atteso ${e.expected}, ricevuto ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Input non valido: atteso ${g(e.values[0])}`:`Opzione non valida: atteso uno tra ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Troppo grande: ${e.origin??"valore"} deve avere ${n}${e.maximum.toString()} ${a.unit??"elementi"}`:`Troppo grande: ${e.origin??"valore"} deve essere ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Troppo piccolo: ${e.origin} deve avere ${n}${e.minimum.toString()} ${a.unit}`:`Troppo piccolo: ${e.origin} deve essere ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Stringa non valida: deve iniziare con "${n.prefix}"`:n.format==="ends_with"?`Stringa non valida: deve terminare con "${n.suffix}"`:n.format==="includes"?`Stringa non valida: deve includere "${n.includes}"`:n.format==="regex"?`Stringa non valida: deve corrispondere al pattern ${n.pattern}`:`Invalid ${o[n.format]??e.format}`}case"not_multiple_of":return`Numero non valido: deve essere un multiplo di ${e.divisor}`;case"unrecognized_keys":return`Chiav${e.keys.length>1?"i":"e"} non riconosciut${e.keys.length>1?"e":"a"}: ${s(e.keys,", ")}`;case"invalid_key":return`Chiave non valida in ${e.origin}`;case"invalid_union":return"Input non valido";case"invalid_element":return`Valore non valido in ${e.origin}`;default:return"Input non valido"}}};function cu(){return{localeError:Fs()}}var Ms=()=>{let t={string:{unit:"\u6587\u5B57",verb:"\u3067\u3042\u308B"},file:{unit:"\u30D0\u30A4\u30C8",verb:"\u3067\u3042\u308B"},array:{unit:"\u8981\u7D20",verb:"\u3067\u3042\u308B"},set:{unit:"\u8981\u7D20",verb:"\u3067\u3042\u308B"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u6570\u5024";case"object":{if(Array.isArray(e))return"\u914D\u5217";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u5165\u529B\u5024",email:"\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9",url:"URL",emoji:"\u7D75\u6587\u5B57",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO\u65E5\u6642",date:"ISO\u65E5\u4ED8",time:"ISO\u6642\u523B",duration:"ISO\u671F\u9593",ipv4:"IPv4\u30A2\u30C9\u30EC\u30B9",ipv6:"IPv6\u30A2\u30C9\u30EC\u30B9",cidrv4:"IPv4\u7BC4\u56F2",cidrv6:"IPv6\u7BC4\u56F2",base64:"base64\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",base64url:"base64url\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",json_string:"JSON\u6587\u5B57\u5217",e164:"E.164\u756A\u53F7",jwt:"JWT",template_literal:"\u5165\u529B\u5024"};return e=>{switch(e.code){case"invalid_type":return`\u7121\u52B9\u306A\u5165\u529B: ${e.expected}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F\u304C\u3001${i(e.input)}\u304C\u5165\u529B\u3055\u308C\u307E\u3057\u305F`;case"invalid_value":return e.values.length===1?`\u7121\u52B9\u306A\u5165\u529B: ${g(e.values[0])}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F`:`\u7121\u52B9\u306A\u9078\u629E: ${s(e.values,"\u3001")}\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;case"too_big":{let n=e.inclusive?"\u4EE5\u4E0B\u3067\u3042\u308B":"\u3088\u308A\u5C0F\u3055\u3044",a=r(e.origin);return a?`\u5927\u304D\u3059\u304E\u308B\u5024: ${e.origin??"\u5024"}\u306F${e.maximum.toString()}${a.unit??"\u8981\u7D20"}${n}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u5927\u304D\u3059\u304E\u308B\u5024: ${e.origin??"\u5024"}\u306F${e.maximum.toString()}${n}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`}case"too_small":{let n=e.inclusive?"\u4EE5\u4E0A\u3067\u3042\u308B":"\u3088\u308A\u5927\u304D\u3044",a=r(e.origin);return a?`\u5C0F\u3055\u3059\u304E\u308B\u5024: ${e.origin}\u306F${e.minimum.toString()}${a.unit}${n}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u5C0F\u3055\u3059\u304E\u308B\u5024: ${e.origin}\u306F${e.minimum.toString()}${n}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${n.prefix}"\u3067\u59CB\u307E\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:n.format==="ends_with"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${n.suffix}"\u3067\u7D42\u308F\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:n.format==="includes"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: "${n.includes}"\u3092\u542B\u3080\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:n.format==="regex"?`\u7121\u52B9\u306A\u6587\u5B57\u5217: \u30D1\u30BF\u30FC\u30F3${n.pattern}\u306B\u4E00\u81F4\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`:`\u7121\u52B9\u306A${o[n.format]??e.format}`}case"not_multiple_of":return`\u7121\u52B9\u306A\u6570\u5024: ${e.divisor}\u306E\u500D\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;case"unrecognized_keys":return`\u8A8D\u8B58\u3055\u308C\u3066\u3044\u306A\u3044\u30AD\u30FC${e.keys.length>1?"\u7FA4":""}: ${s(e.keys,"\u3001")}`;case"invalid_key":return`${e.origin}\u5185\u306E\u7121\u52B9\u306A\u30AD\u30FC`;case"invalid_union":return"\u7121\u52B9\u306A\u5165\u529B";case"invalid_element":return`${e.origin}\u5185\u306E\u7121\u52B9\u306A\u5024`;default:return"\u7121\u52B9\u306A\u5165\u529B"}}};function su(){return{localeError:Ms()}}var Js=()=>{let t={string:{unit:"\u178F\u17BD\u17A2\u1780\u17D2\u179F\u179A",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},file:{unit:"\u1794\u17C3",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},array:{unit:"\u1792\u17B6\u178F\u17BB",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"},set:{unit:"\u1792\u17B6\u178F\u17BB",verb:"\u1782\u17BD\u179A\u1798\u17B6\u1793"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"\u1798\u17B7\u1793\u1798\u17C2\u1793\u1787\u17B6\u179B\u17C1\u1781 (NaN)":"\u179B\u17C1\u1781";case"object":{if(Array.isArray(e))return"\u17A2\u17B6\u179A\u17C1 (Array)";if(e===null)return"\u1782\u17D2\u1798\u17B6\u1793\u178F\u1798\u17D2\u179B\u17C3 (null)";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B",email:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793\u17A2\u17CA\u17B8\u1798\u17C2\u179B",url:"URL",emoji:"\u179F\u1789\u17D2\u1789\u17B6\u17A2\u17B6\u179A\u1798\u17D2\u1798\u178E\u17CD",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 \u1793\u17B7\u1784\u1798\u17C9\u17C4\u1784 ISO",date:"\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 ISO",time:"\u1798\u17C9\u17C4\u1784 ISO",duration:"\u179A\u1799\u17C8\u1796\u17C1\u179B ISO",ipv4:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",ipv6:"\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",cidrv4:"\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",cidrv6:"\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",base64:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64",base64url:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64url",json_string:"\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A JSON",e164:"\u179B\u17C1\u1781 E.164",jwt:"JWT",template_literal:"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B"};return e=>{switch(e.code){case"invalid_type":return`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${e.expected} \u1794\u17C9\u17BB\u1793\u17D2\u178F\u17C2\u1791\u1791\u17BD\u179B\u1794\u17B6\u1793 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${g(e.values[0])}`:`\u1787\u1798\u17D2\u179A\u17BE\u179F\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1787\u17B6\u1798\u17BD\u1799\u1780\u17D2\u1793\u17BB\u1784\u1785\u17C6\u178E\u17C4\u1798 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${e.origin??"\u178F\u1798\u17D2\u179B\u17C3"} ${n} ${e.maximum.toString()} ${a.unit??"\u1792\u17B6\u178F\u17BB"}`:`\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${e.origin??"\u178F\u1798\u17D2\u179B\u17C3"} ${n} ${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${e.origin} ${n} ${e.minimum.toString()} ${a.unit}`:`\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${e.origin} ${n} ${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1785\u17B6\u1794\u17CB\u1795\u17D2\u178F\u17BE\u1798\u178A\u17C4\u1799 "${n.prefix}"`:n.format==="ends_with"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1794\u1789\u17D2\u1785\u1794\u17CB\u178A\u17C4\u1799 "${n.suffix}"`:n.format==="includes"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1798\u17B6\u1793 "${n.includes}"`:n.format==="regex"?`\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1795\u17D2\u1782\u17BC\u1795\u17D2\u1782\u1784\u1793\u17B9\u1784\u1791\u1798\u17D2\u179A\u1784\u17CB\u178A\u17C2\u179B\u1794\u17B6\u1793\u1780\u17C6\u178E\u178F\u17CB ${n.pattern}`:`\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u179B\u17C1\u1781\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1787\u17B6\u1796\u17A0\u17BB\u1782\u17BB\u178E\u1793\u17C3 ${e.divisor}`;case"unrecognized_keys":return`\u179A\u1780\u1783\u17BE\u1789\u179F\u17C4\u1798\u17B7\u1793\u179F\u17D2\u1782\u17B6\u179B\u17CB\u17D6 ${s(e.keys,", ")}`;case"invalid_key":return`\u179F\u17C4\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${e.origin}`;case"invalid_union":return"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C";case"invalid_element":return`\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${e.origin}`;default:return"\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C"}}};function lu(){return{localeError:Js()}}var Ws=()=>{let t={string:{unit:"\uBB38\uC790",verb:"to have"},file:{unit:"\uBC14\uC774\uD2B8",verb:"to have"},array:{unit:"\uAC1C",verb:"to have"},set:{unit:"\uAC1C",verb:"to have"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\uC785\uB825",email:"\uC774\uBA54\uC77C \uC8FC\uC18C",url:"URL",emoji:"\uC774\uBAA8\uC9C0",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \uB0A0\uC9DC\uC2DC\uAC04",date:"ISO \uB0A0\uC9DC",time:"ISO \uC2DC\uAC04",duration:"ISO \uAE30\uAC04",ipv4:"IPv4 \uC8FC\uC18C",ipv6:"IPv6 \uC8FC\uC18C",cidrv4:"IPv4 \uBC94\uC704",cidrv6:"IPv6 \uBC94\uC704",base64:"base64 \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",base64url:"base64url \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",json_string:"JSON \uBB38\uC790\uC5F4",e164:"E.164 \uBC88\uD638",jwt:"JWT",template_literal:"\uC785\uB825"};return e=>{switch(e.code){case"invalid_type":return`\uC798\uBABB\uB41C \uC785\uB825: \uC608\uC0C1 \uD0C0\uC785\uC740 ${e.expected}, \uBC1B\uC740 \uD0C0\uC785\uC740 ${i(e.input)}\uC785\uB2C8\uB2E4`;case"invalid_value":return e.values.length===1?`\uC798\uBABB\uB41C \uC785\uB825: \uAC12\uC740 ${g(e.values[0])} \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4`:`\uC798\uBABB\uB41C \uC635\uC158: ${s(e.values,"\uB610\uB294 ")} \uC911 \uD558\uB098\uC5EC\uC57C \uD569\uB2C8\uB2E4`;case"too_big":{let n=e.inclusive?"\uC774\uD558":"\uBBF8\uB9CC",a=n==="\uBBF8\uB9CC"?"\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4":"\uC5EC\uC57C \uD569\uB2C8\uB2E4",u=r(e.origin),l=u?.unit??"\uC694\uC18C";return u?`${e.origin??"\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${e.maximum.toString()}${l} ${n}${a}`:`${e.origin??"\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${e.maximum.toString()} ${n}${a}`}case"too_small":{let n=e.inclusive?"\uC774\uC0C1":"\uCD08\uACFC",a=n==="\uC774\uC0C1"?"\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4":"\uC5EC\uC57C \uD569\uB2C8\uB2E4",u=r(e.origin),l=u?.unit??"\uC694\uC18C";return u?`${e.origin??"\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${e.minimum.toString()}${l} ${n}${a}`:`${e.origin??"\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${e.minimum.toString()} ${n}${a}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${n.prefix}"(\uC73C)\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4`:n.format==="ends_with"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${n.suffix}"(\uC73C)\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4`:n.format==="includes"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${n.includes}"\uC744(\uB97C) \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4`:n.format==="regex"?`\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \uC815\uADDC\uC2DD ${n.pattern} \uD328\uD134\uACFC \uC77C\uCE58\uD574\uC57C \uD569\uB2C8\uB2E4`:`\uC798\uBABB\uB41C ${o[n.format]??e.format}`}case"not_multiple_of":return`\uC798\uBABB\uB41C \uC22B\uC790: ${e.divisor}\uC758 \uBC30\uC218\uC5EC\uC57C \uD569\uB2C8\uB2E4`;case"unrecognized_keys":return`\uC778\uC2DD\uD560 \uC218 \uC5C6\uB294 \uD0A4: ${s(e.keys,", ")}`;case"invalid_key":return`\uC798\uBABB\uB41C \uD0A4: ${e.origin}`;case"invalid_union":return"\uC798\uBABB\uB41C \uC785\uB825";case"invalid_element":return`\uC798\uBABB\uB41C \uAC12: ${e.origin}`;default:return"\uC798\uBABB\uB41C \uC785\uB825"}}};function mu(){return{localeError:Ws()}}var Bs=()=>{let t={string:{unit:"\u0437\u043D\u0430\u0446\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},file:{unit:"\u0431\u0430\u0458\u0442\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},array:{unit:"\u0441\u0442\u0430\u0432\u043A\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"},set:{unit:"\u0441\u0442\u0430\u0432\u043A\u0438",verb:"\u0434\u0430 \u0438\u043C\u0430\u0430\u0442"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0431\u0440\u043E\u0458";case"object":{if(Array.isArray(e))return"\u043D\u0438\u0437\u0430";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0432\u043D\u0435\u0441",email:"\u0430\u0434\u0440\u0435\u0441\u0430 \u043D\u0430 \u0435-\u043F\u043E\u0448\u0442\u0430",url:"URL",emoji:"\u0435\u043C\u043E\u045F\u0438",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0443\u043C \u0438 \u0432\u0440\u0435\u043C\u0435",date:"ISO \u0434\u0430\u0442\u0443\u043C",time:"ISO \u0432\u0440\u0435\u043C\u0435",duration:"ISO \u0432\u0440\u0435\u043C\u0435\u0442\u0440\u0430\u0435\u045A\u0435",ipv4:"IPv4 \u0430\u0434\u0440\u0435\u0441\u0430",ipv6:"IPv6 \u0430\u0434\u0440\u0435\u0441\u0430",cidrv4:"IPv4 \u043E\u043F\u0441\u0435\u0433",cidrv6:"IPv6 \u043E\u043F\u0441\u0435\u0433",base64:"base64-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",base64url:"base64url-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",json_string:"JSON \u043D\u0438\u0437\u0430",e164:"E.164 \u0431\u0440\u043E\u0458",jwt:"JWT",template_literal:"\u0432\u043D\u0435\u0441"};return e=>{switch(e.code){case"invalid_type":return`\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${e.expected}, \u043F\u0440\u0438\u043C\u0435\u043D\u043E ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Invalid input: expected ${g(e.values[0])}`:`\u0413\u0440\u0435\u0448\u0430\u043D\u0430 \u043E\u043F\u0446\u0438\u0458\u0430: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 \u0435\u0434\u043D\u0430 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${e.origin??"\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0438\u043C\u0430 ${n}${e.maximum.toString()} ${a.unit??"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438"}`:`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${e.origin??"\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0431\u0438\u0434\u0435 ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${e.origin} \u0434\u0430 \u0438\u043C\u0430 ${n}${e.minimum.toString()} ${a.unit}`:`\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${e.origin} \u0434\u0430 \u0431\u0438\u0434\u0435 ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0443\u0432\u0430 \u0441\u043E "${n.prefix}"`:n.format==="ends_with"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u0432\u0440\u0448\u0443\u0432\u0430 \u0441\u043E "${n.suffix}"`:n.format==="includes"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0432\u043A\u043B\u0443\u0447\u0443\u0432\u0430 "${n.includes}"`:n.format==="regex"?`\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u043E\u0434\u0433\u043E\u0430\u0440\u0430 \u043D\u0430 \u043F\u0430\u0442\u0435\u0440\u043D\u043E\u0442 ${n.pattern}`:`Invalid ${o[n.format]??e.format}`}case"not_multiple_of":return`\u0413\u0440\u0435\u0448\u0435\u043D \u0431\u0440\u043E\u0458: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0434\u0435\u043B\u0438\u0432 \u0441\u043E ${e.divisor}`;case"unrecognized_keys":return`${e.keys.length>1?"\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D\u0438 \u043A\u043B\u0443\u0447\u0435\u0432\u0438":"\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D \u043A\u043B\u0443\u0447"}: ${s(e.keys,", ")}`;case"invalid_key":return`\u0413\u0440\u0435\u0448\u0435\u043D \u043A\u043B\u0443\u0447 \u0432\u043E ${e.origin}`;case"invalid_union":return"\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441";case"invalid_element":return`\u0413\u0440\u0435\u0448\u043D\u0430 \u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442 \u0432\u043E ${e.origin}`;default:return"\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441"}}};function du(){return{localeError:Bs()}}var Gs=()=>{let t={string:{unit:"aksara",verb:"mempunyai"},file:{unit:"bait",verb:"mempunyai"},array:{unit:"elemen",verb:"mempunyai"},set:{unit:"elemen",verb:"mempunyai"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"nombor";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"input",email:"alamat e-mel",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"tarikh masa ISO",date:"tarikh ISO",time:"masa ISO",duration:"tempoh ISO",ipv4:"alamat IPv4",ipv6:"alamat IPv6",cidrv4:"julat IPv4",cidrv6:"julat IPv6",base64:"string dikodkan base64",base64url:"string dikodkan base64url",json_string:"string JSON",e164:"nombor E.164",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`Input tidak sah: dijangka ${e.expected}, diterima ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Input tidak sah: dijangka ${g(e.values[0])}`:`Pilihan tidak sah: dijangka salah satu daripada ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Terlalu besar: dijangka ${e.origin??"nilai"} ${a.verb} ${n}${e.maximum.toString()} ${a.unit??"elemen"}`:`Terlalu besar: dijangka ${e.origin??"nilai"} adalah ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Terlalu kecil: dijangka ${e.origin} ${a.verb} ${n}${e.minimum.toString()} ${a.unit}`:`Terlalu kecil: dijangka ${e.origin} adalah ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`String tidak sah: mesti bermula dengan "${n.prefix}"`:n.format==="ends_with"?`String tidak sah: mesti berakhir dengan "${n.suffix}"`:n.format==="includes"?`String tidak sah: mesti mengandungi "${n.includes}"`:n.format==="regex"?`String tidak sah: mesti sepadan dengan corak ${n.pattern}`:`${o[n.format]??e.format} tidak sah`}case"not_multiple_of":return`Nombor tidak sah: perlu gandaan ${e.divisor}`;case"unrecognized_keys":return`Kunci tidak dikenali: ${s(e.keys,", ")}`;case"invalid_key":return`Kunci tidak sah dalam ${e.origin}`;case"invalid_union":return"Input tidak sah";case"invalid_element":return`Nilai tidak sah dalam ${e.origin}`;default:return"Input tidak sah"}}};function pu(){return{localeError:Gs()}}var Ks=()=>{let t={string:{unit:"tekens"},file:{unit:"bytes"},array:{unit:"elementen"},set:{unit:"elementen"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"getal";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"invoer",email:"emailadres",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datum en tijd",date:"ISO datum",time:"ISO tijd",duration:"ISO duur",ipv4:"IPv4-adres",ipv6:"IPv6-adres",cidrv4:"IPv4-bereik",cidrv6:"IPv6-bereik",base64:"base64-gecodeerde tekst",base64url:"base64 URL-gecodeerde tekst",json_string:"JSON string",e164:"E.164-nummer",jwt:"JWT",template_literal:"invoer"};return e=>{switch(e.code){case"invalid_type":return`Ongeldige invoer: verwacht ${e.expected}, ontving ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Ongeldige invoer: verwacht ${g(e.values[0])}`:`Ongeldige optie: verwacht \xE9\xE9n van ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Te lang: verwacht dat ${e.origin??"waarde"} ${n}${e.maximum.toString()} ${a.unit??"elementen"} bevat`:`Te lang: verwacht dat ${e.origin??"waarde"} ${n}${e.maximum.toString()} is`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Te kort: verwacht dat ${e.origin} ${n}${e.minimum.toString()} ${a.unit} bevat`:`Te kort: verwacht dat ${e.origin} ${n}${e.minimum.toString()} is`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Ongeldige tekst: moet met "${n.prefix}" beginnen`:n.format==="ends_with"?`Ongeldige tekst: moet op "${n.suffix}" eindigen`:n.format==="includes"?`Ongeldige tekst: moet "${n.includes}" bevatten`:n.format==="regex"?`Ongeldige tekst: moet overeenkomen met patroon ${n.pattern}`:`Ongeldig: ${o[n.format]??e.format}`}case"not_multiple_of":return`Ongeldig getal: moet een veelvoud van ${e.divisor} zijn`;case"unrecognized_keys":return`Onbekende key${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Ongeldige key in ${e.origin}`;case"invalid_union":return"Ongeldige invoer";case"invalid_element":return`Ongeldige waarde in ${e.origin}`;default:return"Ongeldige invoer"}}};function fu(){return{localeError:Ks()}}var Xs=()=>{let t={string:{unit:"tegn",verb:"\xE5 ha"},file:{unit:"bytes",verb:"\xE5 ha"},array:{unit:"elementer",verb:"\xE5 inneholde"},set:{unit:"elementer",verb:"\xE5 inneholde"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"tall";case"object":{if(Array.isArray(e))return"liste";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"input",email:"e-postadresse",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO dato- og klokkeslett",date:"ISO-dato",time:"ISO-klokkeslett",duration:"ISO-varighet",ipv4:"IPv4-omr\xE5de",ipv6:"IPv6-omr\xE5de",cidrv4:"IPv4-spekter",cidrv6:"IPv6-spekter",base64:"base64-enkodet streng",base64url:"base64url-enkodet streng",json_string:"JSON-streng",e164:"E.164-nummer",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`Ugyldig input: forventet ${e.expected}, fikk ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Ugyldig verdi: forventet ${g(e.values[0])}`:`Ugyldig valg: forventet en av ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`For stor(t): forventet ${e.origin??"value"} til \xE5 ha ${n}${e.maximum.toString()} ${a.unit??"elementer"}`:`For stor(t): forventet ${e.origin??"value"} til \xE5 ha ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`For lite(n): forventet ${e.origin} til \xE5 ha ${n}${e.minimum.toString()} ${a.unit}`:`For lite(n): forventet ${e.origin} til \xE5 ha ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Ugyldig streng: m\xE5 starte med "${n.prefix}"`:n.format==="ends_with"?`Ugyldig streng: m\xE5 ende med "${n.suffix}"`:n.format==="includes"?`Ugyldig streng: m\xE5 inneholde "${n.includes}"`:n.format==="regex"?`Ugyldig streng: m\xE5 matche m\xF8nsteret ${n.pattern}`:`Ugyldig ${o[n.format]??e.format}`}case"not_multiple_of":return`Ugyldig tall: m\xE5 v\xE6re et multiplum av ${e.divisor}`;case"unrecognized_keys":return`${e.keys.length>1?"Ukjente n\xF8kler":"Ukjent n\xF8kkel"}: ${s(e.keys,", ")}`;case"invalid_key":return`Ugyldig n\xF8kkel i ${e.origin}`;case"invalid_union":return"Ugyldig input";case"invalid_element":return`Ugyldig verdi i ${e.origin}`;default:return"Ugyldig input"}}};function gu(){return{localeError:Xs()}}var qs=()=>{let t={string:{unit:"harf",verb:"olmal\u0131d\u0131r"},file:{unit:"bayt",verb:"olmal\u0131d\u0131r"},array:{unit:"unsur",verb:"olmal\u0131d\u0131r"},set:{unit:"unsur",verb:"olmal\u0131d\u0131r"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"numara";case"object":{if(Array.isArray(e))return"saf";if(e===null)return"gayb";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"giren",email:"epostag\xE2h",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO heng\xE2m\u0131",date:"ISO tarihi",time:"ISO zaman\u0131",duration:"ISO m\xFCddeti",ipv4:"IPv4 ni\u015F\xE2n\u0131",ipv6:"IPv6 ni\u015F\xE2n\u0131",cidrv4:"IPv4 menzili",cidrv6:"IPv6 menzili",base64:"base64-\u015Fifreli metin",base64url:"base64url-\u015Fifreli metin",json_string:"JSON metin",e164:"E.164 say\u0131s\u0131",jwt:"JWT",template_literal:"giren"};return e=>{switch(e.code){case"invalid_type":return`F\xE2sit giren: umulan ${e.expected}, al\u0131nan ${i(e.input)}`;case"invalid_value":return e.values.length===1?`F\xE2sit giren: umulan ${g(e.values[0])}`:`F\xE2sit tercih: m\xFBteberler ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Fazla b\xFCy\xFCk: ${e.origin??"value"}, ${n}${e.maximum.toString()} ${a.unit??"elements"} sahip olmal\u0131yd\u0131.`:`Fazla b\xFCy\xFCk: ${e.origin??"value"}, ${n}${e.maximum.toString()} olmal\u0131yd\u0131.`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Fazla k\xFC\xE7\xFCk: ${e.origin}, ${n}${e.minimum.toString()} ${a.unit} sahip olmal\u0131yd\u0131.`:`Fazla k\xFC\xE7\xFCk: ${e.origin}, ${n}${e.minimum.toString()} olmal\u0131yd\u0131.`}case"invalid_format":{let n=e;return n.format==="starts_with"?`F\xE2sit metin: "${n.prefix}" ile ba\u015Flamal\u0131.`:n.format==="ends_with"?`F\xE2sit metin: "${n.suffix}" ile bitmeli.`:n.format==="includes"?`F\xE2sit metin: "${n.includes}" ihtiv\xE2 etmeli.`:n.format==="regex"?`F\xE2sit metin: ${n.pattern} nak\u015F\u0131na uymal\u0131.`:`F\xE2sit ${o[n.format]??e.format}`}case"not_multiple_of":return`F\xE2sit say\u0131: ${e.divisor} kat\u0131 olmal\u0131yd\u0131.`;case"unrecognized_keys":return`Tan\u0131nmayan anahtar ${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`${e.origin} i\xE7in tan\u0131nmayan anahtar var.`;case"invalid_union":return"Giren tan\u0131namad\u0131.";case"invalid_element":return`${e.origin} i\xE7in tan\u0131nmayan k\u0131ymet var.`;default:return"K\u0131ymet tan\u0131namad\u0131."}}};function vu(){return{localeError:qs()}}var Hs=()=>{let t={string:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"},file:{unit:"\u0628\u0627\u06CC\u067C\u0633",verb:"\u0648\u0644\u0631\u064A"},array:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"},set:{unit:"\u062A\u0648\u06A9\u064A",verb:"\u0648\u0644\u0631\u064A"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0639\u062F\u062F";case"object":{if(Array.isArray(e))return"\u0627\u0631\u06D0";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0648\u0631\u0648\u062F\u064A",email:"\u0628\u0631\u06CC\u069A\u0646\u0627\u0644\u06CC\u06A9",url:"\u06CC\u0648 \u0622\u0631 \u0627\u0644",emoji:"\u0627\u06CC\u0645\u0648\u062C\u064A",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0646\u06CC\u067C\u0647 \u0627\u0648 \u0648\u062E\u062A",date:"\u0646\u06D0\u067C\u0647",time:"\u0648\u062E\u062A",duration:"\u0645\u0648\u062F\u0647",ipv4:"\u062F IPv4 \u067E\u062A\u0647",ipv6:"\u062F IPv6 \u067E\u062A\u0647",cidrv4:"\u062F IPv4 \u0633\u0627\u062D\u0647",cidrv6:"\u062F IPv6 \u0633\u0627\u062D\u0647",base64:"base64-encoded \u0645\u062A\u0646",base64url:"base64url-encoded \u0645\u062A\u0646",json_string:"JSON \u0645\u062A\u0646",e164:"\u062F E.164 \u0634\u0645\u06D0\u0631\u0647",jwt:"JWT",template_literal:"\u0648\u0631\u0648\u062F\u064A"};return e=>{switch(e.code){case"invalid_type":return`\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${e.expected} \u0648\u0627\u06CC, \u0645\u06AB\u0631 ${i(e.input)} \u062A\u0631\u0644\u0627\u0633\u0647 \u0634\u0648`;case"invalid_value":return e.values.length===1?`\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${g(e.values[0])} \u0648\u0627\u06CC`:`\u0646\u0627\u0633\u0645 \u0627\u0646\u062A\u062E\u0627\u0628: \u0628\u0627\u06CC\u062F \u06CC\u0648 \u0644\u0647 ${s(e.values,"|")} \u0685\u062E\u0647 \u0648\u0627\u06CC`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${e.origin??"\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${n}${e.maximum.toString()} ${a.unit??"\u0639\u0646\u0635\u0631\u0648\u0646\u0647"} \u0648\u0644\u0631\u064A`:`\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${e.origin??"\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${n}${e.maximum.toString()} \u0648\u064A`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${e.origin} \u0628\u0627\u06CC\u062F ${n}${e.minimum.toString()} ${a.unit} \u0648\u0644\u0631\u064A`:`\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${e.origin} \u0628\u0627\u06CC\u062F ${n}${e.minimum.toString()} \u0648\u064A`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${n.prefix}" \u0633\u0631\u0647 \u067E\u06CC\u0644 \u0634\u064A`:n.format==="ends_with"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${n.suffix}" \u0633\u0631\u0647 \u067E\u0627\u06CC \u062A\u0647 \u0648\u0631\u0633\u064A\u0696\u064A`:n.format==="includes"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F "${n.includes}" \u0648\u0644\u0631\u064A`:n.format==="regex"?`\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F ${n.pattern} \u0633\u0631\u0647 \u0645\u0637\u0627\u0628\u0642\u062A \u0648\u0644\u0631\u064A`:`${o[n.format]??e.format} \u0646\u0627\u0633\u0645 \u062F\u06CC`}case"not_multiple_of":return`\u0646\u0627\u0633\u0645 \u0639\u062F\u062F: \u0628\u0627\u06CC\u062F \u062F ${e.divisor} \u0645\u0636\u0631\u0628 \u0648\u064A`;case"unrecognized_keys":return`\u0646\u0627\u0633\u0645 ${e.keys.length>1?"\u06A9\u0644\u06CC\u0689\u0648\u0646\u0647":"\u06A9\u0644\u06CC\u0689"}: ${s(e.keys,", ")}`;case"invalid_key":return`\u0646\u0627\u0633\u0645 \u06A9\u0644\u06CC\u0689 \u067E\u0647 ${e.origin} \u06A9\u06D0`;case"invalid_union":return"\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A";case"invalid_element":return`\u0646\u0627\u0633\u0645 \u0639\u0646\u0635\u0631 \u067E\u0647 ${e.origin} \u06A9\u06D0`;default:return"\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A"}}};function hu(){return{localeError:Hs()}}var Ys=()=>{let t={string:{unit:"znak\xF3w",verb:"mie\u0107"},file:{unit:"bajt\xF3w",verb:"mie\u0107"},array:{unit:"element\xF3w",verb:"mie\u0107"},set:{unit:"element\xF3w",verb:"mie\u0107"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"liczba";case"object":{if(Array.isArray(e))return"tablica";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"wyra\u017Cenie",email:"adres email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data i godzina w formacie ISO",date:"data w formacie ISO",time:"godzina w formacie ISO",duration:"czas trwania ISO",ipv4:"adres IPv4",ipv6:"adres IPv6",cidrv4:"zakres IPv4",cidrv6:"zakres IPv6",base64:"ci\u0105g znak\xF3w zakodowany w formacie base64",base64url:"ci\u0105g znak\xF3w zakodowany w formacie base64url",json_string:"ci\u0105g znak\xF3w w formacie JSON",e164:"liczba E.164",jwt:"JWT",template_literal:"wej\u015Bcie"};return e=>{switch(e.code){case"invalid_type":return`Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${e.expected}, otrzymano ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${g(e.values[0])}`:`Nieprawid\u0142owa opcja: oczekiwano jednej z warto\u015Bci ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Za du\u017Ca warto\u015B\u0107: oczekiwano, \u017Ce ${e.origin??"warto\u015B\u0107"} b\u0119dzie mie\u0107 ${n}${e.maximum.toString()} ${a.unit??"element\xF3w"}`:`Zbyt du\u017C(y/a/e): oczekiwano, \u017Ce ${e.origin??"warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Za ma\u0142a warto\u015B\u0107: oczekiwano, \u017Ce ${e.origin??"warto\u015B\u0107"} b\u0119dzie mie\u0107 ${n}${e.minimum.toString()} ${a.unit??"element\xF3w"}`:`Zbyt ma\u0142(y/a/e): oczekiwano, \u017Ce ${e.origin??"warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zaczyna\u0107 si\u0119 od "${n.prefix}"`:n.format==="ends_with"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi ko\u0144czy\u0107 si\u0119 na "${n.suffix}"`:n.format==="includes"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zawiera\u0107 "${n.includes}"`:n.format==="regex"?`Nieprawid\u0142owy ci\u0105g znak\xF3w: musi odpowiada\u0107 wzorcowi ${n.pattern}`:`Nieprawid\u0142ow(y/a/e) ${o[n.format]??e.format}`}case"not_multiple_of":return`Nieprawid\u0142owa liczba: musi by\u0107 wielokrotno\u015Bci\u0105 ${e.divisor}`;case"unrecognized_keys":return`Nierozpoznane klucze${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Nieprawid\u0142owy klucz w ${e.origin}`;case"invalid_union":return"Nieprawid\u0142owe dane wej\u015Bciowe";case"invalid_element":return`Nieprawid\u0142owa warto\u015B\u0107 w ${e.origin}`;default:return"Nieprawid\u0142owe dane wej\u015Bciowe"}}};function $u(){return{localeError:Ys()}}var Qs=()=>{let t={string:{unit:"caracteres",verb:"ter"},file:{unit:"bytes",verb:"ter"},array:{unit:"itens",verb:"ter"},set:{unit:"itens",verb:"ter"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"n\xFAmero";case"object":{if(Array.isArray(e))return"array";if(e===null)return"nulo";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"padr\xE3o",email:"endere\xE7o de e-mail",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"data e hora ISO",date:"data ISO",time:"hora ISO",duration:"dura\xE7\xE3o ISO",ipv4:"endere\xE7o IPv4",ipv6:"endere\xE7o IPv6",cidrv4:"faixa de IPv4",cidrv6:"faixa de IPv6",base64:"texto codificado em base64",base64url:"URL codificada em base64",json_string:"texto JSON",e164:"n\xFAmero E.164",jwt:"JWT",template_literal:"entrada"};return e=>{switch(e.code){case"invalid_type":return`Tipo inv\xE1lido: esperado ${e.expected}, recebido ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Entrada inv\xE1lida: esperado ${g(e.values[0])}`:`Op\xE7\xE3o inv\xE1lida: esperada uma das ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Muito grande: esperado que ${e.origin??"valor"} tivesse ${n}${e.maximum.toString()} ${a.unit??"elementos"}`:`Muito grande: esperado que ${e.origin??"valor"} fosse ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Muito pequeno: esperado que ${e.origin} tivesse ${n}${e.minimum.toString()} ${a.unit}`:`Muito pequeno: esperado que ${e.origin} fosse ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Texto inv\xE1lido: deve come\xE7ar com "${n.prefix}"`:n.format==="ends_with"?`Texto inv\xE1lido: deve terminar com "${n.suffix}"`:n.format==="includes"?`Texto inv\xE1lido: deve incluir "${n.includes}"`:n.format==="regex"?`Texto inv\xE1lido: deve corresponder ao padr\xE3o ${n.pattern}`:`${o[n.format]??e.format} inv\xE1lido`}case"not_multiple_of":return`N\xFAmero inv\xE1lido: deve ser m\xFAltiplo de ${e.divisor}`;case"unrecognized_keys":return`Chave${e.keys.length>1?"s":""} desconhecida${e.keys.length>1?"s":""}: ${s(e.keys,", ")}`;case"invalid_key":return`Chave inv\xE1lida em ${e.origin}`;case"invalid_union":return"Entrada inv\xE1lida";case"invalid_element":return`Valor inv\xE1lido em ${e.origin}`;default:return"Campo inv\xE1lido"}}};function _u(){return{localeError:Qs()}}function yu(t,r,i,o){let e=Math.abs(t),n=e%10,a=e%100;return a>=11&&a<=19?o:n===1?r:n>=2&&n<=4?i:o}var el=()=>{let t={string:{unit:{one:"\u0441\u0438\u043C\u0432\u043E\u043B",few:"\u0441\u0438\u043C\u0432\u043E\u043B\u0430",many:"\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"},file:{unit:{one:"\u0431\u0430\u0439\u0442",few:"\u0431\u0430\u0439\u0442\u0430",many:"\u0431\u0430\u0439\u0442"},verb:"\u0438\u043C\u0435\u0442\u044C"},array:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"},set:{unit:{one:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442",few:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",many:"\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"},verb:"\u0438\u043C\u0435\u0442\u044C"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0447\u0438\u0441\u043B\u043E";case"object":{if(Array.isArray(e))return"\u043C\u0430\u0441\u0441\u0438\u0432";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0432\u0432\u043E\u0434",email:"email \u0430\u0434\u0440\u0435\u0441",url:"URL",emoji:"\u044D\u043C\u043E\u0434\u0437\u0438",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043C\u044F",date:"ISO \u0434\u0430\u0442\u0430",time:"ISO \u0432\u0440\u0435\u043C\u044F",duration:"ISO \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C",ipv4:"IPv4 \u0430\u0434\u0440\u0435\u0441",ipv6:"IPv6 \u0430\u0434\u0440\u0435\u0441",cidrv4:"IPv4 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",cidrv6:"IPv6 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",base64:"\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64",base64url:"\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64url",json_string:"JSON \u0441\u0442\u0440\u043E\u043A\u0430",e164:"\u043D\u043E\u043C\u0435\u0440 E.164",jwt:"JWT",template_literal:"\u0432\u0432\u043E\u0434"};return e=>{switch(e.code){case"invalid_type":return`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${e.expected}, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${g(e.values[0])}`:`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0434\u043D\u043E \u0438\u0437 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);if(a){let u=Number(e.maximum),l=yu(u,a.unit.one,a.unit.few,a.unit.many);return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${n}${e.maximum.toString()} ${l}`}return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);if(a){let u=Number(e.minimum),l=yu(u,a.unit.one,a.unit.few,a.unit.many);return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${e.origin} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${n}${e.minimum.toString()} ${l}`}return`\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${e.origin} \u0431\u0443\u0434\u0435\u0442 ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u0442\u044C\u0441\u044F \u0441 "${n.prefix}"`:n.format==="ends_with"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 "${n.suffix}"`:n.format==="includes"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C "${n.includes}"`:n.format==="regex"?`\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${n.pattern}`:`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${e.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043D\u043D${e.keys.length>1?"\u044B\u0435":"\u044B\u0439"} \u043A\u043B\u044E\u0447${e.keys.length>1?"\u0438":""}: ${s(e.keys,", ")}`;case"invalid_key":return`\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043A\u043B\u044E\u0447 \u0432 ${e.origin}`;case"invalid_union":return"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435";case"invalid_element":return`\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 ${e.origin}`;default:return"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435"}}};function bu(){return{localeError:el()}}var tl=()=>{let t={string:{unit:"znakov",verb:"imeti"},file:{unit:"bajtov",verb:"imeti"},array:{unit:"elementov",verb:"imeti"},set:{unit:"elementov",verb:"imeti"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0161tevilo";case"object":{if(Array.isArray(e))return"tabela";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"vnos",email:"e-po\u0161tni naslov",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO datum in \u010Das",date:"ISO datum",time:"ISO \u010Das",duration:"ISO trajanje",ipv4:"IPv4 naslov",ipv6:"IPv6 naslov",cidrv4:"obseg IPv4",cidrv6:"obseg IPv6",base64:"base64 kodiran niz",base64url:"base64url kodiran niz",json_string:"JSON niz",e164:"E.164 \u0161tevilka",jwt:"JWT",template_literal:"vnos"};return e=>{switch(e.code){case"invalid_type":return`Neveljaven vnos: pri\u010Dakovano ${e.expected}, prejeto ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Neveljaven vnos: pri\u010Dakovano ${g(e.values[0])}`:`Neveljavna mo\u017Enost: pri\u010Dakovano eno izmed ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Preveliko: pri\u010Dakovano, da bo ${e.origin??"vrednost"} imelo ${n}${e.maximum.toString()} ${a.unit??"elementov"}`:`Preveliko: pri\u010Dakovano, da bo ${e.origin??"vrednost"} ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Premajhno: pri\u010Dakovano, da bo ${e.origin} imelo ${n}${e.minimum.toString()} ${a.unit}`:`Premajhno: pri\u010Dakovano, da bo ${e.origin} ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Neveljaven niz: mora se za\u010Deti z "${n.prefix}"`:n.format==="ends_with"?`Neveljaven niz: mora se kon\u010Dati z "${n.suffix}"`:n.format==="includes"?`Neveljaven niz: mora vsebovati "${n.includes}"`:n.format==="regex"?`Neveljaven niz: mora ustrezati vzorcu ${n.pattern}`:`Neveljaven ${o[n.format]??e.format}`}case"not_multiple_of":return`Neveljavno \u0161tevilo: mora biti ve\u010Dkratnik ${e.divisor}`;case"unrecognized_keys":return`Neprepoznan${e.keys.length>1?"i klju\u010Di":" klju\u010D"}: ${s(e.keys,", ")}`;case"invalid_key":return`Neveljaven klju\u010D v ${e.origin}`;case"invalid_union":return"Neveljaven vnos";case"invalid_element":return`Neveljavna vrednost v ${e.origin}`;default:return"Neveljaven vnos"}}};function xu(){return{localeError:tl()}}var rl=()=>{let t={string:{unit:"tecken",verb:"att ha"},file:{unit:"bytes",verb:"att ha"},array:{unit:"objekt",verb:"att inneh\xE5lla"},set:{unit:"objekt",verb:"att inneh\xE5lla"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"antal";case"object":{if(Array.isArray(e))return"lista";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"regulj\xE4rt uttryck",email:"e-postadress",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO-datum och tid",date:"ISO-datum",time:"ISO-tid",duration:"ISO-varaktighet",ipv4:"IPv4-intervall",ipv6:"IPv6-intervall",cidrv4:"IPv4-spektrum",cidrv6:"IPv6-spektrum",base64:"base64-kodad str\xE4ng",base64url:"base64url-kodad str\xE4ng",json_string:"JSON-str\xE4ng",e164:"E.164-nummer",jwt:"JWT",template_literal:"mall-literal"};return e=>{switch(e.code){case"invalid_type":return`Ogiltig inmatning: f\xF6rv\xE4ntat ${e.expected}, fick ${i(e.input)}`;case"invalid_value":return e.values.length===1?`Ogiltig inmatning: f\xF6rv\xE4ntat ${g(e.values[0])}`:`Ogiltigt val: f\xF6rv\xE4ntade en av ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`F\xF6r stor(t): f\xF6rv\xE4ntade ${e.origin??"v\xE4rdet"} att ha ${n}${e.maximum.toString()} ${a.unit??"element"}`:`F\xF6r stor(t): f\xF6rv\xE4ntat ${e.origin??"v\xE4rdet"} att ha ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`F\xF6r lite(t): f\xF6rv\xE4ntade ${e.origin??"v\xE4rdet"} att ha ${n}${e.minimum.toString()} ${a.unit}`:`F\xF6r lite(t): f\xF6rv\xE4ntade ${e.origin??"v\xE4rdet"} att ha ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Ogiltig str\xE4ng: m\xE5ste b\xF6rja med "${n.prefix}"`:n.format==="ends_with"?`Ogiltig str\xE4ng: m\xE5ste sluta med "${n.suffix}"`:n.format==="includes"?`Ogiltig str\xE4ng: m\xE5ste inneh\xE5lla "${n.includes}"`:n.format==="regex"?`Ogiltig str\xE4ng: m\xE5ste matcha m\xF6nstret "${n.pattern}"`:`Ogiltig(t) ${o[n.format]??e.format}`}case"not_multiple_of":return`Ogiltigt tal: m\xE5ste vara en multipel av ${e.divisor}`;case"unrecognized_keys":return`${e.keys.length>1?"Ok\xE4nda nycklar":"Ok\xE4nd nyckel"}: ${s(e.keys,", ")}`;case"invalid_key":return`Ogiltig nyckel i ${e.origin??"v\xE4rdet"}`;case"invalid_union":return"Ogiltig input";case"invalid_element":return`Ogiltigt v\xE4rde i ${e.origin??"v\xE4rdet"}`;default:return"Ogiltig input"}}};function ku(){return{localeError:rl()}}var nl=()=>{let t={string:{unit:"\u0B8E\u0BB4\u0BC1\u0BA4\u0BCD\u0BA4\u0BC1\u0B95\u0BCD\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},file:{unit:"\u0BAA\u0BC8\u0B9F\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},array:{unit:"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"},set:{unit:"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD",verb:"\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"\u0B8E\u0BA3\u0BCD \u0B85\u0BB2\u0BCD\u0BB2\u0BBE\u0BA4\u0BA4\u0BC1":"\u0B8E\u0BA3\u0BCD";case"object":{if(Array.isArray(e))return"\u0B85\u0BA3\u0BBF";if(e===null)return"\u0BB5\u0BC6\u0BB1\u0BC1\u0BAE\u0BC8";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1",email:"\u0BAE\u0BBF\u0BA9\u0BCD\u0BA9\u0B9E\u0BCD\u0B9A\u0BB2\u0BCD \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u0BA4\u0BC7\u0BA4\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",date:"ISO \u0BA4\u0BC7\u0BA4\u0BBF",time:"ISO \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",duration:"ISO \u0B95\u0BBE\u0BB2 \u0B85\u0BB3\u0BB5\u0BC1",ipv4:"IPv4 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",ipv6:"IPv6 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",cidrv4:"IPv4 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",cidrv6:"IPv6 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",base64:"base64-encoded \u0B9A\u0BB0\u0BAE\u0BCD",base64url:"base64url-encoded \u0B9A\u0BB0\u0BAE\u0BCD",json_string:"JSON \u0B9A\u0BB0\u0BAE\u0BCD",e164:"E.164 \u0B8E\u0BA3\u0BCD",jwt:"JWT",template_literal:"input"};return e=>{switch(e.code){case"invalid_type":return`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${e.expected}, \u0BAA\u0BC6\u0BB1\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${g(e.values[0])}`:`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0BB0\u0BC1\u0BAA\u0BCD\u0BAA\u0BAE\u0BCD: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${s(e.values,"|")} \u0B87\u0BB2\u0BCD \u0B92\u0BA9\u0BCD\u0BB1\u0BC1`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${e.origin??"\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${n}${e.maximum.toString()} ${a.unit??"\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD"} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${e.origin??"\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${n}${e.maximum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${e.origin} ${n}${e.minimum.toString()} ${a.unit} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${e.origin} ${n}${e.minimum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${n.prefix}" \u0B87\u0BB2\u0BCD \u0BA4\u0BCA\u0B9F\u0B99\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:n.format==="ends_with"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${n.suffix}" \u0B87\u0BB2\u0BCD \u0BAE\u0BC1\u0B9F\u0BBF\u0BB5\u0B9F\u0BC8\u0BAF \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:n.format==="includes"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${n.includes}" \u0B90 \u0B89\u0BB3\u0BCD\u0BB3\u0B9F\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:n.format==="regex"?`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: ${n.pattern} \u0BAE\u0BC1\u0BB1\u0BC8\u0BAA\u0BBE\u0B9F\u0BCD\u0B9F\u0BC1\u0B9F\u0BA9\u0BCD \u0BAA\u0BCA\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`:`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B8E\u0BA3\u0BCD: ${e.divisor} \u0B87\u0BA9\u0BCD \u0BAA\u0BB2\u0BAE\u0BBE\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;case"unrecognized_keys":return`\u0B85\u0B9F\u0BC8\u0BAF\u0BBE\u0BB3\u0BAE\u0BCD \u0BA4\u0BC6\u0BB0\u0BBF\u0BAF\u0BBE\u0BA4 \u0BB5\u0BBF\u0B9A\u0BC8${e.keys.length>1?"\u0B95\u0BB3\u0BCD":""}: ${s(e.keys,", ")}`;case"invalid_key":return`${e.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0B9A\u0BC8`;case"invalid_union":return"\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1";case"invalid_element":return`${e.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1`;default:return"\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1"}}};function zu(){return{localeError:nl()}}var il=()=>{let t={string:{unit:"\u0E15\u0E31\u0E27\u0E2D\u0E31\u0E01\u0E29\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},file:{unit:"\u0E44\u0E1A\u0E15\u0E4C",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},array:{unit:"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"},set:{unit:"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23",verb:"\u0E04\u0E27\u0E23\u0E21\u0E35"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"\u0E44\u0E21\u0E48\u0E43\u0E0A\u0E48\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02 (NaN)":"\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02";case"object":{if(Array.isArray(e))return"\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E23\u0E22\u0E4C (Array)";if(e===null)return"\u0E44\u0E21\u0E48\u0E21\u0E35\u0E04\u0E48\u0E32 (null)";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19",email:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E2D\u0E35\u0E40\u0E21\u0E25",url:"URL",emoji:"\u0E2D\u0E34\u0E42\u0E21\u0E08\u0E34",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",date:"\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E41\u0E1A\u0E1A ISO",time:"\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",duration:"\u0E0A\u0E48\u0E27\u0E07\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",ipv4:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv4",ipv6:"\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv6",cidrv4:"\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv4",cidrv6:"\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv6",base64:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64",base64url:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64 \u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A URL",json_string:"\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A JSON",e164:"\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E42\u0E17\u0E23\u0E28\u0E31\u0E1E\u0E17\u0E4C\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28 (E.164)",jwt:"\u0E42\u0E17\u0E40\u0E04\u0E19 JWT",template_literal:"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19"};return e=>{switch(e.code){case"invalid_type":return`\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${e.expected} \u0E41\u0E15\u0E48\u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u0E04\u0E48\u0E32\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${g(e.values[0])}`:`\u0E15\u0E31\u0E27\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E43\u0E19 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"\u0E44\u0E21\u0E48\u0E40\u0E01\u0E34\u0E19":"\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32",a=r(e.origin);return a?`\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${e.origin??"\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${n} ${e.maximum.toString()} ${a.unit??"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23"}`:`\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${e.origin??"\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${n} ${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?"\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E19\u0E49\u0E2D\u0E22":"\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32",a=r(e.origin);return a?`\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${e.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${n} ${e.minimum.toString()} ${a.unit}`:`\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${e.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${n} ${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E02\u0E36\u0E49\u0E19\u0E15\u0E49\u0E19\u0E14\u0E49\u0E27\u0E22 "${n.prefix}"`:n.format==="ends_with"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E25\u0E07\u0E17\u0E49\u0E32\u0E22\u0E14\u0E49\u0E27\u0E22 "${n.suffix}"`:n.format==="includes"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E21\u0E35 "${n.includes}" \u0E2D\u0E22\u0E39\u0E48\u0E43\u0E19\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21`:n.format==="regex"?`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14 ${n.pattern}`:`\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: ${o[n.format]??e.format}`}case"not_multiple_of":return`\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E33\u0E19\u0E27\u0E19\u0E17\u0E35\u0E48\u0E2B\u0E32\u0E23\u0E14\u0E49\u0E27\u0E22 ${e.divisor} \u0E44\u0E14\u0E49\u0E25\u0E07\u0E15\u0E31\u0E27`;case"unrecognized_keys":return`\u0E1E\u0E1A\u0E04\u0E35\u0E22\u0E4C\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E23\u0E39\u0E49\u0E08\u0E31\u0E01: ${s(e.keys,", ")}`;case"invalid_key":return`\u0E04\u0E35\u0E22\u0E4C\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${e.origin}`;case"invalid_union":return"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E44\u0E21\u0E48\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E22\u0E39\u0E40\u0E19\u0E35\u0E22\u0E19\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14\u0E44\u0E27\u0E49";case"invalid_element":return`\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${e.origin}`;default:return"\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07"}}};function Iu(){return{localeError:il()}}var ol=t=>{let r=typeof t;switch(r){case"number":return Number.isNaN(t)?"NaN":"number";case"object":{if(Array.isArray(t))return"array";if(t===null)return"null";if(Object.getPrototypeOf(t)!==Object.prototype&&t.constructor)return t.constructor.name}}return r},al=()=>{let t={string:{unit:"karakter",verb:"olmal\u0131"},file:{unit:"bayt",verb:"olmal\u0131"},array:{unit:"\xF6\u011Fe",verb:"olmal\u0131"},set:{unit:"\xF6\u011Fe",verb:"olmal\u0131"}};function r(o){return t[o]??null}let i={regex:"girdi",email:"e-posta adresi",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO tarih ve saat",date:"ISO tarih",time:"ISO saat",duration:"ISO s\xFCre",ipv4:"IPv4 adresi",ipv6:"IPv6 adresi",cidrv4:"IPv4 aral\u0131\u011F\u0131",cidrv6:"IPv6 aral\u0131\u011F\u0131",base64:"base64 ile \u015Fifrelenmi\u015F metin",base64url:"base64url ile \u015Fifrelenmi\u015F metin",json_string:"JSON dizesi",e164:"E.164 say\u0131s\u0131",jwt:"JWT",template_literal:"\u015Eablon dizesi"};return o=>{switch(o.code){case"invalid_type":return`Ge\xE7ersiz de\u011Fer: beklenen ${o.expected}, al\u0131nan ${ol(o.input)}`;case"invalid_value":return o.values.length===1?`Ge\xE7ersiz de\u011Fer: beklenen ${g(o.values[0])}`:`Ge\xE7ersiz se\xE7enek: a\u015Fa\u011F\u0131dakilerden biri olmal\u0131: ${s(o.values,"|")}`;case"too_big":{let e=o.inclusive?"<=":"<",n=r(o.origin);return n?`\xC7ok b\xFCy\xFCk: beklenen ${o.origin??"de\u011Fer"} ${e}${o.maximum.toString()} ${n.unit??"\xF6\u011Fe"}`:`\xC7ok b\xFCy\xFCk: beklenen ${o.origin??"de\u011Fer"} ${e}${o.maximum.toString()}`}case"too_small":{let e=o.inclusive?">=":">",n=r(o.origin);return n?`\xC7ok k\xFC\xE7\xFCk: beklenen ${o.origin} ${e}${o.minimum.toString()} ${n.unit}`:`\xC7ok k\xFC\xE7\xFCk: beklenen ${o.origin} ${e}${o.minimum.toString()}`}case"invalid_format":{let e=o;return e.format==="starts_with"?`Ge\xE7ersiz metin: "${e.prefix}" ile ba\u015Flamal\u0131`:e.format==="ends_with"?`Ge\xE7ersiz metin: "${e.suffix}" ile bitmeli`:e.format==="includes"?`Ge\xE7ersiz metin: "${e.includes}" i\xE7ermeli`:e.format==="regex"?`Ge\xE7ersiz metin: ${e.pattern} desenine uymal\u0131`:`Ge\xE7ersiz ${i[e.format]??o.format}`}case"not_multiple_of":return`Ge\xE7ersiz say\u0131: ${o.divisor} ile tam b\xF6l\xFCnebilmeli`;case"unrecognized_keys":return`Tan\u0131nmayan anahtar${o.keys.length>1?"lar":""}: ${s(o.keys,", ")}`;case"invalid_key":return`${o.origin} i\xE7inde ge\xE7ersiz anahtar`;case"invalid_union":return"Ge\xE7ersiz de\u011Fer";case"invalid_element":return`${o.origin} i\xE7inde ge\xE7ersiz de\u011Fer`;default:return"Ge\xE7ersiz de\u011Fer"}}};function wu(){return{localeError:al()}}var ul=()=>{let t={string:{unit:"\u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},file:{unit:"\u0431\u0430\u0439\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},array:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"},set:{unit:"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432",verb:"\u043C\u0430\u0442\u0438\u043C\u0435"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0447\u0438\u0441\u043B\u043E";case"object":{if(Array.isArray(e))return"\u043C\u0430\u0441\u0438\u0432";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456",email:"\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0457 \u043F\u043E\u0448\u0442\u0438",url:"URL",emoji:"\u0435\u043C\u043E\u0434\u0437\u0456",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\u0434\u0430\u0442\u0430 \u0442\u0430 \u0447\u0430\u0441 ISO",date:"\u0434\u0430\u0442\u0430 ISO",time:"\u0447\u0430\u0441 ISO",duration:"\u0442\u0440\u0438\u0432\u0430\u043B\u0456\u0441\u0442\u044C ISO",ipv4:"\u0430\u0434\u0440\u0435\u0441\u0430 IPv4",ipv6:"\u0430\u0434\u0440\u0435\u0441\u0430 IPv6",cidrv4:"\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv4",cidrv6:"\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv6",base64:"\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64",base64url:"\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64url",json_string:"\u0440\u044F\u0434\u043E\u043A JSON",e164:"\u043D\u043E\u043C\u0435\u0440 E.164",jwt:"JWT",template_literal:"\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"};return e=>{switch(e.code){case"invalid_type":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${e.expected}, \u043E\u0442\u0440\u0438\u043C\u0430\u043D\u043E ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${g(e.values[0])}`:`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0430 \u043E\u043F\u0446\u0456\u044F: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F \u043E\u0434\u043D\u0435 \u0437 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} ${a.verb} ${n}${e.maximum.toString()} ${a.unit??"\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432"}`:`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${e.origin??"\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} \u0431\u0443\u0434\u0435 ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${e.origin} ${a.verb} ${n}${e.minimum.toString()} ${a.unit}`:`\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${e.origin} \u0431\u0443\u0434\u0435 ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043F\u043E\u0447\u0438\u043D\u0430\u0442\u0438\u0441\u044F \u0437 "${n.prefix}"`:n.format==="ends_with"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0432\u0430\u0442\u0438\u0441\u044F \u043D\u0430 "${n.suffix}"`:n.format==="includes"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043C\u0456\u0441\u0442\u0438\u0442\u0438 "${n.includes}"`:n.format==="regex"?`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0430\u0442\u0438 \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${n.pattern}`:`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0447\u0438\u0441\u043B\u043E: \u043F\u043E\u0432\u0438\u043D\u043D\u043E \u0431\u0443\u0442\u0438 \u043A\u0440\u0430\u0442\u043D\u0438\u043C ${e.divisor}`;case"unrecognized_keys":return`\u041D\u0435\u0440\u043E\u0437\u043F\u0456\u0437\u043D\u0430\u043D\u0438\u0439 \u043A\u043B\u044E\u0447${e.keys.length>1?"\u0456":""}: ${s(e.keys,", ")}`;case"invalid_key":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u043A\u043B\u044E\u0447 \u0443 ${e.origin}`;case"invalid_union":return"\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456";case"invalid_element":return`\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0443 ${e.origin}`;default:return"\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"}}};function Su(){return{localeError:ul()}}var cl=()=>{let t={string:{unit:"\u062D\u0631\u0648\u0641",verb:"\u06C1\u0648\u0646\u0627"},file:{unit:"\u0628\u0627\u0626\u0679\u0633",verb:"\u06C1\u0648\u0646\u0627"},array:{unit:"\u0622\u0626\u0679\u0645\u0632",verb:"\u06C1\u0648\u0646\u0627"},set:{unit:"\u0622\u0626\u0679\u0645\u0632",verb:"\u06C1\u0648\u0646\u0627"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"\u0646\u0645\u0628\u0631";case"object":{if(Array.isArray(e))return"\u0622\u0631\u06D2";if(e===null)return"\u0646\u0644";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0627\u0646 \u067E\u0679",email:"\u0627\u06CC \u0645\u06CC\u0644 \u0627\u06CC\u0688\u0631\u06CC\u0633",url:"\u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644",emoji:"\u0627\u06CC\u0645\u0648\u062C\u06CC",uuid:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",uuidv4:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 4",uuidv6:"\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 6",nanoid:"\u0646\u06CC\u0646\u0648 \u0622\u0626\u06CC \u0688\u06CC",guid:"\u062C\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",cuid:"\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",cuid2:"\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC 2",ulid:"\u06CC\u0648 \u0627\u06CC\u0644 \u0622\u0626\u06CC \u0688\u06CC",xid:"\u0627\u06CC\u06A9\u0633 \u0622\u0626\u06CC \u0688\u06CC",ksuid:"\u06A9\u06D2 \u0627\u06CC\u0633 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",datetime:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0688\u06CC\u0679 \u0679\u0627\u0626\u0645",date:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u062A\u0627\u0631\u06CC\u062E",time:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0648\u0642\u062A",duration:"\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0645\u062F\u062A",ipv4:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0627\u06CC\u0688\u0631\u06CC\u0633",ipv6:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0627\u06CC\u0688\u0631\u06CC\u0633",cidrv4:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0631\u06CC\u0646\u062C",cidrv6:"\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0631\u06CC\u0646\u062C",base64:"\u0628\u06CC\u0633 64 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",base64url:"\u0628\u06CC\u0633 64 \u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",json_string:"\u062C\u06D2 \u0627\u06CC\u0633 \u0627\u0648 \u0627\u06CC\u0646 \u0633\u0679\u0631\u0646\u06AF",e164:"\u0627\u06CC 164 \u0646\u0645\u0628\u0631",jwt:"\u062C\u06D2 \u0688\u0628\u0644\u06CC\u0648 \u0679\u06CC",template_literal:"\u0627\u0646 \u067E\u0679"};return e=>{switch(e.code){case"invalid_type":return`\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${e.expected} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627\u060C ${i(e.input)} \u0645\u0648\u0635\u0648\u0644 \u06C1\u0648\u0627`;case"invalid_value":return e.values.length===1?`\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${g(e.values[0])} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`:`\u063A\u0644\u0637 \u0622\u067E\u0634\u0646: ${s(e.values,"|")} \u0645\u06CC\u06BA \u0633\u06D2 \u0627\u06CC\u06A9 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u0628\u06C1\u062A \u0628\u0691\u0627: ${e.origin??"\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u06D2 ${n}${e.maximum.toString()} ${a.unit??"\u0639\u0646\u0627\u0635\u0631"} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`:`\u0628\u06C1\u062A \u0628\u0691\u0627: ${e.origin??"\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u0627 ${n}${e.maximum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${e.origin} \u06A9\u06D2 ${n}${e.minimum.toString()} ${a.unit} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`:`\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${e.origin} \u06A9\u0627 ${n}${e.minimum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${n.prefix}" \u0633\u06D2 \u0634\u0631\u0648\u0639 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:n.format==="ends_with"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${n.suffix}" \u067E\u0631 \u062E\u062A\u0645 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:n.format==="includes"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${n.includes}" \u0634\u0627\u0645\u0644 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:n.format==="regex"?`\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \u067E\u06CC\u0679\u0631\u0646 ${n.pattern} \u0633\u06D2 \u0645\u06CC\u0686 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`:`\u063A\u0644\u0637 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u063A\u0644\u0637 \u0646\u0645\u0628\u0631: ${e.divisor} \u06A9\u0627 \u0645\u0636\u0627\u0639\u0641 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;case"unrecognized_keys":return`\u063A\u06CC\u0631 \u062A\u0633\u0644\u06CC\u0645 \u0634\u062F\u06C1 \u06A9\u06CC${e.keys.length>1?"\u0632":""}: ${s(e.keys,"\u060C ")}`;case"invalid_key":return`${e.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u06A9\u06CC`;case"invalid_union":return"\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679";case"invalid_element":return`${e.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u0648\u06CC\u0644\u06CC\u0648`;default:return"\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679"}}};function ju(){return{localeError:cl()}}var sl=()=>{let t={string:{unit:"k\xFD t\u1EF1",verb:"c\xF3"},file:{unit:"byte",verb:"c\xF3"},array:{unit:"ph\u1EA7n t\u1EED",verb:"c\xF3"},set:{unit:"ph\u1EA7n t\u1EED",verb:"c\xF3"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"s\u1ED1";case"object":{if(Array.isArray(e))return"m\u1EA3ng";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u0111\u1EA7u v\xE0o",email:"\u0111\u1ECBa ch\u1EC9 email",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ng\xE0y gi\u1EDD ISO",date:"ng\xE0y ISO",time:"gi\u1EDD ISO",duration:"kho\u1EA3ng th\u1EDDi gian ISO",ipv4:"\u0111\u1ECBa ch\u1EC9 IPv4",ipv6:"\u0111\u1ECBa ch\u1EC9 IPv6",cidrv4:"d\u1EA3i IPv4",cidrv6:"d\u1EA3i IPv6",base64:"chu\u1ED7i m\xE3 h\xF3a base64",base64url:"chu\u1ED7i m\xE3 h\xF3a base64url",json_string:"chu\u1ED7i JSON",e164:"s\u1ED1 E.164",jwt:"JWT",template_literal:"\u0111\u1EA7u v\xE0o"};return e=>{switch(e.code){case"invalid_type":return`\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${e.expected}, nh\u1EADn \u0111\u01B0\u1EE3c ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${g(e.values[0])}`:`T\xF9y ch\u1ECDn kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i m\u1ED9t trong c\xE1c gi\xE1 tr\u1ECB ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${e.origin??"gi\xE1 tr\u1ECB"} ${a.verb} ${n}${e.maximum.toString()} ${a.unit??"ph\u1EA7n t\u1EED"}`:`Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${e.origin??"gi\xE1 tr\u1ECB"} ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${e.origin} ${a.verb} ${n}${e.minimum.toString()} ${a.unit}`:`Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${e.origin} ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i b\u1EAFt \u0111\u1EA7u b\u1EB1ng "${n.prefix}"`:n.format==="ends_with"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i k\u1EBFt th\xFAc b\u1EB1ng "${n.suffix}"`:n.format==="includes"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i bao g\u1ED3m "${n.includes}"`:n.format==="regex"?`Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i kh\u1EDBp v\u1EDBi m\u1EABu ${n.pattern}`:`${o[n.format]??e.format} kh\xF4ng h\u1EE3p l\u1EC7`}case"not_multiple_of":return`S\u1ED1 kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a ${e.divisor}`;case"unrecognized_keys":return`Kh\xF3a kh\xF4ng \u0111\u01B0\u1EE3c nh\u1EADn d\u1EA1ng: ${s(e.keys,", ")}`;case"invalid_key":return`Kh\xF3a kh\xF4ng h\u1EE3p l\u1EC7 trong ${e.origin}`;case"invalid_union":return"\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7";case"invalid_element":return`Gi\xE1 tr\u1ECB kh\xF4ng h\u1EE3p l\u1EC7 trong ${e.origin}`;default:return"\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7"}}};function Pu(){return{localeError:sl()}}var ll=()=>{let t={string:{unit:"\u5B57\u7B26",verb:"\u5305\u542B"},file:{unit:"\u5B57\u8282",verb:"\u5305\u542B"},array:{unit:"\u9879",verb:"\u5305\u542B"},set:{unit:"\u9879",verb:"\u5305\u542B"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"\u975E\u6570\u5B57(NaN)":"\u6570\u5B57";case"object":{if(Array.isArray(e))return"\u6570\u7EC4";if(e===null)return"\u7A7A\u503C(null)";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u8F93\u5165",email:"\u7535\u5B50\u90AE\u4EF6",url:"URL",emoji:"\u8868\u60C5\u7B26\u53F7",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO\u65E5\u671F\u65F6\u95F4",date:"ISO\u65E5\u671F",time:"ISO\u65F6\u95F4",duration:"ISO\u65F6\u957F",ipv4:"IPv4\u5730\u5740",ipv6:"IPv6\u5730\u5740",cidrv4:"IPv4\u7F51\u6BB5",cidrv6:"IPv6\u7F51\u6BB5",base64:"base64\u7F16\u7801\u5B57\u7B26\u4E32",base64url:"base64url\u7F16\u7801\u5B57\u7B26\u4E32",json_string:"JSON\u5B57\u7B26\u4E32",e164:"E.164\u53F7\u7801",jwt:"JWT",template_literal:"\u8F93\u5165"};return e=>{switch(e.code){case"invalid_type":return`\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${e.expected}\uFF0C\u5B9E\u9645\u63A5\u6536 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${g(e.values[0])}`:`\u65E0\u6548\u9009\u9879\uFF1A\u671F\u671B\u4EE5\u4E0B\u4E4B\u4E00 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${e.origin??"\u503C"} ${n}${e.maximum.toString()} ${a.unit??"\u4E2A\u5143\u7D20"}`:`\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${e.origin??"\u503C"} ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${e.origin} ${n}${e.minimum.toString()} ${a.unit}`:`\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${e.origin} ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${n.prefix}" \u5F00\u5934`:n.format==="ends_with"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${n.suffix}" \u7ED3\u5C3E`:n.format==="includes"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u5305\u542B "${n.includes}"`:n.format==="regex"?`\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F ${n.pattern}`:`\u65E0\u6548${o[n.format]??e.format}`}case"not_multiple_of":return`\u65E0\u6548\u6570\u5B57\uFF1A\u5FC5\u987B\u662F ${e.divisor} \u7684\u500D\u6570`;case"unrecognized_keys":return`\u51FA\u73B0\u672A\u77E5\u7684\u952E(key): ${s(e.keys,", ")}`;case"invalid_key":return`${e.origin} \u4E2D\u7684\u952E(key)\u65E0\u6548`;case"invalid_union":return"\u65E0\u6548\u8F93\u5165";case"invalid_element":return`${e.origin} \u4E2D\u5305\u542B\u65E0\u6548\u503C(value)`;default:return"\u65E0\u6548\u8F93\u5165"}}};function Ou(){return{localeError:ll()}}var ml=()=>{let t={string:{unit:"\u5B57\u5143",verb:"\u64C1\u6709"},file:{unit:"\u4F4D\u5143\u7D44",verb:"\u64C1\u6709"},array:{unit:"\u9805\u76EE",verb:"\u64C1\u6709"},set:{unit:"\u9805\u76EE",verb:"\u64C1\u6709"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"number";case"object":{if(Array.isArray(e))return"array";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u8F38\u5165",email:"\u90F5\u4EF6\u5730\u5740",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"ISO \u65E5\u671F\u6642\u9593",date:"ISO \u65E5\u671F",time:"ISO \u6642\u9593",duration:"ISO \u671F\u9593",ipv4:"IPv4 \u4F4D\u5740",ipv6:"IPv6 \u4F4D\u5740",cidrv4:"IPv4 \u7BC4\u570D",cidrv6:"IPv6 \u7BC4\u570D",base64:"base64 \u7DE8\u78BC\u5B57\u4E32",base64url:"base64url \u7DE8\u78BC\u5B57\u4E32",json_string:"JSON \u5B57\u4E32",e164:"E.164 \u6578\u503C",jwt:"JWT",template_literal:"\u8F38\u5165"};return e=>{switch(e.code){case"invalid_type":return`\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${e.expected}\uFF0C\u4F46\u6536\u5230 ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${g(e.values[0])}`:`\u7121\u6548\u7684\u9078\u9805\uFF1A\u9810\u671F\u70BA\u4EE5\u4E0B\u5176\u4E2D\u4E4B\u4E00 ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${e.origin??"\u503C"} \u61C9\u70BA ${n}${e.maximum.toString()} ${a.unit??"\u500B\u5143\u7D20"}`:`\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${e.origin??"\u503C"} \u61C9\u70BA ${n}${e.maximum.toString()}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${e.origin} \u61C9\u70BA ${n}${e.minimum.toString()} ${a.unit}`:`\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${e.origin} \u61C9\u70BA ${n}${e.minimum.toString()}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${n.prefix}" \u958B\u982D`:n.format==="ends_with"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${n.suffix}" \u7D50\u5C3E`:n.format==="includes"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u5305\u542B "${n.includes}"`:n.format==="regex"?`\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u7B26\u5408\u683C\u5F0F ${n.pattern}`:`\u7121\u6548\u7684 ${o[n.format]??e.format}`}case"not_multiple_of":return`\u7121\u6548\u7684\u6578\u5B57\uFF1A\u5FC5\u9808\u70BA ${e.divisor} \u7684\u500D\u6578`;case"unrecognized_keys":return`\u7121\u6CD5\u8B58\u5225\u7684\u9375\u503C${e.keys.length>1?"\u5011":""}\uFF1A${s(e.keys,"\u3001")}`;case"invalid_key":return`${e.origin} \u4E2D\u6709\u7121\u6548\u7684\u9375\u503C`;case"invalid_union":return"\u7121\u6548\u7684\u8F38\u5165\u503C";case"invalid_element":return`${e.origin} \u4E2D\u6709\u7121\u6548\u7684\u503C`;default:return"\u7121\u6548\u7684\u8F38\u5165\u503C"}}};function Uu(){return{localeError:ml()}}var dl=()=>{let t={string:{unit:"\xE0mi",verb:"n\xED"},file:{unit:"bytes",verb:"n\xED"},array:{unit:"nkan",verb:"n\xED"},set:{unit:"nkan",verb:"n\xED"}};function r(e){return t[e]??null}let i=e=>{let n=typeof e;switch(n){case"number":return Number.isNaN(e)?"NaN":"n\u1ECD\u0301mb\xE0";case"object":{if(Array.isArray(e))return"akop\u1ECD";if(e===null)return"null";if(Object.getPrototypeOf(e)!==Object.prototype&&e.constructor)return e.constructor.name}}return n},o={regex:"\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9",email:"\xE0d\xEDr\u1EB9\u0301s\xEC \xECm\u1EB9\u0301l\xEC",url:"URL",emoji:"emoji",uuid:"UUID",uuidv4:"UUIDv4",uuidv6:"UUIDv6",nanoid:"nanoid",guid:"GUID",cuid:"cuid",cuid2:"cuid2",ulid:"ULID",xid:"XID",ksuid:"KSUID",datetime:"\xE0k\xF3k\xF2 ISO",date:"\u1ECDj\u1ECD\u0301 ISO",time:"\xE0k\xF3k\xF2 ISO",duration:"\xE0k\xF3k\xF2 t\xF3 p\xE9 ISO",ipv4:"\xE0d\xEDr\u1EB9\u0301s\xEC IPv4",ipv6:"\xE0d\xEDr\u1EB9\u0301s\xEC IPv6",cidrv4:"\xE0gb\xE8gb\xE8 IPv4",cidrv6:"\xE0gb\xE8gb\xE8 IPv6",base64:"\u1ECD\u0300r\u1ECD\u0300 t\xED a k\u1ECD\u0301 n\xED base64",base64url:"\u1ECD\u0300r\u1ECD\u0300 base64url",json_string:"\u1ECD\u0300r\u1ECD\u0300 JSON",e164:"n\u1ECD\u0301mb\xE0 E.164",jwt:"JWT",template_literal:"\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9"};return e=>{switch(e.code){case"invalid_type":return`\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${e.expected}, \xE0m\u1ECD\u0300 a r\xED ${i(e.input)}`;case"invalid_value":return e.values.length===1?`\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${g(e.values[0])}`:`\xC0\u1E63\xE0y\xE0n a\u1E63\xEC\u1E63e: yan \u1ECD\u0300kan l\xE1ra ${s(e.values,"|")}`;case"too_big":{let n=e.inclusive?"<=":"<",a=r(e.origin);return a?`T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${e.origin??"iye"} ${a.verb} ${n}${e.maximum} ${a.unit}`:`T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 ${n}${e.maximum}`}case"too_small":{let n=e.inclusive?">=":">",a=r(e.origin);return a?`K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${e.origin} ${a.verb} ${n}${e.minimum} ${a.unit}`:`K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 ${n}${e.minimum}`}case"invalid_format":{let n=e;return n.format==="starts_with"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\u1EB9\u0300r\u1EB9\u0300 p\u1EB9\u0300l\xFA "${n.prefix}"`:n.format==="ends_with"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 par\xED p\u1EB9\u0300l\xFA "${n.suffix}"`:n.format==="includes"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 n\xED "${n.includes}"`:n.format==="regex"?`\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\xE1 \xE0p\u1EB9\u1EB9r\u1EB9 mu ${n.pattern}`:`A\u1E63\xEC\u1E63e: ${o[n.format]??e.format}`}case"not_multiple_of":return`N\u1ECD\u0301mb\xE0 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 j\u1EB9\u0301 \xE8y\xE0 p\xEDp\xEDn ti ${e.divisor}`;case"unrecognized_keys":return`B\u1ECDt\xECn\xEC \xE0\xECm\u1ECD\u0300: ${s(e.keys,", ")}`;case"invalid_key":return`B\u1ECDt\xECn\xEC a\u1E63\xEC\u1E63e n\xEDn\xFA ${e.origin}`;case"invalid_union":return"\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";case"invalid_element":return`Iye a\u1E63\xEC\u1E63e n\xEDn\xFA ${e.origin}`;default:return"\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e"}}};function Nu(){return{localeError:dl()}}var Ti=Symbol("ZodOutput"),Ei=Symbol("ZodInput"),ye=class{constructor(){this._map=new Map,this._idmap=new Map}add(r,...i){let o=i[0];if(this._map.set(r,o),o&&typeof o=="object"&&"id"in o){if(this._idmap.has(o.id))throw new Error(`ID ${o.id} already exists in the registry`);this._idmap.set(o.id,r)}return this}clear(){return this._map=new Map,this._idmap=new Map,this}remove(r){let i=this._map.get(r);return i&&typeof i=="object"&&"id"in i&&this._idmap.delete(i.id),this._map.delete(r),this}get(r){let i=r._zod.parent;if(i){let o={...this.get(i)??{}};delete o.id;let e={...o,...this._map.get(r)};return Object.keys(e).length?e:void 0}return this._map.get(r)}has(r){return this._map.has(r)}};function Ot(){return new ye}var G=Ot();function Li(t,r){return new t({type:"string",...f(r)})}function Ai(t,r){return new t({type:"string",coerce:!0,...f(r)})}function Ut(t,r){return new t({type:"string",format:"email",check:"string_format",abort:!1,...f(r)})}function Je(t,r){return new t({type:"string",format:"guid",check:"string_format",abort:!1,...f(r)})}function Nt(t,r){return new t({type:"string",format:"uuid",check:"string_format",abort:!1,...f(r)})}function Zt(t,r){return new t({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v4",...f(r)})}function Dt(t,r){return new t({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v6",...f(r)})}function Tt(t,r){return new t({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v7",...f(r)})}function Et(t,r){return new t({type:"string",format:"url",check:"string_format",abort:!1,...f(r)})}function Lt(t,r){return new t({type:"string",format:"emoji",check:"string_format",abort:!1,...f(r)})}function At(t,r){return new t({type:"string",format:"nanoid",check:"string_format",abort:!1,...f(r)})}function Rt(t,r){return new t({type:"string",format:"cuid",check:"string_format",abort:!1,...f(r)})}function Ct(t,r){return new t({type:"string",format:"cuid2",check:"string_format",abort:!1,...f(r)})}function Vt(t,r){return new t({type:"string",format:"ulid",check:"string_format",abort:!1,...f(r)})}function Ft(t,r){return new t({type:"string",format:"xid",check:"string_format",abort:!1,...f(r)})}function Mt(t,r){return new t({type:"string",format:"ksuid",check:"string_format",abort:!1,...f(r)})}function Jt(t,r){return new t({type:"string",format:"ipv4",check:"string_format",abort:!1,...f(r)})}function Wt(t,r){return new t({type:"string",format:"ipv6",check:"string_format",abort:!1,...f(r)})}function Bt(t,r){return new t({type:"string",format:"cidrv4",check:"string_format",abort:!1,...f(r)})}function Gt(t,r){return new t({type:"string",format:"cidrv6",check:"string_format",abort:!1,...f(r)})}function Kt(t,r){return new t({type:"string",format:"base64",check:"string_format",abort:!1,...f(r)})}function Xt(t,r){return new t({type:"string",format:"base64url",check:"string_format",abort:!1,...f(r)})}function qt(t,r){return new t({type:"string",format:"e164",check:"string_format",abort:!1,...f(r)})}function Ht(t,r){return new t({type:"string",format:"jwt",check:"string_format",abort:!1,...f(r)})}var Ri={Any:null,Minute:-1,Second:0,Millisecond:3,Microsecond:6};function Ci(t,r){return new t({type:"string",format:"datetime",check:"string_format",offset:!1,local:!1,precision:null,...f(r)})}function Vi(t,r){return new t({type:"string",format:"date",check:"string_format",...f(r)})}function Fi(t,r){return new t({type:"string",format:"time",check:"string_format",precision:null,...f(r)})}function Mi(t,r){return new t({type:"string",format:"duration",check:"string_format",...f(r)})}function Ji(t,r){return new t({type:"number",checks:[],...f(r)})}function Wi(t,r){return new t({type:"number",coerce:!0,checks:[],...f(r)})}function Bi(t,r){return new t({type:"number",check:"number_format",abort:!1,format:"safeint",...f(r)})}function Gi(t,r){return new t({type:"number",check:"number_format",abort:!1,format:"float32",...f(r)})}function Ki(t,r){return new t({type:"number",check:"number_format",abort:!1,format:"float64",...f(r)})}function Xi(t,r){return new t({type:"number",check:"number_format",abort:!1,format:"int32",...f(r)})}function qi(t,r){return new t({type:"number",check:"number_format",abort:!1,format:"uint32",...f(r)})}function Hi(t,r){return new t({type:"boolean",...f(r)})}function Yi(t,r){return new t({type:"boolean",coerce:!0,...f(r)})}function Qi(t,r){return new t({type:"bigint",...f(r)})}function eo(t,r){return new t({type:"bigint",coerce:!0,...f(r)})}function to(t,r){return new t({type:"bigint",check:"bigint_format",abort:!1,format:"int64",...f(r)})}function ro(t,r){return new t({type:"bigint",check:"bigint_format",abort:!1,format:"uint64",...f(r)})}function no(t,r){return new t({type:"symbol",...f(r)})}function io(t,r){return new t({type:"undefined",...f(r)})}function oo(t,r){return new t({type:"null",...f(r)})}function ao(t){return new t({type:"any"})}function be(t){return new t({type:"unknown"})}function uo(t,r){return new t({type:"never",...f(r)})}function co(t,r){return new t({type:"void",...f(r)})}function so(t,r){return new t({type:"date",...f(r)})}function lo(t,r){return new t({type:"date",coerce:!0,...f(r)})}function mo(t,r){return new t({type:"nan",...f(r)})}function X(t,r){return new xt({check:"less_than",...f(r),value:t,inclusive:!1})}function F(t,r){return new xt({check:"less_than",...f(r),value:t,inclusive:!0})}function q(t,r){return new kt({check:"greater_than",...f(r),value:t,inclusive:!1})}function R(t,r){return new kt({check:"greater_than",...f(r),value:t,inclusive:!0})}function po(t){return q(0,t)}function fo(t){return X(0,t)}function go(t){return F(0,t)}function vo(t){return R(0,t)}function se(t,r){return new pn({check:"multiple_of",...f(r),value:t})}function xe(t,r){return new vn({check:"max_size",...f(r),maximum:t})}function le(t,r){return new hn({check:"min_size",...f(r),minimum:t})}function We(t,r){return new $n({check:"size_equals",...f(r),size:t})}function ke(t,r){return new _n({check:"max_length",...f(r),maximum:t})}function re(t,r){return new yn({check:"min_length",...f(r),minimum:t})}function ze(t,r){return new bn({check:"length_equals",...f(r),length:t})}function Be(t,r){return new xn({check:"string_format",format:"regex",...f(r),pattern:t})}function Ge(t){return new kn({check:"string_format",format:"lowercase",...f(t)})}function Ke(t){return new zn({check:"string_format",format:"uppercase",...f(t)})}function Xe(t,r){return new In({check:"string_format",format:"includes",...f(r),includes:t})}function qe(t,r){return new wn({check:"string_format",format:"starts_with",...f(r),prefix:t})}function He(t,r){return new Sn({check:"string_format",format:"ends_with",...f(r),suffix:t})}function ho(t,r,i){return new jn({check:"property",property:t,schema:r,...f(i)})}function Ye(t,r){return new Pn({check:"mime_type",mime:t,...f(r)})}function H(t){return new On({check:"overwrite",tx:t})}function Qe(t){return H(r=>r.normalize(t))}function et(){return H(t=>t.trim())}function tt(){return H(t=>t.toLowerCase())}function rt(){return H(t=>t.toUpperCase())}function nt(t,r,i){return new t({type:"array",element:r,...f(i)})}function pl(t,r,i){return new t({type:"union",options:r,...f(i)})}function fl(t,r,i,o){return new t({type:"union",options:i,discriminator:r,...f(o)})}function gl(t,r,i){return new t({type:"intersection",left:r,right:i})}function $o(t,r,i,o){let e=i instanceof x,n=e?o:i,a=e?i:null;return new t({type:"tuple",items:r,rest:a,...f(n)})}function vl(t,r,i,o){return new t({type:"record",keyType:r,valueType:i,...f(o)})}function hl(t,r,i,o){return new t({type:"map",keyType:r,valueType:i,...f(o)})}function $l(t,r,i){return new t({type:"set",valueType:r,...f(i)})}function _l(t,r,i){let o=Array.isArray(r)?Object.fromEntries(r.map(e=>[e,e])):r;return new t({type:"enum",entries:o,...f(i)})}function yl(t,r,i){return new t({type:"enum",entries:r,...f(i)})}function bl(t,r,i){return new t({type:"literal",values:Array.isArray(r)?r:[r],...f(i)})}function _o(t,r){return new t({type:"file",...f(r)})}function xl(t,r){return new t({type:"transform",transform:r})}function kl(t,r){return new t({type:"optional",innerType:r})}function zl(t,r){return new t({type:"nullable",innerType:r})}function Il(t,r,i){return new t({type:"default",innerType:r,get defaultValue(){return typeof i=="function"?i():i}})}function wl(t,r,i){return new t({type:"nonoptional",innerType:r,...f(i)})}function Sl(t,r){return new t({type:"success",innerType:r})}function jl(t,r,i){return new t({type:"catch",innerType:r,catchValue:typeof i=="function"?i:()=>i})}function Pl(t,r,i){return new t({type:"pipe",in:r,out:i})}function Ol(t,r){return new t({type:"readonly",innerType:r})}function Ul(t,r,i){return new t({type:"template_literal",parts:r,...f(i)})}function Nl(t,r){return new t({type:"lazy",getter:r})}function Zl(t,r){return new t({type:"promise",innerType:r})}function yo(t,r,i){let o=f(i);return o.abort??(o.abort=!0),new t({type:"custom",check:"custom",fn:r,...o})}function bo(t,r,i){return new t({type:"custom",check:"custom",fn:r,...f(i)})}function xo(t){let r=Zu(i=>(i.addIssue=o=>{if(typeof o=="string")i.issues.push(ve(o,i.value,r._zod.def));else{let e=o;e.fatal&&(e.continue=!1),e.code??(e.code="custom"),e.input??(e.input=i.value),e.inst??(e.inst=r),e.continue??(e.continue=!r._zod.def.abort),i.issues.push(ve(e))}},t(i.value,i)));return r}function Zu(t,r){let i=new U({check:"custom",...f(r)});return i._zod.check=t,i}function ko(t,r){let i=f(r),o=i.truthy??["true","1","yes","on","y","enabled"],e=i.falsy??["false","0","no","off","n","disabled"];i.case!=="sensitive"&&(o=o.map(m=>typeof m=="string"?m.toLowerCase():m),e=e.map(m=>typeof m=="string"?m.toLowerCase():m));let n=new Set(o),a=new Set(e),u=t.Pipe??Fe,l=t.Boolean??Re,p=t.String??ue,h=t.Transform??Ve,d=new h({type:"transform",transform:(m,_)=>{let y=m;return i.case!=="sensitive"&&(y=y.toLowerCase()),n.has(y)?!0:a.has(y)?!1:(_.issues.push({code:"invalid_value",expected:"stringbool",values:[...n,...a],input:_.value,inst:d,continue:!1}),{})},error:i.error}),b=new u({type:"pipe",in:new p({type:"string",error:i.error}),out:d,error:i.error});return new u({type:"pipe",in:b,out:new l({type:"boolean",error:i.error}),error:i.error})}function Yt(t,r,i,o={}){let e=f(o),n={...f(o),check:"string_format",type:"string",format:r,fn:typeof i=="function"?i:u=>i.test(u),...e};return i instanceof RegExp&&(n.pattern=i),new t(n)}var Qt=class{constructor(r){this._def=r,this.def=r}implement(r){if(typeof r!="function")throw new Error("implement() must be called with a function");let i=(...o)=>{let e=this._def.input?vt(this._def.input,o,void 0,{callee:i}):o;if(!Array.isArray(e))throw new Error("Invalid arguments schema: not an array or tuple schema.");let n=r(...e);return this._def.output?vt(this._def.output,n,void 0,{callee:i}):n};return i}implementAsync(r){if(typeof r!="function")throw new Error("implement() must be called with a function");let i=async(...o)=>{let e=this._def.input?await $t(this._def.input,o,void 0,{callee:i}):o;if(!Array.isArray(e))throw new Error("Invalid arguments schema: not an array or tuple schema.");let n=await r(...e);return this._def.output?$t(this._def.output,n,void 0,{callee:i}):n};return i}input(...r){let i=this.constructor;return Array.isArray(r[0])?new i({type:"function",input:new ce({type:"tuple",items:r[0],rest:r[1]}),output:this._def.output}):new i({type:"function",input:r[0],output:this._def.output})}output(r){let i=this.constructor;return new i({type:"function",input:this._def.input,output:r})}};function zo(t){return new Qt({type:"function",input:Array.isArray(t?.input)?$o(ce,t?.input):t?.input??nt(Ce,be(_e)),output:t?.output??be(_e)})}var it=class{constructor(r){this.counter=0,this.metadataRegistry=r?.metadata??G,this.target=r?.target??"draft-2020-12",this.unrepresentable=r?.unrepresentable??"throw",this.override=r?.override??(()=>{}),this.io=r?.io??"output",this.seen=new Map}process(r,i={path:[],schemaPath:[]}){var o;let e=r._zod.def,n={guid:"uuid",url:"uri",datetime:"date-time",json_string:"json-string",regex:""},a=this.seen.get(r);if(a)return a.count++,i.schemaPath.includes(r)&&(a.cycle=i.path),a.schema;let u={schema:{},count:1,cycle:void 0,path:i.path};this.seen.set(r,u);let l=r._zod.toJSONSchema?.();if(l)u.schema=l;else{let d={...i,schemaPath:[...i.schemaPath,r],path:i.path},b=r._zod.parent;if(b)u.ref=b,this.process(b,d),this.seen.get(b).isParent=!0;else{let $=u.schema;switch(e.type){case"string":{let m=$;m.type="string";let{minimum:_,maximum:y,format:S,patterns:z,contentEncoding:I}=r._zod.bag;if(typeof _=="number"&&(m.minLength=_),typeof y=="number"&&(m.maxLength=y),S&&(m.format=n[S]??S,m.format===""&&delete m.format),I&&(m.contentEncoding=I),z&&z.size>0){let P=[...z];P.length===1?m.pattern=P[0].source:P.length>1&&(u.schema.allOf=[...P.map(lt=>({...this.target==="draft-7"||this.target==="draft-4"?{type:"string"}:{},pattern:lt.source}))])}break}case"number":{let m=$,{minimum:_,maximum:y,format:S,multipleOf:z,exclusiveMaximum:I,exclusiveMinimum:P}=r._zod.bag;typeof S=="string"&&S.includes("int")?m.type="integer":m.type="number",typeof P=="number"&&(this.target==="draft-4"?(m.minimum=P,m.exclusiveMinimum=!0):m.exclusiveMinimum=P),typeof _=="number"&&(m.minimum=_,typeof P=="number"&&this.target!=="draft-4"&&(P>=_?delete m.minimum:delete m.exclusiveMinimum)),typeof I=="number"&&(this.target==="draft-4"?(m.maximum=I,m.exclusiveMaximum=!0):m.exclusiveMaximum=I),typeof y=="number"&&(m.maximum=y,typeof I=="number"&&this.target!=="draft-4"&&(I<=y?delete m.maximum:delete m.exclusiveMaximum)),typeof z=="number"&&(m.multipleOf=z);break}case"boolean":{let m=$;m.type="boolean";break}case"bigint":{if(this.unrepresentable==="throw")throw new Error("BigInt cannot be represented in JSON Schema");break}case"symbol":{if(this.unrepresentable==="throw")throw new Error("Symbols cannot be represented in JSON Schema");break}case"null":{$.type="null";break}case"any":break;case"unknown":break;case"undefined":{if(this.unrepresentable==="throw")throw new Error("Undefined cannot be represented in JSON Schema");break}case"void":{if(this.unrepresentable==="throw")throw new Error("Void cannot be represented in JSON Schema");break}case"never":{$.not={};break}case"date":{if(this.unrepresentable==="throw")throw new Error("Date cannot be represented in JSON Schema");break}case"array":{let m=$,{minimum:_,maximum:y}=r._zod.bag;typeof _=="number"&&(m.minItems=_),typeof y=="number"&&(m.maxItems=y),m.type="array",m.items=this.process(e.element,{...d,path:[...d.path,"items"]});break}case"object":{let m=$;m.type="object",m.properties={};let _=e.shape;for(let z in _)m.properties[z]=this.process(_[z],{...d,path:[...d.path,"properties",z]});let y=new Set(Object.keys(_)),S=new Set([...y].filter(z=>{let I=e.shape[z]._zod;return this.io==="input"?I.optin===void 0:I.optout===void 0}));S.size>0&&(m.required=Array.from(S)),e.catchall?._zod.def.type==="never"?m.additionalProperties=!1:e.catchall?e.catchall&&(m.additionalProperties=this.process(e.catchall,{...d,path:[...d.path,"additionalProperties"]})):this.io==="output"&&(m.additionalProperties=!1);break}case"union":{let m=$;m.anyOf=e.options.map((_,y)=>this.process(_,{...d,path:[...d.path,"anyOf",y]}));break}case"intersection":{let m=$,_=this.process(e.left,{...d,path:[...d.path,"allOf",0]}),y=this.process(e.right,{...d,path:[...d.path,"allOf",1]}),S=I=>"allOf"in I&&Object.keys(I).length===1,z=[...S(_)?_.allOf:[_],...S(y)?y.allOf:[y]];m.allOf=z;break}case"tuple":{let m=$;m.type="array";let _=e.items.map((z,I)=>this.process(z,{...d,path:[...d.path,"prefixItems",I]}));if(this.target==="draft-2020-12"?m.prefixItems=_:m.items=_,e.rest){let z=this.process(e.rest,{...d,path:[...d.path,"items"]});this.target==="draft-2020-12"?m.items=z:m.additionalItems=z}e.rest&&(m.items=this.process(e.rest,{...d,path:[...d.path,"items"]}));let{minimum:y,maximum:S}=r._zod.bag;typeof y=="number"&&(m.minItems=y),typeof S=="number"&&(m.maxItems=S);break}case"record":{let m=$;m.type="object",this.target!=="draft-4"&&(m.propertyNames=this.process(e.keyType,{...d,path:[...d.path,"propertyNames"]})),m.additionalProperties=this.process(e.valueType,{...d,path:[...d.path,"additionalProperties"]});break}case"map":{if(this.unrepresentable==="throw")throw new Error("Map cannot be represented in JSON Schema");break}case"set":{if(this.unrepresentable==="throw")throw new Error("Set cannot be represented in JSON Schema");break}case"enum":{let m=$,_=Pe(e.entries);_.every(y=>typeof y=="number")&&(m.type="number"),_.every(y=>typeof y=="string")&&(m.type="string"),m.enum=_;break}case"literal":{let m=$,_=[];for(let y of e.values)if(y===void 0){if(this.unrepresentable==="throw")throw new Error("Literal `undefined` cannot be represented in JSON Schema")}else if(typeof y=="bigint"){if(this.unrepresentable==="throw")throw new Error("BigInt literals cannot be represented in JSON Schema");_.push(Number(y))}else _.push(y);if(_.length!==0)if(_.length===1){let y=_[0];m.type=y===null?"null":typeof y,this.target==="draft-4"?m.enum=[y]:m.const=y}else _.every(y=>typeof y=="number")&&(m.type="number"),_.every(y=>typeof y=="string")&&(m.type="string"),_.every(y=>typeof y=="boolean")&&(m.type="string"),_.every(y=>y===null)&&(m.type="null"),m.enum=_;break}case"file":{let m=$,_={type:"string",format:"binary",contentEncoding:"binary"},{minimum:y,maximum:S,mime:z}=r._zod.bag;y!==void 0&&(_.minLength=y),S!==void 0&&(_.maxLength=S),z?z.length===1?(_.contentMediaType=z[0],Object.assign(m,_)):m.anyOf=z.map(I=>({..._,contentMediaType:I})):Object.assign(m,_);break}case"transform":{if(this.unrepresentable==="throw")throw new Error("Transforms cannot be represented in JSON Schema");break}case"nullable":{let m=this.process(e.innerType,d);$.anyOf=[m,{type:"null"}];break}case"nonoptional":{this.process(e.innerType,d),u.ref=e.innerType;break}case"success":{let m=$;m.type="boolean";break}case"default":{this.process(e.innerType,d),u.ref=e.innerType,$.default=JSON.parse(JSON.stringify(e.defaultValue));break}case"prefault":{this.process(e.innerType,d),u.ref=e.innerType,this.io==="input"&&($._prefault=JSON.parse(JSON.stringify(e.defaultValue)));break}case"catch":{this.process(e.innerType,d),u.ref=e.innerType;let m;try{m=e.catchValue(void 0)}catch{throw new Error("Dynamic catch values are not supported in JSON Schema")}$.default=m;break}case"nan":{if(this.unrepresentable==="throw")throw new Error("NaN cannot be represented in JSON Schema");break}case"template_literal":{let m=$,_=r._zod.pattern;if(!_)throw new Error("Pattern not found in template literal");m.type="string",m.pattern=_.source;break}case"pipe":{let m=this.io==="input"?e.in._zod.def.type==="transform"?e.out:e.in:e.out;this.process(m,d),u.ref=m;break}case"readonly":{this.process(e.innerType,d),u.ref=e.innerType,$.readOnly=!0;break}case"promise":{this.process(e.innerType,d),u.ref=e.innerType;break}case"optional":{this.process(e.innerType,d),u.ref=e.innerType;break}case"lazy":{let m=r._zod.innerType;this.process(m,d),u.ref=m;break}case"custom":{if(this.unrepresentable==="throw")throw new Error("Custom types cannot be represented in JSON Schema");break}default:}}}let p=this.metadataRegistry.get(r);return p&&Object.assign(u.schema,p),this.io==="input"&&Z(r)&&(delete u.schema.examples,delete u.schema.default),this.io==="input"&&u.schema._prefault&&((o=u.schema).default??(o.default=u.schema._prefault)),delete u.schema._prefault,this.seen.get(r).schema}emit(r,i){let o={cycles:i?.cycles??"ref",reused:i?.reused??"inline",external:i?.external??void 0},e=this.seen.get(r);if(!e)throw new Error("Unprocessed schema. This is a bug in Zod.");let n=h=>{let d=this.target==="draft-2020-12"?"$defs":"definitions";if(o.external){let _=o.external.registry.get(h[0])?.id,y=o.external.uri??(z=>z);if(_)return{ref:y(_)};let S=h[1].defId??h[1].schema.id??`schema${this.counter++}`;return h[1].defId=S,{defId:S,ref:`${y("__shared")}#/${d}/${S}`}}if(h[1]===e)return{ref:"#"};let $=`#/${d}/`,m=h[1].schema.id??`__schema${this.counter++}`;return{defId:m,ref:$+m}},a=h=>{if(h[1].schema.$ref)return;let d=h[1],{ref:b,defId:$}=n(h);d.def={...d.schema},$&&(d.defId=$);let m=d.schema;for(let _ in m)delete m[_];m.$ref=b};if(o.cycles==="throw")for(let h of this.seen.entries()){let d=h[1];if(d.cycle)throw new Error(`Cycle detected: #/${d.cycle?.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`)}for(let h of this.seen.entries()){let d=h[1];if(r===h[0]){a(h);continue}if(o.external){let $=o.external.registry.get(h[0])?.id;if(r!==h[0]&&$){a(h);continue}}if(this.metadataRegistry.get(h[0])?.id){a(h);continue}if(d.cycle){a(h);continue}if(d.count>1&&o.reused==="ref"){a(h);continue}}let u=(h,d)=>{let b=this.seen.get(h),$=b.def??b.schema,m={...$};if(b.ref===null)return;let _=b.ref;if(b.ref=null,_){u(_,d);let y=this.seen.get(_).schema;y.$ref&&(d.target==="draft-7"||d.target==="draft-4")?($.allOf=$.allOf??[],$.allOf.push(y)):(Object.assign($,y),Object.assign($,m))}b.isParent||this.override({zodSchema:h,jsonSchema:$,path:b.path??[]})};for(let h of[...this.seen.entries()].reverse())u(h[0],{target:this.target});let l={};if(this.target==="draft-2020-12"?l.$schema="https://json-schema.org/draft/2020-12/schema":this.target==="draft-7"?l.$schema="http://json-schema.org/draft-07/schema#":this.target==="draft-4"?l.$schema="http://json-schema.org/draft-04/schema#":console.warn(`Invalid target: ${this.target}`),o.external?.uri){let h=o.external.registry.get(r)?.id;if(!h)throw new Error("Schema is missing an `id` property");l.$id=o.external.uri(h)}Object.assign(l,e.def);let p=o.external?.defs??{};for(let h of this.seen.entries()){let d=h[1];d.def&&d.defId&&(p[d.defId]=d.def)}o.external||Object.keys(p).length>0&&(this.target==="draft-2020-12"?l.$defs=p:l.definitions=p);try{return JSON.parse(JSON.stringify(l))}catch{throw new Error("Error converting schema to JSON.")}}};function Io(t,r){if(t instanceof ye){let o=new it(r),e={};for(let u of t._idmap.entries()){let[l,p]=u;o.process(p)}let n={},a={registry:t,uri:r?.uri,defs:e};for(let u of t._idmap.entries()){let[l,p]=u;n[l]=o.emit(p,{...r,external:a})}if(Object.keys(e).length>0){let u=o.target==="draft-2020-12"?"$defs":"definitions";n.__shared={[u]:e}}return{schemas:n}}let i=new it(r);return i.process(t),i.emit(t,r)}function Z(t,r){let i=r??{seen:new Set};if(i.seen.has(t))return!1;i.seen.add(t);let e=t._zod.def;switch(e.type){case"string":case"number":case"bigint":case"boolean":case"date":case"symbol":case"undefined":case"null":case"any":case"unknown":case"never":case"void":case"literal":case"enum":case"nan":case"file":case"template_literal":return!1;case"array":return Z(e.element,i);case"object":{for(let n in e.shape)if(Z(e.shape[n],i))return!0;return!1}case"union":{for(let n of e.options)if(Z(n,i))return!0;return!1}case"intersection":return Z(e.left,i)||Z(e.right,i);case"tuple":{for(let n of e.items)if(Z(n,i))return!0;return!!(e.rest&&Z(e.rest,i))}case"record":return Z(e.keyType,i)||Z(e.valueType,i);case"map":return Z(e.keyType,i)||Z(e.valueType,i);case"set":return Z(e.valueType,i);case"promise":case"optional":case"nonoptional":case"nullable":case"readonly":return Z(e.innerType,i);case"lazy":return Z(e.getter(),i);case"default":return Z(e.innerType,i);case"prefault":return Z(e.innerType,i);case"custom":return!1;case"transform":return!0;case"pipe":return Z(e.in,i)||Z(e.out,i);case"success":return!1;case"catch":return!1;default:}throw new Error(`Unknown schema type: ${e.type}`)}var Du={};var ir={};ne(ir,{ZodISODate:()=>tr,ZodISODateTime:()=>er,ZodISODuration:()=>nr,ZodISOTime:()=>rr,date:()=>So,datetime:()=>wo,duration:()=>Po,time:()=>jo});var er=c("ZodISODateTime",(t,r)=>{Jn.init(t,r),O.init(t,r)});function wo(t){return Ci(er,t)}var tr=c("ZodISODate",(t,r)=>{Wn.init(t,r),O.init(t,r)});function So(t){return Vi(tr,t)}var rr=c("ZodISOTime",(t,r)=>{Bn.init(t,r),O.init(t,r)});function jo(t){return Fi(rr,t)}var nr=c("ZodISODuration",(t,r)=>{Gn.init(t,r),O.init(t,r)});function Po(t){return Mi(nr,t)}var Eu=(t,r)=>{Te.init(t,r),t.name="ZodError",Object.defineProperties(t,{format:{value:i=>Le(t,i)},flatten:{value:i=>Ee(t,i)},addIssue:{value:i=>{t.issues.push(i),t.message=JSON.stringify(t.issues,fe,2)}},addIssues:{value:i=>{t.issues.push(...i),t.message=JSON.stringify(t.issues,fe,2)}},isEmpty:{get(){return t.issues.length===0}}})},Tl=c("ZodError",Eu),Ie=c("ZodError",Eu,{Parent:Error});var Oo=gt(Ie),Uo=ht(Ie),No=_t(Ie),Zo=yt(Ie);var k=c("ZodType",(t,r)=>(x.init(t,r),t.def=r,Object.defineProperty(t,"_def",{value:r}),t.check=(...i)=>t.clone({...r,checks:[...r.checks??[],...i.map(o=>typeof o=="function"?{_zod:{check:o,def:{check:"custom"},onattach:[]}}:o)]}),t.clone=(i,o)=>A(t,i,o),t.brand=()=>t,t.register=(i,o)=>(i.add(t,o),t),t.parse=(i,o)=>Oo(t,i,o,{callee:t.parse}),t.safeParse=(i,o)=>No(t,i,o),t.parseAsync=async(i,o)=>Uo(t,i,o,{callee:t.parseAsync}),t.safeParseAsync=async(i,o)=>Zo(t,i,o),t.spa=t.safeParseAsync,t.refine=(i,o)=>t.check(bc(i,o)),t.superRefine=i=>t.check(xc(i)),t.overwrite=i=>t.check(H(i)),t.optional=()=>ur(t),t.nullable=()=>cr(t),t.nullish=()=>ur(cr(t)),t.nonoptional=i=>lc(t,i),t.array=()=>na(t),t.or=i=>oa([t,i]),t.and=i=>qu(t,i),t.transform=i=>sr(t,ca(i)),t.default=i=>uc(t,i),t.prefault=i=>sc(t,i),t.catch=i=>pc(t,i),t.pipe=i=>sr(t,i),t.readonly=()=>vc(t),t.describe=i=>{let o=t.clone();return G.add(o,{description:i}),o},Object.defineProperty(t,"description",{get(){return G.get(t)?.description},configurable:!0}),t.meta=(...i)=>{if(i.length===0)return G.get(t);let o=t.clone();return G.add(o,i[0]),o},t.isOptional=()=>t.safeParse(void 0).success,t.isNullable=()=>t.safeParse(null).success,t)),Eo=c("_ZodString",(t,r)=>{ue.init(t,r),k.init(t,r);let i=t._zod.bag;t.format=i.format??null,t.minLength=i.minimum??null,t.maxLength=i.maximum??null,t.regex=(...o)=>t.check(Be(...o)),t.includes=(...o)=>t.check(Xe(...o)),t.startsWith=(...o)=>t.check(qe(...o)),t.endsWith=(...o)=>t.check(He(...o)),t.min=(...o)=>t.check(re(...o)),t.max=(...o)=>t.check(ke(...o)),t.length=(...o)=>t.check(ze(...o)),t.nonempty=(...o)=>t.check(re(1,...o)),t.lowercase=o=>t.check(Ge(o)),t.uppercase=o=>t.check(Ke(o)),t.trim=()=>t.check(et()),t.normalize=(...o)=>t.check(Qe(...o)),t.toLowerCase=()=>t.check(tt()),t.toUpperCase=()=>t.check(rt())}),at=c("ZodString",(t,r)=>{ue.init(t,r),Eo.init(t,r),t.email=i=>t.check(Ut(Lo,i)),t.url=i=>t.check(Et(Ao,i)),t.jwt=i=>t.check(Ht(Qo,i)),t.emoji=i=>t.check(Lt(Ro,i)),t.guid=i=>t.check(Je(or,i)),t.uuid=i=>t.check(Nt(Q,i)),t.uuidv4=i=>t.check(Zt(Q,i)),t.uuidv6=i=>t.check(Dt(Q,i)),t.uuidv7=i=>t.check(Tt(Q,i)),t.nanoid=i=>t.check(At(Co,i)),t.guid=i=>t.check(Je(or,i)),t.cuid=i=>t.check(Rt(Vo,i)),t.cuid2=i=>t.check(Ct(Fo,i)),t.ulid=i=>t.check(Vt(Mo,i)),t.base64=i=>t.check(Kt(qo,i)),t.base64url=i=>t.check(Xt(Ho,i)),t.xid=i=>t.check(Ft(Jo,i)),t.ksuid=i=>t.check(Mt(Wo,i)),t.ipv4=i=>t.check(Jt(Bo,i)),t.ipv6=i=>t.check(Wt(Go,i)),t.cidrv4=i=>t.check(Bt(Ko,i)),t.cidrv6=i=>t.check(Gt(Xo,i)),t.e164=i=>t.check(qt(Yo,i)),t.datetime=i=>t.check(wo(i)),t.date=i=>t.check(So(i)),t.time=i=>t.check(jo(i)),t.duration=i=>t.check(Po(i))});function Do(t){return Li(at,t)}var O=c("ZodStringFormat",(t,r)=>{j.init(t,r),Eo.init(t,r)}),Lo=c("ZodEmail",(t,r)=>{Tn.init(t,r),O.init(t,r)});function Ll(t){return Ut(Lo,t)}var or=c("ZodGUID",(t,r)=>{Zn.init(t,r),O.init(t,r)});function Al(t){return Je(or,t)}var Q=c("ZodUUID",(t,r)=>{Dn.init(t,r),O.init(t,r)});function Rl(t){return Nt(Q,t)}function Cl(t){return Zt(Q,t)}function Vl(t){return Dt(Q,t)}function Fl(t){return Tt(Q,t)}var Ao=c("ZodURL",(t,r)=>{En.init(t,r),O.init(t,r)});function Ml(t){return Et(Ao,t)}var Ro=c("ZodEmoji",(t,r)=>{Ln.init(t,r),O.init(t,r)});function Jl(t){return Lt(Ro,t)}var Co=c("ZodNanoID",(t,r)=>{An.init(t,r),O.init(t,r)});function Wl(t){return At(Co,t)}var Vo=c("ZodCUID",(t,r)=>{Rn.init(t,r),O.init(t,r)});function Bl(t){return Rt(Vo,t)}var Fo=c("ZodCUID2",(t,r)=>{Cn.init(t,r),O.init(t,r)});function Gl(t){return Ct(Fo,t)}var Mo=c("ZodULID",(t,r)=>{Vn.init(t,r),O.init(t,r)});function Kl(t){return Vt(Mo,t)}var Jo=c("ZodXID",(t,r)=>{Fn.init(t,r),O.init(t,r)});function Xl(t){return Ft(Jo,t)}var Wo=c("ZodKSUID",(t,r)=>{Mn.init(t,r),O.init(t,r)});function ql(t){return Mt(Wo,t)}var Bo=c("ZodIPv4",(t,r)=>{Kn.init(t,r),O.init(t,r)});function Hl(t){return Jt(Bo,t)}var Go=c("ZodIPv6",(t,r)=>{Xn.init(t,r),O.init(t,r)});function Yl(t){return Wt(Go,t)}var Ko=c("ZodCIDRv4",(t,r)=>{qn.init(t,r),O.init(t,r)});function Ql(t){return Bt(Ko,t)}var Xo=c("ZodCIDRv6",(t,r)=>{Hn.init(t,r),O.init(t,r)});function em(t){return Gt(Xo,t)}var qo=c("ZodBase64",(t,r)=>{Qn.init(t,r),O.init(t,r)});function tm(t){return Kt(qo,t)}var Ho=c("ZodBase64URL",(t,r)=>{ei.init(t,r),O.init(t,r)});function rm(t){return Xt(Ho,t)}var Yo=c("ZodE164",(t,r)=>{ti.init(t,r),O.init(t,r)});function nm(t){return qt(Yo,t)}var Qo=c("ZodJWT",(t,r)=>{ri.init(t,r),O.init(t,r)});function im(t){return Ht(Qo,t)}var ea=c("ZodCustomStringFormat",(t,r)=>{ni.init(t,r),O.init(t,r)});function om(t,r,i={}){return Yt(ea,t,r,i)}function am(t){return Yt(ea,"hostname",K.hostname,t)}var ut=c("ZodNumber",(t,r)=>{wt.init(t,r),k.init(t,r),t.gt=(o,e)=>t.check(q(o,e)),t.gte=(o,e)=>t.check(R(o,e)),t.min=(o,e)=>t.check(R(o,e)),t.lt=(o,e)=>t.check(X(o,e)),t.lte=(o,e)=>t.check(F(o,e)),t.max=(o,e)=>t.check(F(o,e)),t.int=o=>t.check(To(o)),t.safe=o=>t.check(To(o)),t.positive=o=>t.check(q(0,o)),t.nonnegative=o=>t.check(R(0,o)),t.negative=o=>t.check(X(0,o)),t.nonpositive=o=>t.check(F(0,o)),t.multipleOf=(o,e)=>t.check(se(o,e)),t.step=(o,e)=>t.check(se(o,e)),t.finite=()=>t;let i=t._zod.bag;t.minValue=Math.max(i.minimum??Number.NEGATIVE_INFINITY,i.exclusiveMinimum??Number.NEGATIVE_INFINITY)??null,t.maxValue=Math.min(i.maximum??Number.POSITIVE_INFINITY,i.exclusiveMaximum??Number.POSITIVE_INFINITY)??null,t.isInt=(i.format??"").includes("int")||Number.isSafeInteger(i.multipleOf??.5),t.isFinite=!0,t.format=i.format??null});function Lu(t){return Ji(ut,t)}var we=c("ZodNumberFormat",(t,r)=>{ii.init(t,r),ut.init(t,r)});function To(t){return Bi(we,t)}function um(t){return Gi(we,t)}function cm(t){return Ki(we,t)}function sm(t){return Xi(we,t)}function lm(t){return qi(we,t)}var ct=c("ZodBoolean",(t,r)=>{Re.init(t,r),k.init(t,r)});function Au(t){return Hi(ct,t)}var st=c("ZodBigInt",(t,r)=>{St.init(t,r),k.init(t,r),t.gte=(o,e)=>t.check(R(o,e)),t.min=(o,e)=>t.check(R(o,e)),t.gt=(o,e)=>t.check(q(o,e)),t.gte=(o,e)=>t.check(R(o,e)),t.min=(o,e)=>t.check(R(o,e)),t.lt=(o,e)=>t.check(X(o,e)),t.lte=(o,e)=>t.check(F(o,e)),t.max=(o,e)=>t.check(F(o,e)),t.positive=o=>t.check(q(BigInt(0),o)),t.negative=o=>t.check(X(BigInt(0),o)),t.nonpositive=o=>t.check(F(BigInt(0),o)),t.nonnegative=o=>t.check(R(BigInt(0),o)),t.multipleOf=(o,e)=>t.check(se(o,e));let i=t._zod.bag;t.minValue=i.minimum??null,t.maxValue=i.maximum??null,t.format=i.format??null});function mm(t){return Qi(st,t)}var ta=c("ZodBigIntFormat",(t,r)=>{oi.init(t,r),st.init(t,r)});function dm(t){return to(ta,t)}function pm(t){return ro(ta,t)}var Ru=c("ZodSymbol",(t,r)=>{ai.init(t,r),k.init(t,r)});function fm(t){return no(Ru,t)}var Cu=c("ZodUndefined",(t,r)=>{ui.init(t,r),k.init(t,r)});function gm(t){return io(Cu,t)}var Vu=c("ZodNull",(t,r)=>{ci.init(t,r),k.init(t,r)});function Fu(t){return oo(Vu,t)}var Mu=c("ZodAny",(t,r)=>{si.init(t,r),k.init(t,r)});function vm(){return ao(Mu)}var Ju=c("ZodUnknown",(t,r)=>{_e.init(t,r),k.init(t,r)});function ar(){return be(Ju)}var Wu=c("ZodNever",(t,r)=>{li.init(t,r),k.init(t,r)});function ra(t){return uo(Wu,t)}var Bu=c("ZodVoid",(t,r)=>{mi.init(t,r),k.init(t,r)});function hm(t){return co(Bu,t)}var lr=c("ZodDate",(t,r)=>{di.init(t,r),k.init(t,r),t.min=(o,e)=>t.check(R(o,e)),t.max=(o,e)=>t.check(F(o,e));let i=t._zod.bag;t.minDate=i.minimum?new Date(i.minimum):null,t.maxDate=i.maximum?new Date(i.maximum):null});function $m(t){return so(lr,t)}var Gu=c("ZodArray",(t,r)=>{Ce.init(t,r),k.init(t,r),t.element=r.element,t.min=(i,o)=>t.check(re(i,o)),t.nonempty=i=>t.check(re(1,i)),t.max=(i,o)=>t.check(ke(i,o)),t.length=(i,o)=>t.check(ze(i,o)),t.unwrap=()=>t.element});function na(t,r){return nt(Gu,t,r)}function _m(t){let r=t._zod.def.shape;return nc(Object.keys(r))}var mr=c("ZodObject",(t,r)=>{pi.init(t,r),k.init(t,r),v.defineLazy(t,"shape",()=>r.shape),t.keyof=()=>tc(Object.keys(t._zod.def.shape)),t.catchall=i=>t.clone({...t._zod.def,catchall:i}),t.passthrough=()=>t.clone({...t._zod.def,catchall:ar()}),t.loose=()=>t.clone({...t._zod.def,catchall:ar()}),t.strict=()=>t.clone({...t._zod.def,catchall:ra()}),t.strip=()=>t.clone({...t._zod.def,catchall:void 0}),t.extend=i=>v.extend(t,i),t.merge=i=>v.merge(t,i),t.pick=i=>v.pick(t,i),t.omit=i=>v.omit(t,i),t.partial=(...i)=>v.partial(sa,t,i[0]),t.required=(...i)=>v.required(la,t,i[0])});function ym(t,r){let i={type:"object",get shape(){return v.assignProp(this,"shape",{...t}),this.shape},...v.normalizeParams(r)};return new mr(i)}function bm(t,r){return new mr({type:"object",get shape(){return v.assignProp(this,"shape",{...t}),this.shape},catchall:ra(),...v.normalizeParams(r)})}function xm(t,r){return new mr({type:"object",get shape(){return v.assignProp(this,"shape",{...t}),this.shape},catchall:ar(),...v.normalizeParams(r)})}var ia=c("ZodUnion",(t,r)=>{jt.init(t,r),k.init(t,r),t.options=r.options});function oa(t,r){return new ia({type:"union",options:t,...v.normalizeParams(r)})}var Ku=c("ZodDiscriminatedUnion",(t,r)=>{ia.init(t,r),fi.init(t,r)});function km(t,r,i){return new Ku({type:"union",options:r,discriminator:t,...v.normalizeParams(i)})}var Xu=c("ZodIntersection",(t,r)=>{gi.init(t,r),k.init(t,r)});function qu(t,r){return new Xu({type:"intersection",left:t,right:r})}var Hu=c("ZodTuple",(t,r)=>{ce.init(t,r),k.init(t,r),t.rest=i=>t.clone({...t._zod.def,rest:i})});function zm(t,r,i){let o=r instanceof x,e=o?i:r,n=o?r:null;return new Hu({type:"tuple",items:t,rest:n,...v.normalizeParams(e)})}var aa=c("ZodRecord",(t,r)=>{vi.init(t,r),k.init(t,r),t.keyType=r.keyType,t.valueType=r.valueType});function Yu(t,r,i){return new aa({type:"record",keyType:t,valueType:r,...v.normalizeParams(i)})}function Im(t,r,i){let o=A(t);return o._zod.values=void 0,new aa({type:"record",keyType:o,valueType:r,...v.normalizeParams(i)})}var Qu=c("ZodMap",(t,r)=>{hi.init(t,r),k.init(t,r),t.keyType=r.keyType,t.valueType=r.valueType});function wm(t,r,i){return new Qu({type:"map",keyType:t,valueType:r,...v.normalizeParams(i)})}var ec=c("ZodSet",(t,r)=>{$i.init(t,r),k.init(t,r),t.min=(...i)=>t.check(le(...i)),t.nonempty=i=>t.check(le(1,i)),t.max=(...i)=>t.check(xe(...i)),t.size=(...i)=>t.check(We(...i))});function Sm(t,r){return new ec({type:"set",valueType:t,...v.normalizeParams(r)})}var ot=c("ZodEnum",(t,r)=>{_i.init(t,r),k.init(t,r),t.enum=r.entries,t.options=Object.values(r.entries);let i=new Set(Object.keys(r.entries));t.extract=(o,e)=>{let n={};for(let a of o)if(i.has(a))n[a]=r.entries[a];else throw new Error(`Key ${a} not found in enum`);return new ot({...r,checks:[],...v.normalizeParams(e),entries:n})},t.exclude=(o,e)=>{let n={...r.entries};for(let a of o)if(i.has(a))delete n[a];else throw new Error(`Key ${a} not found in enum`);return new ot({...r,checks:[],...v.normalizeParams(e),entries:n})}});function tc(t,r){let i=Array.isArray(t)?Object.fromEntries(t.map(o=>[o,o])):t;return new ot({type:"enum",entries:i,...v.normalizeParams(r)})}function jm(t,r){return new ot({type:"enum",entries:t,...v.normalizeParams(r)})}var rc=c("ZodLiteral",(t,r)=>{yi.init(t,r),k.init(t,r),t.values=new Set(r.values),Object.defineProperty(t,"value",{get(){if(r.values.length>1)throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");return r.values[0]}})});function nc(t,r){return new rc({type:"literal",values:Array.isArray(t)?t:[t],...v.normalizeParams(r)})}var ic=c("ZodFile",(t,r)=>{bi.init(t,r),k.init(t,r),t.min=(i,o)=>t.check(le(i,o)),t.max=(i,o)=>t.check(xe(i,o)),t.mime=(i,o)=>t.check(Ye(Array.isArray(i)?i:[i],o))});function Pm(t){return _o(ic,t)}var ua=c("ZodTransform",(t,r)=>{Ve.init(t,r),k.init(t,r),t._zod.parse=(i,o)=>{i.addIssue=n=>{if(typeof n=="string")i.issues.push(v.issue(n,i.value,r));else{let a=n;a.fatal&&(a.continue=!1),a.code??(a.code="custom"),a.input??(a.input=i.value),a.inst??(a.inst=t),i.issues.push(v.issue(a))}};let e=r.transform(i.value,i);return e instanceof Promise?e.then(n=>(i.value=n,i)):(i.value=e,i)}});function ca(t){return new ua({type:"transform",transform:t})}var sa=c("ZodOptional",(t,r)=>{xi.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function ur(t){return new sa({type:"optional",innerType:t})}var oc=c("ZodNullable",(t,r)=>{ki.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function cr(t){return new oc({type:"nullable",innerType:t})}function Om(t){return ur(cr(t))}var ac=c("ZodDefault",(t,r)=>{zi.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType,t.removeDefault=t.unwrap});function uc(t,r){return new ac({type:"default",innerType:t,get defaultValue(){return typeof r=="function"?r():r}})}var cc=c("ZodPrefault",(t,r)=>{Ii.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function sc(t,r){return new cc({type:"prefault",innerType:t,get defaultValue(){return typeof r=="function"?r():r}})}var la=c("ZodNonOptional",(t,r)=>{wi.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function lc(t,r){return new la({type:"nonoptional",innerType:t,...v.normalizeParams(r)})}var mc=c("ZodSuccess",(t,r)=>{Si.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function Um(t){return new mc({type:"success",innerType:t})}var dc=c("ZodCatch",(t,r)=>{ji.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType,t.removeCatch=t.unwrap});function pc(t,r){return new dc({type:"catch",innerType:t,catchValue:typeof r=="function"?r:()=>r})}var fc=c("ZodNaN",(t,r)=>{Pi.init(t,r),k.init(t,r)});function Nm(t){return mo(fc,t)}var ma=c("ZodPipe",(t,r)=>{Fe.init(t,r),k.init(t,r),t.in=r.in,t.out=r.out});function sr(t,r){return new ma({type:"pipe",in:t,out:r})}var gc=c("ZodReadonly",(t,r)=>{Oi.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function vc(t){return new gc({type:"readonly",innerType:t})}var hc=c("ZodTemplateLiteral",(t,r)=>{Ui.init(t,r),k.init(t,r)});function Zm(t,r){return new hc({type:"template_literal",parts:t,...v.normalizeParams(r)})}var $c=c("ZodLazy",(t,r)=>{Zi.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.getter()});function _c(t){return new $c({type:"lazy",getter:t})}var yc=c("ZodPromise",(t,r)=>{Ni.init(t,r),k.init(t,r),t.unwrap=()=>t._zod.def.innerType});function Dm(t){return new yc({type:"promise",innerType:t})}var dr=c("ZodCustom",(t,r)=>{Di.init(t,r),k.init(t,r)});function Tm(t){let r=new U({check:"custom"});return r._zod.check=t,r}function Em(t,r){return yo(dr,t??(()=>!0),r)}function bc(t,r={}){return bo(dr,t,r)}function xc(t){return xo(t)}function Lm(t,r={error:`Input not instance of ${t.name}`}){let i=new dr({type:"custom",check:"custom",fn:o=>o instanceof t,abort:!0,...v.normalizeParams(r)});return i._zod.bag.Class=t,i}var Am=(...t)=>ko({Pipe:ma,Boolean:ct,String:at,Transform:ua},...t);function Rm(t){let r=_c(()=>oa([Do(t),Lu(),Au(),Fu(),na(r),Yu(Do(),r)]));return r}function Cm(t,r){return sr(ca(t),r)}var Vm={invalid_type:"invalid_type",too_big:"too_big",too_small:"too_small",invalid_format:"invalid_format",not_multiple_of:"not_multiple_of",unrecognized_keys:"unrecognized_keys",invalid_union:"invalid_union",invalid_key:"invalid_key",invalid_element:"invalid_element",invalid_value:"invalid_value",custom:"custom"};function Fm(t){N({customError:t})}function Mm(){return N().customError}var da;da||(da={});var pa={};ne(pa,{bigint:()=>Gm,boolean:()=>Bm,date:()=>Km,number:()=>Wm,string:()=>Jm});function Jm(t){return Ai(at,t)}function Wm(t){return Wi(ut,t)}function Bm(t){return Yi(ct,t)}function Gm(t){return eo(st,t)}function Km(t){return lo(lr,t)}N(Pt());var zc=T.withTag("pickup"),Xm=M.object({content_id:M.number(),content_title:M.string(),thumbnail_url:M.string()}),qm=M.object({pickup_name:M.string(),content_type:M.number(),total_count:M.number(),content_list:M.array(Xm)}),Hm=10,kc=50;function Ym(){ba("pickup",t=>{let r=new URL(t.url);if(t.method==="GET"&&r.pathname.startsWith("/api/pc/pickup_content"))return async()=>await Qm(r,t)})}async function Qm(t,r){let i=new URLSearchParams(t.search);i.set("number",kc.toString());let o=new Request(`${t.pathname}?${i.toString()}`,r),e=await fetch(o);if(!e.ok)return zc.warn(`Failed to fetch pickup content: ${e.status} ${e.statusText}`),e;let n=qm.parse(await e.clone().json()),a=Math.ceil(n.total_count/kc);return Response.json({pickup_name:n.pickup_name,content_type:n.content_type,total_count:a*Hm,content_list:n.content_list.map(u=>({content_id:u.content_id,content_title:u.content_title,thumbnail_url:u.thumbnail_url}))},{headers:{"Content-Type":"application/json; charset=utf-8"}})}async function Ic(t){if(me(t,"/pickup/[0-9]+"))return zc.log("Started"),Ym(),()=>{}}var wc=T.withTag("watch"),Sc="bttfcWatched",ed=sessionStorage.setItem.bind(sessionStorage);function td(){let t=wc.withTag("setupTeeWatchData");if(sessionStorage.bttfcHooked){t.warn("SessionStorage is already hooked, skipping.");return}t.log("Setting up watch data interception"),Object.getPrototypeOf(sessionStorage).setItem=new Proxy(Object.getPrototypeOf(sessionStorage).setItem,{apply:(r,i,o)=>{if(i!==sessionStorage)return Reflect.apply(r,i,o);let[e,n]=o;return e==="watched"&&(t.log("Intercepted sessionStorage setItem for watched data"),localStorage.setItem(Sc,n)),Reflect.apply(r,i,o)}}),Object.getPrototypeOf(sessionStorage).bttfcHooked=!0}function rd(){let t=wc.withTag("loadWatchData"),r=localStorage.getItem(Sc);if(!r){t.warn("No watched data found in localStorage");return}t.log("Loading watched data from localStorage"),ed("watched",r)}async function jc(t){if(me(t,"/contents"))return rd(),td(),()=>{}}var nd={root:ya,pickup:Ic,watch:jc},Pc;async function Oc(t){Pc?.(),T.log("Navigation detected, calling scripts for path:",t);let r=Object.fromEntries(await Promise.all(Object.entries(nd).map(async([i,o])=>[i,await o(t)])));T.log("Page scripts called",Object.entries(r).filter(([,i])=>i).map(([i])=>i)),Pc=()=>{T.log("Tearing down page scripts");for(let[i,o]of Object.entries(r))o?(T.log(`Tearing down ${i}`),o()):T.warn(`No tear down function for ${i}`)}}function id(){let t=T.withTag("insertNavigationHook"),r=history.pushState,i=(...o)=>(t.log("History pushState called",o),Oc(o[2]),r.apply(history,o));history.pushState=i,t.log("Navigation hook inserted")}async function od(){T.log("Started"),id(),Oc(location.pathname)}od();})();
//# sourceMappingURL=data:application/json;base64,
